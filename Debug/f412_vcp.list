
f412_vcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009634  08009634  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800963c  0800963c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009640  08009640  00019640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f5c  200001fc  08009840  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002158  08009840  00022158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d88a  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e7f  00000000  00000000  0003dab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00041938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00042b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002316a  00000000  00000000  00043bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019672  00000000  00000000  00066d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1624  00000000  00000000  00080394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001419b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d60  00000000  00000000  00141a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009484 	.word	0x08009484

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08009484 	.word	0x08009484

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <GPIO_Main>:
GPIO_TypeDef* GPIO_PORT_SELECT(unsigned char peripheralGROUP);
uint16_t GPIO_PIN_SELECT(unsigned char peripheralID);

/* Functions -----------------------------------------------------------------*/
void GPIO_Main(unsigned char peripheralGROUP, unsigned char peripheralID, unsigned char PROCESS, unsigned char COMMAND)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b089      	sub	sp, #36	; 0x24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4604      	mov	r4, r0
 80005c0:	4608      	mov	r0, r1
 80005c2:	4611      	mov	r1, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	4623      	mov	r3, r4
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	4603      	mov	r3, r0
 80005cc:	71bb      	strb	r3, [r7, #6]
 80005ce:	460b      	mov	r3, r1
 80005d0:	717b      	strb	r3, [r7, #5]
 80005d2:	4613      	mov	r3, r2
 80005d4:	713b      	strb	r3, [r7, #4]
	//Read GPIO
	if(PROCESS == 0x11)
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	2b11      	cmp	r3, #17
 80005da:	d126      	bne.n	800062a <GPIO_Main+0x72>
	{
		GPIO_TypeDef* port = GPIO_PORT_SELECT(peripheralGROUP);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f884 	bl	80006ec <GPIO_PORT_SELECT>
 80005e4:	61f8      	str	r0, [r7, #28]
		uint16_t pin = GPIO_PIN_SELECT(peripheralID);
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f8c1 	bl	8000770 <GPIO_PIN_SELECT>
 80005ee:	4603      	mov	r3, r0
 80005f0:	837b      	strh	r3, [r7, #26]
		int result = HAL_GPIO_ReadPin(port, pin);
 80005f2:	8b7b      	ldrh	r3, [r7, #26]
 80005f4:	4619      	mov	r1, r3
 80005f6:	69f8      	ldr	r0, [r7, #28]
 80005f8:	f001 fb92 	bl	8001d20 <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	617b      	str	r3, [r7, #20]
		char GPIO_STATE[9];

		sprintf(GPIO_STATE, "GPIO state is %d.\n", result);
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	4933      	ldr	r1, [pc, #204]	; (80006d4 <GPIO_Main+0x11c>)
 8000608:	4618      	mov	r0, r3
 800060a:	f008 fb1b 	bl	8008c44 <siprintf>
		CDC_Transmit_FS((uint8_t *)GPIO_STATE, strlen(GPIO_STATE));
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fdfc 	bl	8000210 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f007 fe0a 	bl	800823c <CDC_Transmit_FS>

	else
	{
		CDC_Transmit_FS((uint8_t *)"Error: Invalid GPIO process.\n", strlen("Error: Invalid GPIO process.\n"));
	}
}
 8000628:	e04f      	b.n	80006ca <GPIO_Main+0x112>
	else if(PROCESS == 0x22)
 800062a:	797b      	ldrb	r3, [r7, #5]
 800062c:	2b22      	cmp	r3, #34	; 0x22
 800062e:	d132      	bne.n	8000696 <GPIO_Main+0xde>
		if(COMMAND == 0x00)
 8000630:	793b      	ldrb	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d113      	bne.n	800065e <GPIO_Main+0xa6>
			CDC_Transmit_FS((uint8_t *)"Reset.\n", strlen("Reset.\n"));
 8000636:	2107      	movs	r1, #7
 8000638:	4827      	ldr	r0, [pc, #156]	; (80006d8 <GPIO_Main+0x120>)
 800063a:	f007 fdff 	bl	800823c <CDC_Transmit_FS>
			HAL_GPIO_WritePin(GPIO_PORT_SELECT(peripheralGROUP), GPIO_PIN_SELECT(peripheralID), GPIO_PIN_RESET);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f853 	bl	80006ec <GPIO_PORT_SELECT>
 8000646:	4604      	mov	r4, r0
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f890 	bl	8000770 <GPIO_PIN_SELECT>
 8000650:	4603      	mov	r3, r0
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	4620      	mov	r0, r4
 8000658:	f001 fb7a 	bl	8001d50 <HAL_GPIO_WritePin>
}
 800065c:	e035      	b.n	80006ca <GPIO_Main+0x112>
		else if(COMMAND == 0x01)
 800065e:	793b      	ldrb	r3, [r7, #4]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d113      	bne.n	800068c <GPIO_Main+0xd4>
			CDC_Transmit_FS((uint8_t *)"Set.\n", strlen("Set.\n"));
 8000664:	2105      	movs	r1, #5
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <GPIO_Main+0x124>)
 8000668:	f007 fde8 	bl	800823c <CDC_Transmit_FS>
			HAL_GPIO_WritePin(GPIO_PORT_SELECT(peripheralGROUP), GPIO_PIN_SELECT(peripheralID), GPIO_PIN_SET);
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f83c 	bl	80006ec <GPIO_PORT_SELECT>
 8000674:	4604      	mov	r4, r0
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f879 	bl	8000770 <GPIO_PIN_SELECT>
 800067e:	4603      	mov	r3, r0
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	4620      	mov	r0, r4
 8000686:	f001 fb63 	bl	8001d50 <HAL_GPIO_WritePin>
}
 800068a:	e01e      	b.n	80006ca <GPIO_Main+0x112>
			CDC_Transmit_FS((uint8_t *)"Error: Invalid 'GPIO Write' command.\n", strlen("Error: Invalid 'GPIO Write' command.\n"));
 800068c:	2125      	movs	r1, #37	; 0x25
 800068e:	4814      	ldr	r0, [pc, #80]	; (80006e0 <GPIO_Main+0x128>)
 8000690:	f007 fdd4 	bl	800823c <CDC_Transmit_FS>
}
 8000694:	e019      	b.n	80006ca <GPIO_Main+0x112>
	else if(PROCESS == 0x33)
 8000696:	797b      	ldrb	r3, [r7, #5]
 8000698:	2b33      	cmp	r3, #51	; 0x33
 800069a:	d112      	bne.n	80006c2 <GPIO_Main+0x10a>
		CDC_Transmit_FS((uint8_t *)"Toggled.\n", strlen("Toggled.\n"));
 800069c:	2109      	movs	r1, #9
 800069e:	4811      	ldr	r0, [pc, #68]	; (80006e4 <GPIO_Main+0x12c>)
 80006a0:	f007 fdcc 	bl	800823c <CDC_Transmit_FS>
		HAL_GPIO_TogglePin(GPIO_PORT_SELECT(peripheralGROUP), GPIO_PIN_SELECT(peripheralID));
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f820 	bl	80006ec <GPIO_PORT_SELECT>
 80006ac:	4604      	mov	r4, r0
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f85d 	bl	8000770 <GPIO_PIN_SELECT>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4619      	mov	r1, r3
 80006ba:	4620      	mov	r0, r4
 80006bc:	f001 fb61 	bl	8001d82 <HAL_GPIO_TogglePin>
}
 80006c0:	e003      	b.n	80006ca <GPIO_Main+0x112>
		CDC_Transmit_FS((uint8_t *)"Error: Invalid GPIO process.\n", strlen("Error: Invalid GPIO process.\n"));
 80006c2:	211d      	movs	r1, #29
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <GPIO_Main+0x130>)
 80006c6:	f007 fdb9 	bl	800823c <CDC_Transmit_FS>
}
 80006ca:	bf00      	nop
 80006cc:	3724      	adds	r7, #36	; 0x24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd90      	pop	{r4, r7, pc}
 80006d2:	bf00      	nop
 80006d4:	0800949c 	.word	0x0800949c
 80006d8:	080094b0 	.word	0x080094b0
 80006dc:	080094b8 	.word	0x080094b8
 80006e0:	080094c0 	.word	0x080094c0
 80006e4:	080094e8 	.word	0x080094e8
 80006e8:	080094f4 	.word	0x080094f4

080006ec <GPIO_PORT_SELECT>:

/* GPIO PORT SELECTOR */
GPIO_TypeDef* GPIO_PORT_SELECT(unsigned char peripheralGROUP)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
		 if (peripheralGROUP == 0x10)	{return GPIOA;}
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b10      	cmp	r3, #16
 80006fa:	d101      	bne.n	8000700 <GPIO_PORT_SELECT+0x14>
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <GPIO_PORT_SELECT+0x64>)
 80006fe:	e022      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x11)	{return GPIOB;}
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b11      	cmp	r3, #17
 8000704:	d101      	bne.n	800070a <GPIO_PORT_SELECT+0x1e>
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <GPIO_PORT_SELECT+0x68>)
 8000708:	e01d      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x12)	{return GPIOC;}
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b12      	cmp	r3, #18
 800070e:	d101      	bne.n	8000714 <GPIO_PORT_SELECT+0x28>
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <GPIO_PORT_SELECT+0x6c>)
 8000712:	e018      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x13)	{return GPIOD;}
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b13      	cmp	r3, #19
 8000718:	d101      	bne.n	800071e <GPIO_PORT_SELECT+0x32>
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <GPIO_PORT_SELECT+0x70>)
 800071c:	e013      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x14)	{return GPIOE;}
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b14      	cmp	r3, #20
 8000722:	d101      	bne.n	8000728 <GPIO_PORT_SELECT+0x3c>
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <GPIO_PORT_SELECT+0x74>)
 8000726:	e00e      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x15)	{return GPIOF;}
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b15      	cmp	r3, #21
 800072c:	d101      	bne.n	8000732 <GPIO_PORT_SELECT+0x46>
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <GPIO_PORT_SELECT+0x78>)
 8000730:	e009      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x16)	{return GPIOG;}
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b16      	cmp	r3, #22
 8000736:	d101      	bne.n	800073c <GPIO_PORT_SELECT+0x50>
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <GPIO_PORT_SELECT+0x7c>)
 800073a:	e004      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else //Error!
	{
		CDC_Transmit_FS((uint8_t *)"Error: Invalid 'GPIO Port' selection.\n", strlen("Error: Invalid 'GPIO Port' selection.\n"));
 800073c:	2126      	movs	r1, #38	; 0x26
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <GPIO_PORT_SELECT+0x80>)
 8000740:	f007 fd7c 	bl	800823c <CDC_Transmit_FS>
	}

	return 0;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020000 	.word	0x40020000
 8000754:	40020400 	.word	0x40020400
 8000758:	40020800 	.word	0x40020800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40021000 	.word	0x40021000
 8000764:	40021400 	.word	0x40021400
 8000768:	40021800 	.word	0x40021800
 800076c:	08009514 	.word	0x08009514

08000770 <GPIO_PIN_SELECT>:

/* GPIO PIN SELECTOR */
uint16_t GPIO_PIN_SELECT(unsigned char peripheralID)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
		 if (peripheralID == 0x00)	{return GPIO_PIN_0;}
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <GPIO_PIN_SELECT+0x14>
 8000780:	2301      	movs	r3, #1
 8000782:	e05d      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x01)	{return GPIO_PIN_1;}
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d101      	bne.n	800078e <GPIO_PIN_SELECT+0x1e>
 800078a:	2302      	movs	r3, #2
 800078c:	e058      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x02)	{return GPIO_PIN_2;}
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d101      	bne.n	8000798 <GPIO_PIN_SELECT+0x28>
 8000794:	2304      	movs	r3, #4
 8000796:	e053      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x03)	{return GPIO_PIN_3;}
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d101      	bne.n	80007a2 <GPIO_PIN_SELECT+0x32>
 800079e:	2308      	movs	r3, #8
 80007a0:	e04e      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x04)	{return GPIO_PIN_4;}
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d101      	bne.n	80007ac <GPIO_PIN_SELECT+0x3c>
 80007a8:	2310      	movs	r3, #16
 80007aa:	e049      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x05)	{return GPIO_PIN_5;}
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b05      	cmp	r3, #5
 80007b0:	d101      	bne.n	80007b6 <GPIO_PIN_SELECT+0x46>
 80007b2:	2320      	movs	r3, #32
 80007b4:	e044      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x06)	{return GPIO_PIN_6;}
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b06      	cmp	r3, #6
 80007ba:	d101      	bne.n	80007c0 <GPIO_PIN_SELECT+0x50>
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	e03f      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x07)	{return GPIO_PIN_7;}
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b07      	cmp	r3, #7
 80007c4:	d101      	bne.n	80007ca <GPIO_PIN_SELECT+0x5a>
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	e03a      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x08)	{return GPIO_PIN_8;}
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b08      	cmp	r3, #8
 80007ce:	d102      	bne.n	80007d6 <GPIO_PIN_SELECT+0x66>
 80007d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d4:	e034      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x09)	{return GPIO_PIN_9;}
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b09      	cmp	r3, #9
 80007da:	d102      	bne.n	80007e2 <GPIO_PIN_SELECT+0x72>
 80007dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e0:	e02e      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x10)	{return GPIO_PIN_10;}
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b10      	cmp	r3, #16
 80007e6:	d102      	bne.n	80007ee <GPIO_PIN_SELECT+0x7e>
 80007e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ec:	e028      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x11)	{return GPIO_PIN_11;}
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b11      	cmp	r3, #17
 80007f2:	d102      	bne.n	80007fa <GPIO_PIN_SELECT+0x8a>
 80007f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007f8:	e022      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x12)	{return GPIO_PIN_12;}
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b12      	cmp	r3, #18
 80007fe:	d102      	bne.n	8000806 <GPIO_PIN_SELECT+0x96>
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	e01c      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x13)	{return GPIO_PIN_13;}
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b13      	cmp	r3, #19
 800080a:	d102      	bne.n	8000812 <GPIO_PIN_SELECT+0xa2>
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000810:	e016      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x14)	{return GPIO_PIN_14;}
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b14      	cmp	r3, #20
 8000816:	d102      	bne.n	800081e <GPIO_PIN_SELECT+0xae>
 8000818:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800081c:	e010      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x15)	{return GPIO_PIN_15;}
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b15      	cmp	r3, #21
 8000822:	d102      	bne.n	800082a <GPIO_PIN_SELECT+0xba>
 8000824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000828:	e00a      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x16)	{return GPIO_PIN_All;}
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b16      	cmp	r3, #22
 800082e:	d102      	bne.n	8000836 <GPIO_PIN_SELECT+0xc6>
 8000830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000834:	e004      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else //Error!
	{
		CDC_Transmit_FS((uint8_t *)"Error: Invalid 'GPIO Pin' selection.\n", strlen("Error: Invalid 'GPIO Pin' selection.\n"));
 8000836:	2125      	movs	r1, #37	; 0x25
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <GPIO_PIN_SELECT+0xd8>)
 800083a:	f007 fcff 	bl	800823c <CDC_Transmit_FS>
	}

	return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	0800953c 	.word	0x0800953c

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 fe98 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f81a 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 f9d0 	bl	8000bfc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800085c:	f007 fc2c 	bl	80080b8 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000860:	f000 f89a 	bl	8000998 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000864:	f000 f8c6 	bl	80009f4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000868:	f000 f8f2 	bl	8000a50 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800086c:	f000 f91e 	bl	8000aac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000870:	f000 f946 	bl	8000b00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000874:	f000 f96e 	bl	8000b54 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000878:	f000 f996 	bl	8000ba8 <MX_USART6_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USART_Receive_IT(peripheralID);
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <main+0x3c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fa35 	bl	8000cf0 <USART_Receive_IT>
 8000886:	e7f9      	b.n	800087c <main+0x30>
 8000888:	20000002 	.word	0x20000002

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0a4      	sub	sp, #144	; 0x90
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000896:	2234      	movs	r2, #52	; 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f008 f9ca 	bl	8008c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	223c      	movs	r2, #60	; 0x3c
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f008 f9bb 	bl	8008c34 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <SystemClock_Config+0x104>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a32      	ldr	r2, [pc, #200]	; (8000990 <SystemClock_Config+0x104>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <SystemClock_Config+0x104>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <SystemClock_Config+0x108>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a2c      	ldr	r2, [pc, #176]	; (8000994 <SystemClock_Config+0x108>)
 80008e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e8:	6013      	str	r3, [r2, #0]
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <SystemClock_Config+0x108>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f6:	2301      	movs	r3, #1
 80008f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	2302      	movs	r3, #2
 8000902:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000904:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000908:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 800090a:	2304      	movs	r3, #4
 800090c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800090e:	2348      	movs	r3, #72	; 0x48
 8000910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800091a:	2303      	movs	r3, #3
 800091c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000920:	2302      	movs	r3, #2
 8000922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800092a:	4618      	mov	r0, r3
 800092c:	f003 f94a 	bl	8003bc4 <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000936:	f000 fad1 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	230f      	movs	r3, #15
 800093c:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2302      	movs	r3, #2
 8000940:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000950:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000954:	2102      	movs	r1, #2
 8000956:	4618      	mov	r0, r3
 8000958:	f002 fd42 	bl	80033e0 <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000962:	f000 fabb 	bl	8000edc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000966:	2320      	movs	r3, #32
 8000968:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4618      	mov	r0, r3
 8000974:	f002 ff58 	bl	8003828 <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800097e:	f000 faad 	bl	8000edc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000982:	f002 fe13 	bl	80035ac <HAL_RCC_EnableCSS>
}
 8000986:	bf00      	nop
 8000988:	3790      	adds	r7, #144	; 0x90
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x50>)
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <MX_I2C1_Init+0x54>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009a4:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x58>)
 80009a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009d6:	f001 f9ef 	bl	8001db8 <HAL_I2C_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e0:	f000 fa7c 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200006f8 	.word	0x200006f8
 80009ec:	40005400 	.word	0x40005400
 80009f0:	000186a0 	.word	0x000186a0

080009f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C2_Init+0x50>)
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <MX_I2C2_Init+0x54>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_I2C2_Init+0x58>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a32:	f001 f9c1 	bl	8001db8 <HAL_I2C_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 fa4e 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000074c 	.word	0x2000074c
 8000a48:	40005800 	.word	0x40005800
 8000a4c:	000186a0 	.word	0x000186a0

08000a50 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_I2C3_Init+0x50>)
 8000a56:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <MX_I2C3_Init+0x54>)
 8000a58:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_I2C3_Init+0x50>)
 8000a5c:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <MX_I2C3_Init+0x58>)
 8000a5e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_I2C3_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_I2C3_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_I2C3_Init+0x50>)
 8000a6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a72:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_I2C3_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_I2C3_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_I2C3_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_I2C3_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_I2C3_Init+0x50>)
 8000a8e:	f001 f993 	bl	8001db8 <HAL_I2C_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a98:	f000 fa20 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000660 	.word	0x20000660
 8000aa4:	40005c00 	.word	0x40005c00
 8000aa8:	000186a0 	.word	0x000186a0

08000aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_USART1_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f003 faf2 	bl	80040cc <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aee:	f000 f9f5 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200007a0 	.word	0x200007a0
 8000afc:	40011000 	.word	0x40011000

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_USART2_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b38:	f003 fac8 	bl	80040cc <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 f9cb 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000828 	.word	0x20000828
 8000b50:	40004400 	.word	0x40004400

08000b54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_USART3_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b8c:	f003 fa9e 	bl	80040cc <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f9a1 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200006b4 	.word	0x200006b4
 8000ba4:	40004800 	.word	0x40004800

08000ba8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART6_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_USART6_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_USART6_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART6_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART6_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART6_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART6_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART6_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART6_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART6_UART_Init+0x4c>)
 8000be0:	f003 fa74 	bl	80040cc <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f977 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200007e4 	.word	0x200007e4
 8000bf8:	40011400 	.word	0x40011400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a33      	ldr	r2, [pc, #204]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a2c      	ldr	r2, [pc, #176]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	210f      	movs	r1, #15
 8000cbe:	480b      	ldr	r0, [pc, #44]	; (8000cec <MX_GPIO_Init+0xf0>)
 8000cc0:	f001 f846 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_GPIO_Init+0xf0>)
 8000cdc:	f000 fe8c 	bl	80019f8 <HAL_GPIO_Init>

}
 8000ce0:	bf00      	nop
 8000ce2:	3730      	adds	r7, #48	; 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40021000 	.word	0x40021000

08000cf0 <USART_Receive_IT>:

/* USER CODE BEGIN 4 */

/* USART receive function */
void USART_Receive_IT(unsigned char peripheralID)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	if(peripheralID == 0x01)
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <USART_Receive_IT+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, usart_buffer, sizeof(usart_buffer));
 8000d00:	2216      	movs	r2, #22
 8000d02:	4911      	ldr	r1, [pc, #68]	; (8000d48 <USART_Receive_IT+0x58>)
 8000d04:	4811      	ldr	r0, [pc, #68]	; (8000d4c <USART_Receive_IT+0x5c>)
 8000d06:	f003 fac0 	bl	800428a <HAL_UART_Receive_IT>

	else if(peripheralID == 0x06)
	{
		HAL_UART_Receive_IT(&huart6, usart_buffer, sizeof(usart_buffer));
	}
}
 8000d0a:	e019      	b.n	8000d40 <USART_Receive_IT+0x50>
	else if(peripheralID == 0x02)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d105      	bne.n	8000d1e <USART_Receive_IT+0x2e>
		HAL_UART_Receive_IT(&huart2, usart_buffer, sizeof(usart_buffer));
 8000d12:	2216      	movs	r2, #22
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <USART_Receive_IT+0x58>)
 8000d16:	480e      	ldr	r0, [pc, #56]	; (8000d50 <USART_Receive_IT+0x60>)
 8000d18:	f003 fab7 	bl	800428a <HAL_UART_Receive_IT>
}
 8000d1c:	e010      	b.n	8000d40 <USART_Receive_IT+0x50>
	else if(peripheralID == 0x03)
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d105      	bne.n	8000d30 <USART_Receive_IT+0x40>
		HAL_UART_Receive_IT(&huart3, usart_buffer, sizeof(usart_buffer));
 8000d24:	2216      	movs	r2, #22
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <USART_Receive_IT+0x58>)
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <USART_Receive_IT+0x64>)
 8000d2a:	f003 faae 	bl	800428a <HAL_UART_Receive_IT>
}
 8000d2e:	e007      	b.n	8000d40 <USART_Receive_IT+0x50>
	else if(peripheralID == 0x06)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d104      	bne.n	8000d40 <USART_Receive_IT+0x50>
		HAL_UART_Receive_IT(&huart6, usart_buffer, sizeof(usart_buffer));
 8000d36:	2216      	movs	r2, #22
 8000d38:	4903      	ldr	r1, [pc, #12]	; (8000d48 <USART_Receive_IT+0x58>)
 8000d3a:	4807      	ldr	r0, [pc, #28]	; (8000d58 <USART_Receive_IT+0x68>)
 8000d3c:	f003 faa5 	bl	800428a <HAL_UART_Receive_IT>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000418 	.word	0x20000418
 8000d4c:	200007a0 	.word	0x200007a0
 8000d50:	20000828 	.word	0x20000828
 8000d54:	200006b4 	.word	0x200006b4
 8000d58:	200007e4 	.word	0x200007e4

08000d5c <HAL_UART_RxCpltCallback>:

/* USART receive callback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	if(peripheralGROUP == 0x20)
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_UART_RxCpltCallback+0x2c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b20      	cmp	r3, #32
 8000d6a:	d108      	bne.n	8000d7e <HAL_UART_RxCpltCallback+0x22>
	{
		USART_Receive_IT(peripheralID);
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <HAL_UART_RxCpltCallback+0x30>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ffbd 	bl	8000cf0 <USART_Receive_IT>
		CDC_Transmit_FS(usart_buffer, sizeof(usart_buffer));
 8000d76:	2116      	movs	r1, #22
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_UART_RxCpltCallback+0x34>)
 8000d7a:	f007 fa5f 	bl	800823c <CDC_Transmit_FS>
	}
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000001 	.word	0x20000001
 8000d8c:	20000002 	.word	0x20000002
 8000d90:	20000418 	.word	0x20000418

08000d94 <data_received>:

/* USB receive function */
void data_received(uint8_t* data, uint32_t *Len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	uint8_t len = (uint8_t)*Len;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	73fb      	strb	r3, [r7, #15]

	memset (buffer, '\0', sizeof(buffer));
 8000da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da8:	2100      	movs	r1, #0
 8000daa:	4810      	ldr	r0, [pc, #64]	; (8000dec <data_received+0x58>)
 8000dac:	f007 ff42 	bl	8008c34 <memset>
	memcpy(buffer, data, len);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	461a      	mov	r2, r3
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <data_received+0x58>)
 8000db8:	f007 ff2e 	bl	8008c18 <memcpy>

	if(data_check(data) == 0)
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f819 	bl	8000df4 <data_check>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d103      	bne.n	8000dd0 <data_received+0x3c>
	{
	  PROCESS_INIT(data);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 f831 	bl	8000e30 <PROCESS_INIT>
 8000dce:	e003      	b.n	8000dd8 <data_received+0x44>
	}

	else
	{
	  CDC_Transmit_FS((uint8_t *)"Incorrect data.\n", strlen("Incorrect data.\n"));
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	4807      	ldr	r0, [pc, #28]	; (8000df0 <data_received+0x5c>)
 8000dd4:	f007 fa32 	bl	800823c <CDC_Transmit_FS>
	}

	memset (data, '\0', len);
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f007 ff28 	bl	8008c34 <memset>
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000218 	.word	0x20000218
 8000df0:	08009564 	.word	0x08009564

08000df4 <data_check>:

/* Checksum check */
uint8_t data_check(uint8_t data[])
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	uint8_t checksum = data[0];
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	73fb      	strb	r3, [r7, #15]

	for (int i = 1; i < 64; i++)
 8000e02:	2301      	movs	r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	e009      	b.n	8000e1c <data_check+0x28>
	{
		checksum ^= data[i];
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	4053      	eors	r3, r2
 8000e14:	73fb      	strb	r3, [r7, #15]
	for (int i = 1; i < 64; i++)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e20:	ddf2      	ble.n	8000e08 <data_check+0x14>
	}

	return checksum;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <PROCESS_INIT>:

/* Process Initialization */
void PROCESS_INIT(uint8_t data[])
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	hostID = data[0];
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <PROCESS_INIT+0x98>)
 8000e3e:	701a      	strb	r2, [r3, #0]
	peripheralGROUP = data[1];
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	785a      	ldrb	r2, [r3, #1]
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <PROCESS_INIT+0x9c>)
 8000e46:	701a      	strb	r2, [r3, #0]
	peripheralID = data[2];
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	789a      	ldrb	r2, [r3, #2]
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <PROCESS_INIT+0xa0>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	PROCESS = data[3];
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	78da      	ldrb	r2, [r3, #3]
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <PROCESS_INIT+0xa4>)
 8000e56:	701a      	strb	r2, [r3, #0]
	COMMAND = data[4];
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	791a      	ldrb	r2, [r3, #4]
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <PROCESS_INIT+0xa8>)
 8000e5e:	701a      	strb	r2, [r3, #0]

	if(peripheralGROUP >= 0x10 && peripheralGROUP < 0x20)
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <PROCESS_INIT+0x9c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d90e      	bls.n	8000e86 <PROCESS_INIT+0x56>
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <PROCESS_INIT+0x9c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b1f      	cmp	r3, #31
 8000e6e:	d80a      	bhi.n	8000e86 <PROCESS_INIT+0x56>
	{
		//GPIO Control
		GPIO_Main(peripheralGROUP, peripheralID, PROCESS, COMMAND);
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <PROCESS_INIT+0x9c>)
 8000e72:	7818      	ldrb	r0, [r3, #0]
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <PROCESS_INIT+0xa0>)
 8000e76:	7819      	ldrb	r1, [r3, #0]
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <PROCESS_INIT+0xa4>)
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <PROCESS_INIT+0xa8>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	f7ff fb9a 	bl	80005b8 <GPIO_Main>

	else if(peripheralGROUP >= 0x40 && peripheralGROUP < 0x50)
	{
		//SPI Control
	}
}
 8000e84:	e01c      	b.n	8000ec0 <PROCESS_INIT+0x90>
	else if(peripheralGROUP >= 0x20 && peripheralGROUP < 0x30)
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <PROCESS_INIT+0x9c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b1f      	cmp	r3, #31
 8000e8c:	d918      	bls.n	8000ec0 <PROCESS_INIT+0x90>
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <PROCESS_INIT+0x9c>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b2f      	cmp	r3, #47	; 0x2f
 8000e94:	d809      	bhi.n	8000eaa <PROCESS_INIT+0x7a>
		USART_Main(peripheralID, PROCESS, COMMAND);
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <PROCESS_INIT+0xa0>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <PROCESS_INIT+0xa4>)
 8000e9c:	7811      	ldrb	r1, [r2, #0]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <PROCESS_INIT+0xa8>)
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 faec 	bl	8001480 <USART_Main>
}
 8000ea8:	e00a      	b.n	8000ec0 <PROCESS_INIT+0x90>
	else if(peripheralGROUP >= 0x30 && peripheralGROUP < 0x40)
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <PROCESS_INIT+0x9c>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b2f      	cmp	r3, #47	; 0x2f
 8000eb0:	d906      	bls.n	8000ec0 <PROCESS_INIT+0x90>
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <PROCESS_INIT+0x9c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb8:	d902      	bls.n	8000ec0 <PROCESS_INIT+0x90>
	else if(peripheralGROUP >= 0x40 && peripheralGROUP < 0x50)
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <PROCESS_INIT+0x9c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b3f      	cmp	r3, #63	; 0x3f
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000001 	.word	0x20000001
 8000ed0:	20000002 	.word	0x20000002
 8000ed4:	20000003 	.word	0x20000003
 8000ed8:	20000004 	.word	0x20000004

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <HAL_MspInit+0x4c>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	; 0x38
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a5b      	ldr	r2, [pc, #364]	; (80010c4 <HAL_I2C_MspInit+0x18c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d12c      	bne.n	8000fb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
 8000f5e:	4b5a      	ldr	r3, [pc, #360]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a59      	ldr	r2, [pc, #356]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f76:	23c0      	movs	r3, #192	; 0xc0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7a:	2312      	movs	r3, #18
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f86:	2304      	movs	r3, #4
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	484e      	ldr	r0, [pc, #312]	; (80010cc <HAL_I2C_MspInit+0x194>)
 8000f92:	f000 fd31 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	4b4b      	ldr	r3, [pc, #300]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a4a      	ldr	r2, [pc, #296]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8000fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b48      	ldr	r3, [pc, #288]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fb2:	e082      	b.n	80010ba <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a45      	ldr	r2, [pc, #276]	; (80010d0 <HAL_I2C_MspInit+0x198>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12c      	bne.n	8001018 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a40      	ldr	r2, [pc, #256]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8000fc8:	f043 0320 	orr.w	r3, r3, #32
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0320 	and.w	r3, r3, #32
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fde:	2312      	movs	r3, #18
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fea:	2304      	movs	r3, #4
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4837      	ldr	r0, [pc, #220]	; (80010d4 <HAL_I2C_MspInit+0x19c>)
 8000ff6:	f000 fcff 	bl	80019f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8001004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
}
 8001016:	e050      	b.n	80010ba <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a2e      	ldr	r2, [pc, #184]	; (80010d8 <HAL_I2C_MspInit+0x1a0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d14b      	bne.n	80010ba <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800105a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001060:	2312      	movs	r3, #18
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001064:	2301      	movs	r3, #1
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800106c:	2304      	movs	r3, #4
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	4819      	ldr	r0, [pc, #100]	; (80010dc <HAL_I2C_MspInit+0x1a4>)
 8001078:	f000 fcbe 	bl	80019f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800107c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001082:	2312      	movs	r3, #18
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001086:	2301      	movs	r3, #1
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800108e:	2304      	movs	r3, #4
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <HAL_I2C_MspInit+0x1a8>)
 800109a:	f000 fcad 	bl	80019f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 80010a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_I2C_MspInit+0x190>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
}
 80010ba:	bf00      	nop
 80010bc:	3738      	adds	r7, #56	; 0x38
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40005400 	.word	0x40005400
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40005800 	.word	0x40005800
 80010d4:	40021400 	.word	0x40021400
 80010d8:	40005c00 	.word	0x40005c00
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b090      	sub	sp, #64	; 0x40
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a84      	ldr	r2, [pc, #528]	; (8001314 <HAL_UART_MspInit+0x230>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d135      	bne.n	8001172 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
 800110a:	4b83      	ldr	r3, [pc, #524]	; (8001318 <HAL_UART_MspInit+0x234>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a82      	ldr	r2, [pc, #520]	; (8001318 <HAL_UART_MspInit+0x234>)
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b80      	ldr	r3, [pc, #512]	; (8001318 <HAL_UART_MspInit+0x234>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001120:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
 8001126:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <HAL_UART_MspInit+0x234>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a7b      	ldr	r2, [pc, #492]	; (8001318 <HAL_UART_MspInit+0x234>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b79      	ldr	r3, [pc, #484]	; (8001318 <HAL_UART_MspInit+0x234>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800113e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001150:	2307      	movs	r3, #7
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001158:	4619      	mov	r1, r3
 800115a:	4870      	ldr	r0, [pc, #448]	; (800131c <HAL_UART_MspInit+0x238>)
 800115c:	f000 fc4c 	bl	80019f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2025      	movs	r0, #37	; 0x25
 8001166:	f000 fb7e 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800116a:	2025      	movs	r0, #37	; 0x25
 800116c:	f000 fb97 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001170:	e0cb      	b.n	800130a <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a6a      	ldr	r2, [pc, #424]	; (8001320 <HAL_UART_MspInit+0x23c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d134      	bne.n	80011e6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
 8001180:	4b65      	ldr	r3, [pc, #404]	; (8001318 <HAL_UART_MspInit+0x234>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a64      	ldr	r2, [pc, #400]	; (8001318 <HAL_UART_MspInit+0x234>)
 8001186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b62      	ldr	r3, [pc, #392]	; (8001318 <HAL_UART_MspInit+0x234>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	623b      	str	r3, [r7, #32]
 8001196:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <HAL_UART_MspInit+0x234>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a5d      	ldr	r2, [pc, #372]	; (8001318 <HAL_UART_MspInit+0x234>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <HAL_UART_MspInit+0x234>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011b4:	230c      	movs	r3, #12
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c4:	2307      	movs	r3, #7
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011cc:	4619      	mov	r1, r3
 80011ce:	4853      	ldr	r0, [pc, #332]	; (800131c <HAL_UART_MspInit+0x238>)
 80011d0:	f000 fc12 	bl	80019f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2026      	movs	r0, #38	; 0x26
 80011da:	f000 fb44 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011de:	2026      	movs	r0, #38	; 0x26
 80011e0:	f000 fb5d 	bl	800189e <HAL_NVIC_EnableIRQ>
}
 80011e4:	e091      	b.n	800130a <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART3)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a4e      	ldr	r2, [pc, #312]	; (8001324 <HAL_UART_MspInit+0x240>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d153      	bne.n	8001298 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	4b48      	ldr	r3, [pc, #288]	; (8001318 <HAL_UART_MspInit+0x234>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a47      	ldr	r2, [pc, #284]	; (8001318 <HAL_UART_MspInit+0x234>)
 80011fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <HAL_UART_MspInit+0x234>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_UART_MspInit+0x234>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	4a40      	ldr	r2, [pc, #256]	; (8001318 <HAL_UART_MspInit+0x234>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6313      	str	r3, [r2, #48]	; 0x30
 800121c:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <HAL_UART_MspInit+0x234>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <HAL_UART_MspInit+0x234>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4a39      	ldr	r2, [pc, #228]	; (8001318 <HAL_UART_MspInit+0x234>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	6313      	str	r3, [r2, #48]	; 0x30
 8001238:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_UART_MspInit+0x234>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001244:	2320      	movs	r3, #32
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001254:	2307      	movs	r3, #7
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125c:	4619      	mov	r1, r3
 800125e:	4832      	ldr	r0, [pc, #200]	; (8001328 <HAL_UART_MspInit+0x244>)
 8001260:	f000 fbca 	bl	80019f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001276:	2307      	movs	r3, #7
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127e:	4619      	mov	r1, r3
 8001280:	482a      	ldr	r0, [pc, #168]	; (800132c <HAL_UART_MspInit+0x248>)
 8001282:	f000 fbb9 	bl	80019f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2027      	movs	r0, #39	; 0x27
 800128c:	f000 faeb 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001290:	2027      	movs	r0, #39	; 0x27
 8001292:	f000 fb04 	bl	800189e <HAL_NVIC_EnableIRQ>
}
 8001296:	e038      	b.n	800130a <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART6)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a24      	ldr	r2, [pc, #144]	; (8001330 <HAL_UART_MspInit+0x24c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d133      	bne.n	800130a <HAL_UART_MspInit+0x226>
    __HAL_RCC_USART6_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_UART_MspInit+0x234>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <HAL_UART_MspInit+0x234>)
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_UART_MspInit+0x234>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f003 0320 	and.w	r3, r3, #32
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_UART_MspInit+0x234>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a14      	ldr	r2, [pc, #80]	; (8001318 <HAL_UART_MspInit+0x234>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_UART_MspInit+0x234>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012da:	23c0      	movs	r3, #192	; 0xc0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012ea:	2308      	movs	r3, #8
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <HAL_UART_MspInit+0x244>)
 80012f6:	f000 fb7f 	bl	80019f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2047      	movs	r0, #71	; 0x47
 8001300:	f000 fab1 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001304:	2047      	movs	r0, #71	; 0x47
 8001306:	f000 faca 	bl	800189e <HAL_NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3740      	adds	r7, #64	; 0x40
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40011000 	.word	0x40011000
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000
 8001320:	40004400 	.word	0x40004400
 8001324:	40004800 	.word	0x40004800
 8001328:	40020800 	.word	0x40020800
 800132c:	40020400 	.word	0x40020400
 8001330:	40011400 	.word	0x40011400

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001338:	f002 fa5a 	bl	80037f0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x8>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f950 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <USART1_IRQHandler+0x10>)
 8001392:	f002 ffab 	bl	80042ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200007a0 	.word	0x200007a0

080013a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <USART2_IRQHandler+0x10>)
 80013a6:	f002 ffa1 	bl	80042ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000828 	.word	0x20000828

080013b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <USART3_IRQHandler+0x10>)
 80013ba:	f002 ff97 	bl	80042ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200006b4 	.word	0x200006b4

080013c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <OTG_FS_IRQHandler+0x10>)
 80013ce:	f000 ff8e 	bl	80022ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20001d40 	.word	0x20001d40

080013dc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <USART6_IRQHandler+0x10>)
 80013e2:	f002 ff83 	bl	80042ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200007e4 	.word	0x200007e4

080013f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <_sbrk+0x5c>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <_sbrk+0x60>)
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_sbrk+0x64>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <_sbrk+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	429a      	cmp	r2, r3
 800141e:	d207      	bcs.n	8001430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001420:	f007 fbd0 	bl	8008bc4 <__errno>
 8001424:	4603      	mov	r3, r0
 8001426:	220c      	movs	r2, #12
 8001428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800142e:	e009      	b.n	8001444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <_sbrk+0x64>)
 8001440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20040000 	.word	0x20040000
 8001450:	00000400 	.word	0x00000400
 8001454:	20000430 	.word	0x20000430
 8001458:	20002158 	.word	0x20002158

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <USART_Main>:
/* Private variables -----------------------------------------------*/
extern unsigned char peripheralID;

/* Main USART function */
void USART_Main(unsigned char peripheralID, unsigned char PROCESS, unsigned char COMMAND)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
 800148a:	460b      	mov	r3, r1
 800148c:	71bb      	strb	r3, [r7, #6]
 800148e:	4613      	mov	r3, r2
 8001490:	717b      	strb	r3, [r7, #5]
	USART_Transmit(peripheralID);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 f805 	bl	80014a4 <USART_Transmit>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <USART_Transmit>:

/* USART Transmit function */
void USART_Transmit(unsigned char peripheralID)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	if(peripheralID == 0x01) //uart1
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d107      	bne.n	80014c4 <USART_Transmit+0x20>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)"0", strlen("0"), HAL_MAX_DELAY);
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b8:	2201      	movs	r2, #1
 80014ba:	4917      	ldr	r1, [pc, #92]	; (8001518 <USART_Transmit+0x74>)
 80014bc:	4817      	ldr	r0, [pc, #92]	; (800151c <USART_Transmit+0x78>)
 80014be:	f002 fe52 	bl	8004166 <HAL_UART_Transmit>

	else
	{
		CDC_Transmit_FS((uint8_t *)"Error: Invalid USART selection.\n", strlen("Error: Invalid USART selection.\n"));
	}
}
 80014c2:	e024      	b.n	800150e <USART_Transmit+0x6a>
	else if(peripheralID == 0x02) //uart2
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d107      	bne.n	80014da <USART_Transmit+0x36>
		HAL_UART_Transmit(&huart2, (uint8_t *)"0", strlen("0"), HAL_MAX_DELAY);
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ce:	2201      	movs	r2, #1
 80014d0:	4911      	ldr	r1, [pc, #68]	; (8001518 <USART_Transmit+0x74>)
 80014d2:	4813      	ldr	r0, [pc, #76]	; (8001520 <USART_Transmit+0x7c>)
 80014d4:	f002 fe47 	bl	8004166 <HAL_UART_Transmit>
}
 80014d8:	e019      	b.n	800150e <USART_Transmit+0x6a>
	else if(peripheralID == 0x03) //uart3
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d107      	bne.n	80014f0 <USART_Transmit+0x4c>
		HAL_UART_Transmit(&huart3, (uint8_t *)"0", strlen("0"), HAL_MAX_DELAY);
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e4:	2201      	movs	r2, #1
 80014e6:	490c      	ldr	r1, [pc, #48]	; (8001518 <USART_Transmit+0x74>)
 80014e8:	480e      	ldr	r0, [pc, #56]	; (8001524 <USART_Transmit+0x80>)
 80014ea:	f002 fe3c 	bl	8004166 <HAL_UART_Transmit>
}
 80014ee:	e00e      	b.n	800150e <USART_Transmit+0x6a>
	else if(peripheralID == 0x06) //uart6
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d107      	bne.n	8001506 <USART_Transmit+0x62>
		HAL_UART_Transmit(&huart6, (uint8_t *)"0", strlen("0"), HAL_MAX_DELAY);
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014fa:	2201      	movs	r2, #1
 80014fc:	4906      	ldr	r1, [pc, #24]	; (8001518 <USART_Transmit+0x74>)
 80014fe:	480a      	ldr	r0, [pc, #40]	; (8001528 <USART_Transmit+0x84>)
 8001500:	f002 fe31 	bl	8004166 <HAL_UART_Transmit>
}
 8001504:	e003      	b.n	800150e <USART_Transmit+0x6a>
		CDC_Transmit_FS((uint8_t *)"Error: Invalid USART selection.\n", strlen("Error: Invalid USART selection.\n"));
 8001506:	2120      	movs	r1, #32
 8001508:	4808      	ldr	r0, [pc, #32]	; (800152c <USART_Transmit+0x88>)
 800150a:	f006 fe97 	bl	800823c <CDC_Transmit_FS>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	08009578 	.word	0x08009578
 800151c:	200007a0 	.word	0x200007a0
 8001520:	20000828 	.word	0x20000828
 8001524:	200006b4 	.word	0x200006b4
 8001528:	200007e4 	.word	0x200007e4
 800152c:	0800957c 	.word	0x0800957c

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001568 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001536:	490e      	ldr	r1, [pc, #56]	; (8001570 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800154c:	4c0b      	ldr	r4, [pc, #44]	; (800157c <LoopFillZerobss+0x26>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800155a:	f7ff ff7f 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155e:	f007 fb37 	bl	8008bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff f973 	bl	800084c <main>
  bx  lr    
 8001566:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001568:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001574:	08009644 	.word	0x08009644
  ldr r2, =_sbss
 8001578:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800157c:	20002158 	.word	0x20002158

08001580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <HAL_Init+0x40>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_Init+0x40>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_Init+0x40>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 f94f 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fc96 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f967 	bl	80018ba <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001604:	f000 f92f 	bl	8001866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000008 	.word	0x20000008
 8001620:	20000010 	.word	0x20000010
 8001624:	2000000c 	.word	0x2000000c

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000010 	.word	0x20000010
 800164c:	2000086c 	.word	0x2000086c

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	2000086c 	.word	0x2000086c

08001668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_Delay+0x44>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffde 	bl	8001650 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f7      	bhi.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000010 	.word	0x20000010

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <__NVIC_EnableIRQ+0x38>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100

08001750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0a      	blt.n	800177a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	490c      	ldr	r1, [pc, #48]	; (800179c <__NVIC_SetPriority+0x4c>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	440b      	add	r3, r1
 8001774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001778:	e00a      	b.n	8001790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4908      	ldr	r1, [pc, #32]	; (80017a0 <__NVIC_SetPriority+0x50>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3b04      	subs	r3, #4
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	440b      	add	r3, r1
 800178e:	761a      	strb	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	2b04      	cmp	r3, #4
 80017c0:	bf28      	it	cs
 80017c2:	2304      	movcs	r3, #4
 80017c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3304      	adds	r3, #4
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d902      	bls.n	80017d4 <NVIC_EncodePriority+0x30>
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3b03      	subs	r3, #3
 80017d2:	e000      	b.n	80017d6 <NVIC_EncodePriority+0x32>
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43d9      	mvns	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	4313      	orrs	r3, r2
         );
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800181c:	d301      	bcc.n	8001822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181e:	2301      	movs	r3, #1
 8001820:	e00f      	b.n	8001842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <SysTick_Config+0x40>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182a:	210f      	movs	r1, #15
 800182c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001830:	f7ff ff8e 	bl	8001750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <SysTick_Config+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Config+0x40>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff29 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff3e 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff8e 	bl	80017a4 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5d 	bl	8001750 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff31 	bl	8001714 <__NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa2 	bl	800180c <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff feb6 	bl	8001650 <HAL_GetTick>
 80018e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2280      	movs	r2, #128	; 0x80
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e052      	b.n	80019aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0216 	bic.w	r2, r2, #22
 8001912:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001922:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d103      	bne.n	8001934 <HAL_DMA_Abort+0x62>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001930:	2b00      	cmp	r3, #0
 8001932:	d007      	beq.n	8001944 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0208 	bic.w	r2, r2, #8
 8001942:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001954:	e013      	b.n	800197e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001956:	f7ff fe7b 	bl	8001650 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b05      	cmp	r3, #5
 8001962:	d90c      	bls.n	800197e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2220      	movs	r2, #32
 8001968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e015      	b.n	80019aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e4      	bne.n	8001956 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	223f      	movs	r2, #63	; 0x3f
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e00c      	b.n	80019ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2205      	movs	r2, #5
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e165      	b.n	8001ce0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8154 	bne.w	8001cda <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d130      	bne.n	8001aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80ae 	beq.w	8001cda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b5d      	ldr	r3, [pc, #372]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a5c      	ldr	r2, [pc, #368]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b5a      	ldr	r3, [pc, #360]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9a:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_GPIO_Init+0x304>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4f      	ldr	r2, [pc, #316]	; (8001d00 <HAL_GPIO_Init+0x308>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d025      	beq.n	8001c12 <HAL_GPIO_Init+0x21a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4e      	ldr	r2, [pc, #312]	; (8001d04 <HAL_GPIO_Init+0x30c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01f      	beq.n	8001c0e <HAL_GPIO_Init+0x216>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4d      	ldr	r2, [pc, #308]	; (8001d08 <HAL_GPIO_Init+0x310>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d019      	beq.n	8001c0a <HAL_GPIO_Init+0x212>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4c      	ldr	r2, [pc, #304]	; (8001d0c <HAL_GPIO_Init+0x314>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d013      	beq.n	8001c06 <HAL_GPIO_Init+0x20e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <HAL_GPIO_Init+0x318>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00d      	beq.n	8001c02 <HAL_GPIO_Init+0x20a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_GPIO_Init+0x31c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d007      	beq.n	8001bfe <HAL_GPIO_Init+0x206>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a49      	ldr	r2, [pc, #292]	; (8001d18 <HAL_GPIO_Init+0x320>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_GPIO_Init+0x202>
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	e00c      	b.n	8001c14 <HAL_GPIO_Init+0x21c>
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	e00a      	b.n	8001c14 <HAL_GPIO_Init+0x21c>
 8001bfe:	2305      	movs	r3, #5
 8001c00:	e008      	b.n	8001c14 <HAL_GPIO_Init+0x21c>
 8001c02:	2304      	movs	r3, #4
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x21c>
 8001c06:	2303      	movs	r3, #3
 8001c08:	e004      	b.n	8001c14 <HAL_GPIO_Init+0x21c>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_Init+0x21c>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_GPIO_Init+0x21c>
 8001c12:	2300      	movs	r3, #0
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	f002 0203 	and.w	r2, r2, #3
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	4093      	lsls	r3, r2
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c24:	4935      	ldr	r1, [pc, #212]	; (8001cfc <HAL_GPIO_Init+0x304>)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c56:	4a31      	ldr	r2, [pc, #196]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c80:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd4:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b0f      	cmp	r3, #15
 8001ce4:	f67f ae96 	bls.w	8001a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40013800 	.word	0x40013800
 8001d00:	40020000 	.word	0x40020000
 8001d04:	40020400 	.word	0x40020400
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40021400 	.word	0x40021400
 8001d18:	40021800 	.word	0x40021800
 8001d1c:	40013c00 	.word	0x40013c00

08001d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e001      	b.n	8001d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	400b      	ands	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e12b      	b.n	8002022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff f8aa 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	; 0x24
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e1c:	f001 fcc0 	bl	80037a0 <HAL_RCC_GetPCLK1Freq>
 8001e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a81      	ldr	r2, [pc, #516]	; (800202c <HAL_I2C_Init+0x274>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d807      	bhi.n	8001e3c <HAL_I2C_Init+0x84>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a80      	ldr	r2, [pc, #512]	; (8002030 <HAL_I2C_Init+0x278>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	bf94      	ite	ls
 8001e34:	2301      	movls	r3, #1
 8001e36:	2300      	movhi	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e006      	b.n	8001e4a <HAL_I2C_Init+0x92>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4a7d      	ldr	r2, [pc, #500]	; (8002034 <HAL_I2C_Init+0x27c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	bf94      	ite	ls
 8001e44:	2301      	movls	r3, #1
 8001e46:	2300      	movhi	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0e7      	b.n	8002022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4a78      	ldr	r2, [pc, #480]	; (8002038 <HAL_I2C_Init+0x280>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9b      	lsrs	r3, r3, #18
 8001e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a6a      	ldr	r2, [pc, #424]	; (800202c <HAL_I2C_Init+0x274>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d802      	bhi.n	8001e8c <HAL_I2C_Init+0xd4>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	e009      	b.n	8001ea0 <HAL_I2C_Init+0xe8>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	4a69      	ldr	r2, [pc, #420]	; (800203c <HAL_I2C_Init+0x284>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	495c      	ldr	r1, [pc, #368]	; (800202c <HAL_I2C_Init+0x274>)
 8001ebc:	428b      	cmp	r3, r1
 8001ebe:	d819      	bhi.n	8001ef4 <HAL_I2C_Init+0x13c>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e59      	subs	r1, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ece:	1c59      	adds	r1, r3, #1
 8001ed0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_I2C_Init+0x138>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e59      	subs	r1, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eee:	e051      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e04f      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <HAL_I2C_Init+0x168>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	440b      	add	r3, r1
 8001f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e012      	b.n	8001f46 <HAL_I2C_Init+0x18e>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e58      	subs	r0, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	0099      	lsls	r1, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_Init+0x196>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e022      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10e      	bne.n	8001f74 <HAL_I2C_Init+0x1bc>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1e58      	subs	r0, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	440b      	add	r3, r1
 8001f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f72:	e00f      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e58      	subs	r0, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	0099      	lsls	r1, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6911      	ldr	r1, [r2, #16]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68d2      	ldr	r2, [r2, #12]
 8001fce:	4311      	orrs	r1, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	000186a0 	.word	0x000186a0
 8002030:	001e847f 	.word	0x001e847f
 8002034:	003d08ff 	.word	0x003d08ff
 8002038:	431bde83 	.word	0x431bde83
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002042:	b08f      	sub	sp, #60	; 0x3c
 8002044:	af0a      	add	r7, sp, #40	; 0x28
 8002046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e116      	b.n	8002280 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d106      	bne.n	8002072 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f006 fa3f 	bl	80084f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2203      	movs	r2, #3
 8002076:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f003 f8f8 	bl	8005286 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	687e      	ldr	r6, [r7, #4]
 800209e:	466d      	mov	r5, sp
 80020a0:	f106 0410 	add.w	r4, r6, #16
 80020a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80020b4:	1d33      	adds	r3, r6, #4
 80020b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b8:	6838      	ldr	r0, [r7, #0]
 80020ba:	f002 ffcf 	bl	800505c <USB_CoreInit>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0d7      	b.n	8002280 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 f8e6 	bl	80052a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e04a      	b.n	8002178 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	333d      	adds	r3, #61	; 0x3d
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	333c      	adds	r3, #60	; 0x3c
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	b298      	uxth	r0, r3
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3342      	adds	r3, #66	; 0x42
 800211e:	4602      	mov	r2, r0
 8002120:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	333f      	adds	r3, #63	; 0x3f
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	3344      	adds	r3, #68	; 0x44
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3348      	adds	r3, #72	; 0x48
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3350      	adds	r3, #80	; 0x50
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	3301      	adds	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3af      	bcc.n	80020e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
 8002186:	e044      	b.n	8002212 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	3301      	adds	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d3b5      	bcc.n	8002188 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	687e      	ldr	r6, [r7, #4]
 8002224:	466d      	mov	r5, sp
 8002226:	f106 0410 	add.w	r4, r6, #16
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002236:	e885 0003 	stmia.w	r5, {r0, r1}
 800223a:	1d33      	adds	r3, r6, #4
 800223c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223e:	6838      	ldr	r0, [r7, #0]
 8002240:	f003 f87e 	bl	8005340 <USB_DevInit>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e014      	b.n	8002280 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f001 f892 	bl	8003398 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f004 f8ed 	bl	8006458 <USB_DevDisconnect>

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002288 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_PCD_Start+0x1c>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e020      	b.n	80022e6 <HAL_PCD_Start+0x5e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d109      	bne.n	80022c8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d005      	beq.n	80022c8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 ffc9 	bl	8005264 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 f89d 	bl	8006416 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b08d      	sub	sp, #52	; 0x34
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f004 f95b 	bl	80065c0 <USB_GetMode>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	f040 83ca 	bne.w	8002aa6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f004 f8bf 	bl	800649a <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 83c0 	beq.w	8002aa4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f004 f8b6 	bl	800649a <USB_ReadInterrupts>
 800232e:	4603      	mov	r3, r0
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	d107      	bne.n	8002348 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f002 0202 	and.w	r2, r2, #2
 8002346:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f004 f8a4 	bl	800649a <USB_ReadInterrupts>
 8002352:	4603      	mov	r3, r0
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b10      	cmp	r3, #16
 800235a:	d161      	bne.n	8002420 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0210 	bic.w	r2, r2, #16
 800236a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	0c5b      	lsrs	r3, r3, #17
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	2b02      	cmp	r3, #2
 8002396:	d124      	bne.n	80023e2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d035      	beq.n	8002410 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	6a38      	ldr	r0, [r7, #32]
 80023b8:	f003 fedb 	bl	8006172 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c8:	441a      	add	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023da:	441a      	add	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	619a      	str	r2, [r3, #24]
 80023e0:	e016      	b.n	8002410 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	0c5b      	lsrs	r3, r3, #17
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d110      	bne.n	8002410 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023f4:	2208      	movs	r2, #8
 80023f6:	4619      	mov	r1, r3
 80023f8:	6a38      	ldr	r0, [r7, #32]
 80023fa:	f003 feba 	bl	8006172 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800240a:	441a      	add	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0210 	orr.w	r2, r2, #16
 800241e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f004 f838 	bl	800649a <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002430:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002434:	d16e      	bne.n	8002514 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f004 f83e 	bl	80064c0 <USB_ReadDevAllOutEpInterrupt>
 8002444:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002446:	e062      	b.n	800250e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d057      	beq.n	8002502 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f004 f863 	bl	8006528 <USB_ReadDevOutEPInterrupt>
 8002462:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00c      	beq.n	8002488 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247a:	461a      	mov	r2, r3
 800247c:	2301      	movs	r3, #1
 800247e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fdde 	bl	8003044 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249e:	461a      	mov	r2, r3
 80024a0:	2308      	movs	r3, #8
 80024a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fed8 	bl	800325c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c2:	461a      	mov	r2, r3
 80024c4:	2310      	movs	r3, #16
 80024c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024de:	461a      	mov	r2, r3
 80024e0:	2320      	movs	r3, #32
 80024e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fa:	461a      	mov	r2, r3
 80024fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002500:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	3301      	adds	r3, #1
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d199      	bne.n	8002448 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f003 ffbe 	bl	800649a <USB_ReadInterrupts>
 800251e:	4603      	mov	r3, r0
 8002520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002524:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002528:	f040 80c0 	bne.w	80026ac <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f003 ffdf 	bl	80064f4 <USB_ReadDevAllInEpInterrupt>
 8002536:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800253c:	e0b2      	b.n	80026a4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80a7 	beq.w	8002698 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f004 f805 	bl	8006564 <USB_ReadDevInEPInterrupt>
 800255a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d057      	beq.n	8002616 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	2201      	movs	r2, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43db      	mvns	r3, r3
 8002580:	69f9      	ldr	r1, [r7, #28]
 8002582:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002586:	4013      	ands	r3, r2
 8002588:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002596:	461a      	mov	r2, r3
 8002598:	2301      	movs	r3, #1
 800259a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d132      	bne.n	800260a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3348      	adds	r3, #72	; 0x48
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4403      	add	r3, r0
 80025c4:	3344      	adds	r3, #68	; 0x44
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4419      	add	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4403      	add	r3, r0
 80025d8:	3348      	adds	r3, #72	; 0x48
 80025da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d113      	bne.n	800260a <HAL_PCD_IRQHandler+0x31c>
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	3350      	adds	r3, #80	; 0x50
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d108      	bne.n	800260a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002602:	461a      	mov	r2, r3
 8002604:	2101      	movs	r1, #1
 8002606:	f004 f80d 	bl	8006624 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f005 fffc 	bl	800860e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262c:	461a      	mov	r2, r3
 800262e:	2308      	movs	r3, #8
 8002630:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	4413      	add	r3, r2
 8002644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002648:	461a      	mov	r2, r3
 800264a:	2310      	movs	r3, #16
 800264c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	4413      	add	r3, r2
 8002660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002664:	461a      	mov	r2, r3
 8002666:	2340      	movs	r3, #64	; 0x40
 8002668:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002680:	461a      	mov	r2, r3
 8002682:	2302      	movs	r3, #2
 8002684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fc48 	bl	8002f28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	3301      	adds	r3, #1
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f47f af49 	bne.w	800253e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 fef2 	bl	800649a <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026c0:	d122      	bne.n	8002708 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d108      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026e8:	2100      	movs	r1, #0
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f006 f9d8 	bl	8008aa0 <HAL_PCDEx_LPM_Callback>
 80026f0:	e002      	b.n	80026f8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f005 fff8 	bl	80086e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fec4 	bl	800649a <USB_ReadInterrupts>
 8002712:	4603      	mov	r3, r0
 8002714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800271c:	d112      	bne.n	8002744 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f005 ffb4 	bl	800869c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002742:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f003 fea6 	bl	800649a <USB_ReadInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002758:	d121      	bne.n	800279e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002768:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d111      	bne.n	8002798 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800278e:	2101      	movs	r1, #1
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f006 f985 	bl	8008aa0 <HAL_PCDEx_LPM_Callback>
 8002796:	e002      	b.n	800279e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f005 ff7f 	bl	800869c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fe79 	bl	800649a <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b2:	f040 80c7 	bne.w	8002944 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2110      	movs	r1, #16
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 ff13 	bl	80055fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027da:	e056      	b.n	800288a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e8:	461a      	mov	r2, r3
 80027ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	440a      	add	r2, r1
 8002806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800280a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800280e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	4413      	add	r3, r2
 8002818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002820:	0151      	lsls	r1, r2, #5
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	440a      	add	r2, r1
 8002826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800282a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800282e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283c:	461a      	mov	r2, r3
 800283e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002842:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002854:	0151      	lsls	r1, r2, #5
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	440a      	add	r2, r1
 800285a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800285e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002862:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002874:	0151      	lsls	r1, r2, #5
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	440a      	add	r2, r1
 800287a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800287e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002882:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	3301      	adds	r3, #1
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002890:	429a      	cmp	r2, r3
 8002892:	d3a3      	bcc.n	80027dc <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d016      	beq.n	80028de <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c0:	f043 030b 	orr.w	r3, r3, #11
 80028c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d6:	f043 030b 	orr.w	r3, r3, #11
 80028da:	6453      	str	r3, [r2, #68]	; 0x44
 80028dc:	e015      	b.n	800290a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028f0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028f4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002904:	f043 030b 	orr.w	r3, r3, #11
 8002908:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002918:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800291c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800292e:	461a      	mov	r2, r3
 8002930:	f003 fe78 	bl	8006624 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f003 fda6 	bl	800649a <USB_ReadInterrupts>
 800294e:	4603      	mov	r3, r0
 8002950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002958:	d124      	bne.n	80029a4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f003 fe3c 	bl	80065dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f002 fea4 	bl	80056b6 <USB_GetDevSpeed>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681c      	ldr	r4, [r3, #0]
 800297a:	f000 ff05 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 800297e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	4620      	mov	r0, r4
 800298a:	f002 fbc9 	bl	8005120 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f005 fe65 	bl	800865e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 fd76 	bl	800649a <USB_ReadInterrupts>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d10a      	bne.n	80029ce <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f005 fe42 	bl	8008642 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f002 0208 	and.w	r2, r2, #8
 80029cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 fd61 	bl	800649a <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029e2:	d10f      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f005 fe9a 	bl	8008728 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 fd46 	bl	800649a <USB_ReadInterrupts>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a18:	d10f      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f005 fe6d 	bl	8008704 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 fd2b 	bl	800649a <USB_ReadInterrupts>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4e:	d10a      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f005 fe7b 	bl	800874c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fd15 	bl	800649a <USB_ReadInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d115      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f005 fe6b 	bl	8008768 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	e000      	b.n	8002aa6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002aa4:	bf00      	nop
    }
  }
}
 8002aa6:	3734      	adds	r7, #52	; 0x34
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd90      	pop	{r4, r7, pc}

08002aac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_PCD_SetAddress+0x1a>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e013      	b.n	8002aee <HAL_PCD_SetAddress+0x42>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f003 fc73 	bl	80063ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	4608      	mov	r0, r1
 8002b00:	4611      	mov	r1, r2
 8002b02:	461a      	mov	r2, r3
 8002b04:	4603      	mov	r3, r0
 8002b06:	70fb      	strb	r3, [r7, #3]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	803b      	strh	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da0f      	bge.n	8002b3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 020f 	and.w	r2, r3, #15
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3338      	adds	r3, #56	; 0x38
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	3304      	adds	r3, #4
 8002b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	705a      	strb	r2, [r3, #1]
 8002b3a:	e00f      	b.n	8002b5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	3304      	adds	r3, #4
 8002b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b68:	883a      	ldrh	r2, [r7, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	78ba      	ldrb	r2, [r7, #2]
 8002b72:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b86:	78bb      	ldrb	r3, [r7, #2]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d102      	bne.n	8002b92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_PCD_EP_Open+0xaa>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e00e      	b.n	8002bbe <HAL_PCD_EP_Open+0xc8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fda6 	bl	8005700 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002bbc:	7afb      	ldrb	r3, [r7, #11]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da0f      	bge.n	8002bfa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	3338      	adds	r3, #56	; 0x38
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	705a      	strb	r2, [r3, #1]
 8002bf8:	e00f      	b.n	8002c1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	f003 020f 	and.w	r2, r3, #15
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	3304      	adds	r3, #4
 8002c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_PCD_EP_Close+0x6e>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e00e      	b.n	8002c52 <HAL_PCD_EP_Close+0x8c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68f9      	ldr	r1, [r7, #12]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 fde4 	bl	8005810 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	460b      	mov	r3, r1
 8002c68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4413      	add	r3, r2
 8002c80:	3304      	adds	r3, #4
 8002c82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c9c:	7afb      	ldrb	r3, [r7, #11]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d102      	bne.n	8002cb6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	6979      	ldr	r1, [r7, #20]
 8002cce:	f003 f8bf 	bl	8005e50 <USB_EP0StartXfer>
 8002cd2:	e008      	b.n	8002ce6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	6979      	ldr	r1, [r7, #20]
 8002ce2:	f002 fe71 	bl	80059c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	f003 020f 	and.w	r2, r3, #15
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	3338      	adds	r3, #56	; 0x38
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2200      	movs	r2, #0
 8002d58:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d60:	7afb      	ldrb	r3, [r7, #11]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d102      	bne.n	8002d7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	6979      	ldr	r1, [r7, #20]
 8002d92:	f003 f85d 	bl	8005e50 <USB_EP0StartXfer>
 8002d96:	e008      	b.n	8002daa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	6979      	ldr	r1, [r7, #20]
 8002da6:	f002 fe0f 	bl	80059c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d901      	bls.n	8002dd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e050      	b.n	8002e74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da0f      	bge.n	8002dfa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3338      	adds	r3, #56	; 0x38
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3304      	adds	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	705a      	strb	r2, [r3, #1]
 8002df8:	e00d      	b.n	8002e16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_PCD_EP_SetStall+0x82>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e01e      	b.n	8002e74 <HAL_PCD_EP_SetStall+0xc0>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 f9ec 	bl	8006222 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	b2d9      	uxtb	r1, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e64:	461a      	mov	r2, r3
 8002e66:	f003 fbdd 	bl	8006624 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	f003 020f 	and.w	r2, r3, #15
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d901      	bls.n	8002e9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e042      	b.n	8002f20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	da0f      	bge.n	8002ec2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	3338      	adds	r3, #56	; 0x38
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	705a      	strb	r2, [r3, #1]
 8002ec0:	e00f      	b.n	8002ee2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 020f 	and.w	r2, r3, #15
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3304      	adds	r3, #4
 8002eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_PCD_EP_ClrStall+0x86>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e00e      	b.n	8002f20 <HAL_PCD_EP_ClrStall+0xa4>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68f9      	ldr	r1, [r7, #12]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 f9f4 	bl	80062fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	3338      	adds	r3, #56	; 0x38
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d901      	bls.n	8002f60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e06c      	b.n	800303a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d902      	bls.n	8002f7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	3303      	adds	r3, #3
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f84:	e02b      	b.n	8002fde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d902      	bls.n	8002fa2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3303      	adds	r3, #3
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68d9      	ldr	r1, [r3, #12]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6978      	ldr	r0, [r7, #20]
 8002fc2:	f003 f898 	bl	80060f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	441a      	add	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	441a      	add	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d809      	bhi.n	8003008 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	699a      	ldr	r2, [r3, #24]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d203      	bcs.n	8003008 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1be      	bne.n	8002f86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	429a      	cmp	r2, r3
 8003012:	d811      	bhi.n	8003038 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	2201      	movs	r2, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	43db      	mvns	r3, r3
 800302e:	6939      	ldr	r1, [r7, #16]
 8003030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003034:	4013      	ands	r3, r2
 8003036:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	333c      	adds	r3, #60	; 0x3c
 800305c:	3304      	adds	r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b01      	cmp	r3, #1
 8003078:	f040 80a0 	bne.w	80031bc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d015      	beq.n	80030b2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a72      	ldr	r2, [pc, #456]	; (8003254 <PCD_EP_OutXfrComplete_int+0x210>)
 800308a:	4293      	cmp	r3, r2
 800308c:	f240 80dd 	bls.w	800324a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80d7 	beq.w	800324a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a8:	461a      	mov	r2, r3
 80030aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ae:	6093      	str	r3, [r2, #8]
 80030b0:	e0cb      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	2320      	movs	r3, #32
 80030cc:	6093      	str	r3, [r2, #8]
 80030ce:	e0bc      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 80b7 	bne.w	800324a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a5d      	ldr	r2, [pc, #372]	; (8003254 <PCD_EP_OutXfrComplete_int+0x210>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d90f      	bls.n	8003104 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	461a      	mov	r2, r3
 80030fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003100:	6093      	str	r3, [r2, #8]
 8003102:	e0a2      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003116:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	0159      	lsls	r1, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	440b      	add	r3, r1
 8003120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800312a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4403      	add	r3, r0
 800313a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800313e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4403      	add	r3, r0
 8003162:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4419      	add	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4403      	add	r3, r0
 8003178:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800317c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d114      	bne.n	80031ae <PCD_EP_OutXfrComplete_int+0x16a>
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d108      	bne.n	80031ae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031a6:	461a      	mov	r2, r3
 80031a8:	2101      	movs	r1, #1
 80031aa:	f003 fa3b 	bl	8006624 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f005 fa0f 	bl	80085d8 <HAL_PCD_DataOutStageCallback>
 80031ba:	e046      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a26      	ldr	r2, [pc, #152]	; (8003258 <PCD_EP_OutXfrComplete_int+0x214>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d124      	bne.n	800320e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031da:	461a      	mov	r2, r3
 80031dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e0:	6093      	str	r3, [r2, #8]
 80031e2:	e032      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fa:	461a      	mov	r2, r3
 80031fc:	2320      	movs	r3, #32
 80031fe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f005 f9e6 	bl	80085d8 <HAL_PCD_DataOutStageCallback>
 800320c:	e01d      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d114      	bne.n	800323e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d108      	bne.n	800323e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003236:	461a      	mov	r2, r3
 8003238:	2100      	movs	r1, #0
 800323a:	f003 f9f3 	bl	8006624 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	4619      	mov	r1, r3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f005 f9c7 	bl	80085d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	4f54300a 	.word	0x4f54300a
 8003258:	4f54310a 	.word	0x4f54310a

0800325c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	333c      	adds	r3, #60	; 0x3c
 8003274:	3304      	adds	r3, #4
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d90e      	bls.n	80032b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a8:	461a      	mov	r2, r3
 80032aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f005 f97f 	bl	80085b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d90c      	bls.n	80032d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032d0:	461a      	mov	r2, r3
 80032d2:	2101      	movs	r1, #1
 80032d4:	f003 f9a6 	bl	8006624 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	4f54300a 	.word	0x4f54300a

080032e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	70fb      	strb	r3, [r7, #3]
 80032f4:	4613      	mov	r3, r2
 80032f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003306:	883b      	ldrh	r3, [r7, #0]
 8003308:	0419      	lsls	r1, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	430a      	orrs	r2, r1
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
 8003314:	e028      	b.n	8003368 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	4413      	add	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	e00d      	b.n	8003346 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	3340      	adds	r3, #64	; 0x40
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4413      	add	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	3301      	adds	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	3b01      	subs	r3, #1
 800334c:	429a      	cmp	r2, r3
 800334e:	d3ec      	bcc.n	800332a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003350:	883b      	ldrh	r3, [r7, #0]
 8003352:	0418      	lsls	r0, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	3b01      	subs	r3, #1
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	4302      	orrs	r2, r0
 8003360:	3340      	adds	r3, #64	; 0x40
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ca:	f043 0303 	orr.w	r3, r3, #3
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0cc      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b68      	ldr	r3, [pc, #416]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d90c      	bls.n	800341c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b65      	ldr	r3, [pc, #404]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0b8      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003434:	4b59      	ldr	r3, [pc, #356]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a58      	ldr	r2, [pc, #352]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800343e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800344c:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a52      	ldr	r2, [pc, #328]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b50      	ldr	r3, [pc, #320]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	494d      	ldr	r1, [pc, #308]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d044      	beq.n	8003500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d119      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d003      	beq.n	800349e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349a:	2b03      	cmp	r3, #3
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349e:	4b3f      	ldr	r3, [pc, #252]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e06f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ae:	4b3b      	ldr	r3, [pc, #236]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e067      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f023 0203 	bic.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4934      	ldr	r1, [pc, #208]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d0:	f7fe f8be 	bl	8001650 <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d8:	f7fe f8ba 	bl	8001650 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e04f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 020c 	and.w	r2, r3, #12
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d1eb      	bne.n	80034d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003500:	4b25      	ldr	r3, [pc, #148]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d20c      	bcs.n	8003528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b22      	ldr	r3, [pc, #136]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e032      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4916      	ldr	r1, [pc, #88]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	490e      	ldr	r1, [pc, #56]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003566:	f000 f82d 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 800356a:	4602      	mov	r2, r0
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	490a      	ldr	r1, [pc, #40]	; (80035a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	5ccb      	ldrb	r3, [r1, r3]
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe f81e 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023c00 	.word	0x40023c00
 800359c:	40023800 	.word	0x40023800
 80035a0:	080095e8 	.word	0x080095e8
 80035a4:	20000008 	.word	0x20000008
 80035a8:	2000000c 	.word	0x2000000c

080035ac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_RCC_EnableCSS+0x14>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	4247004c 	.word	0x4247004c

080035c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	2300      	movs	r3, #0
 80035d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035dc:	4b67      	ldr	r3, [pc, #412]	; (800377c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d00d      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x40>
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	f200 80bd 	bhi.w	8003768 <HAL_RCC_GetSysClockFreq+0x1a4>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x34>
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x3a>
 80035f6:	e0b7      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b61      	ldr	r3, [pc, #388]	; (8003780 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035fa:	60bb      	str	r3, [r7, #8]
       break;
 80035fc:	e0b7      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035fe:	4b61      	ldr	r3, [pc, #388]	; (8003784 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003600:	60bb      	str	r3, [r7, #8]
      break;
 8003602:	e0b4      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003604:	4b5d      	ldr	r3, [pc, #372]	; (800377c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800360c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800360e:	4b5b      	ldr	r3, [pc, #364]	; (800377c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d04d      	beq.n	80036b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361a:	4b58      	ldr	r3, [pc, #352]	; (800377c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	099b      	lsrs	r3, r3, #6
 8003620:	461a      	mov	r2, r3
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	f240 10ff 	movw	r0, #511	; 0x1ff
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	ea02 0800 	and.w	r8, r2, r0
 8003632:	ea03 0901 	and.w	r9, r3, r1
 8003636:	4640      	mov	r0, r8
 8003638:	4649      	mov	r1, r9
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	014b      	lsls	r3, r1, #5
 8003644:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003648:	0142      	lsls	r2, r0, #5
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	ebb0 0008 	subs.w	r0, r0, r8
 8003652:	eb61 0109 	sbc.w	r1, r1, r9
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	018b      	lsls	r3, r1, #6
 8003660:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003664:	0182      	lsls	r2, r0, #6
 8003666:	1a12      	subs	r2, r2, r0
 8003668:	eb63 0301 	sbc.w	r3, r3, r1
 800366c:	f04f 0000 	mov.w	r0, #0
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	00d9      	lsls	r1, r3, #3
 8003676:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800367a:	00d0      	lsls	r0, r2, #3
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	eb12 0208 	adds.w	r2, r2, r8
 8003684:	eb43 0309 	adc.w	r3, r3, r9
 8003688:	f04f 0000 	mov.w	r0, #0
 800368c:	f04f 0100 	mov.w	r1, #0
 8003690:	0259      	lsls	r1, r3, #9
 8003692:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003696:	0250      	lsls	r0, r2, #9
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	461a      	mov	r2, r3
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	f7fc fe0a 	bl	80002c0 <__aeabi_uldivmod>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4613      	mov	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e04a      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b6:	4b31      	ldr	r3, [pc, #196]	; (800377c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	099b      	lsrs	r3, r3, #6
 80036bc:	461a      	mov	r2, r3
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036c6:	f04f 0100 	mov.w	r1, #0
 80036ca:	ea02 0400 	and.w	r4, r2, r0
 80036ce:	ea03 0501 	and.w	r5, r3, r1
 80036d2:	4620      	mov	r0, r4
 80036d4:	4629      	mov	r1, r5
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	014b      	lsls	r3, r1, #5
 80036e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036e4:	0142      	lsls	r2, r0, #5
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	1b00      	subs	r0, r0, r4
 80036ec:	eb61 0105 	sbc.w	r1, r1, r5
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	018b      	lsls	r3, r1, #6
 80036fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036fe:	0182      	lsls	r2, r0, #6
 8003700:	1a12      	subs	r2, r2, r0
 8003702:	eb63 0301 	sbc.w	r3, r3, r1
 8003706:	f04f 0000 	mov.w	r0, #0
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	00d9      	lsls	r1, r3, #3
 8003710:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003714:	00d0      	lsls	r0, r2, #3
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	1912      	adds	r2, r2, r4
 800371c:	eb45 0303 	adc.w	r3, r5, r3
 8003720:	f04f 0000 	mov.w	r0, #0
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	0299      	lsls	r1, r3, #10
 800372a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800372e:	0290      	lsls	r0, r2, #10
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	461a      	mov	r2, r3
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	f7fc fdbe 	bl	80002c0 <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4613      	mov	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	3301      	adds	r3, #1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	60bb      	str	r3, [r7, #8]
      break;
 8003766:	e002      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800376a:	60bb      	str	r3, [r7, #8]
      break;
 800376c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376e:	68bb      	ldr	r3, [r7, #8]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	00f42400 	.word	0x00f42400
 8003784:	007a1200 	.word	0x007a1200

08003788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_RCC_GetHCLKFreq+0x14>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000008 	.word	0x20000008

080037a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037a4:	f7ff fff0 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	0a9b      	lsrs	r3, r3, #10
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40023800 	.word	0x40023800
 80037c4:	080095f8 	.word	0x080095f8

080037c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037cc:	f7ff ffdc 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	0b5b      	lsrs	r3, r3, #13
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	4903      	ldr	r1, [pc, #12]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80037de:	5ccb      	ldrb	r3, [r1, r3]
 80037e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40023800 	.word	0x40023800
 80037ec:	080095f8 	.word	0x080095f8

080037f0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_NMI_IRQHandler+0x20>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d104      	bne.n	800380a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003800:	f000 f80a 	bl	8003818 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003806:	2280      	movs	r2, #128	; 0x80
 8003808:	701a      	strb	r2, [r3, #0]
  }
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800
 8003814:	4002380e 	.word	0x4002380e

08003818 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003848:	4b87      	ldr	r3, [pc, #540]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800384a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800384e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	4984      	ldr	r1, [pc, #528]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8003866:	2301      	movs	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d010      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003876:	4b7c      	ldr	r3, [pc, #496]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800387c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	4978      	ldr	r1, [pc, #480]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8003894:	2301      	movs	r3, #1
 8003896:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8083 	beq.w	80039ac <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a6e      	ldr	r2, [pc, #440]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	; 0x40
 80038b6:	4b6c      	ldr	r3, [pc, #432]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038c2:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a69      	ldr	r2, [pc, #420]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038ce:	f7fd febf 	bl	8001650 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fd febb 	bl	8001650 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e162      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038e8:	4b60      	ldr	r3, [pc, #384]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f4:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d02f      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	429a      	cmp	r2, r3
 8003910:	d028      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003912:	4b55      	ldr	r3, [pc, #340]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800391c:	4b54      	ldr	r3, [pc, #336]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003922:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003928:	4a4f      	ldr	r2, [pc, #316]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800392e:	4b4e      	ldr	r3, [pc, #312]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d114      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800393a:	f7fd fe89 	bl	8001650 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003940:	e00a      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fd fe85 	bl	8001650 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e12a      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003958:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0ee      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003970:	d10d      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003972:	4b3d      	ldr	r3, [pc, #244]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003986:	4938      	ldr	r1, [pc, #224]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]
 800398c:	e005      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800398e:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	4a35      	ldr	r2, [pc, #212]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003994:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003998:	6093      	str	r3, [r2, #8]
 800399a:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800399c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a6:	4930      	ldr	r1, [pc, #192]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80039be:	4b2d      	ldr	r3, [pc, #180]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039c0:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80039ce:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	4922      	ldr	r1, [pc, #136]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d011      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	491a      	ldr	r1, [pc, #104]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8003a10:	2301      	movs	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	490e      	ldr	r1, [pc, #56]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d004      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b80      	cmp	r3, #128	; 0x80
 8003a42:	f040 8091 	bne.w	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fe00 	bl	8001650 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a52:	e013      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a54:	f7fd fdfc 	bl	8001650 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d90c      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e0a3      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	42470e40 	.word	0x42470e40
 8003a74:	424711e0 	.word	0x424711e0
 8003a78:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a7c:	4b4e      	ldr	r3, [pc, #312]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8003a88:	4a4c      	ldr	r2, [pc, #304]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d023      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d019      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d004      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003acc:	d00e      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d019      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d115      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aea:	d110      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	019b      	lsls	r3, r3, #6
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	071b      	lsls	r3, r3, #28
 8003b06:	492c      	ldr	r1, [pc, #176]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d010      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	019b      	lsls	r3, r3, #6
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	071b      	lsls	r3, r3, #28
 8003b34:	4920      	ldr	r1, [pc, #128]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b3c:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b42:	f7fd fd85 	bl	8001650 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b4a:	f7fd fd81 	bl	8001650 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e028      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b5c:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	490d      	ldr	r1, [pc, #52]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	4904      	ldr	r1, [pc, #16]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	424710d8 	.word	0x424710d8
 8003bc0:	42470068 	.word	0x42470068

08003bc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e270      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d075      	beq.n	8003cce <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003be2:	4ba3      	ldr	r3, [pc, #652]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d00c      	beq.n	8003c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bee:	4ba0      	ldr	r3, [pc, #640]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d112      	bne.n	8003c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4b9d      	ldr	r3, [pc, #628]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c06:	d10b      	bne.n	8003c20 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c08:	4b99      	ldr	r3, [pc, #612]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d05b      	beq.n	8003ccc <HAL_RCC_OscConfig+0x108>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d157      	bne.n	8003ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e24b      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c28:	d106      	bne.n	8003c38 <HAL_RCC_OscConfig+0x74>
 8003c2a:	4b91      	ldr	r3, [pc, #580]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a90      	ldr	r2, [pc, #576]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e01d      	b.n	8003c74 <HAL_RCC_OscConfig+0xb0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x98>
 8003c42:	4b8b      	ldr	r3, [pc, #556]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a8a      	ldr	r2, [pc, #552]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	4b88      	ldr	r3, [pc, #544]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a87      	ldr	r2, [pc, #540]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0xb0>
 8003c5c:	4b84      	ldr	r3, [pc, #528]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a83      	ldr	r2, [pc, #524]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b81      	ldr	r3, [pc, #516]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a80      	ldr	r2, [pc, #512]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd fce8 	bl	8001650 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fd fce4 	bl	8001650 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e210      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0xc0>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fd fcd4 	bl	8001650 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fd fcd0 	bl	8001650 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1fc      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0xe8>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d063      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cda:	4b65      	ldr	r3, [pc, #404]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b62      	ldr	r3, [pc, #392]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d11c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b5f      	ldr	r3, [pc, #380]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	4b5c      	ldr	r3, [pc, #368]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x152>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1d0      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b56      	ldr	r3, [pc, #344]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4952      	ldr	r1, [pc, #328]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	e03a      	b.n	8003da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d34:	4b4f      	ldr	r3, [pc, #316]	; (8003e74 <HAL_RCC_OscConfig+0x2b0>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fc89 	bl	8001650 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fd fc85 	bl	8001650 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1b1      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4940      	ldr	r1, [pc, #256]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
 8003d74:	e015      	b.n	8003da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b3f      	ldr	r3, [pc, #252]	; (8003e74 <HAL_RCC_OscConfig+0x2b0>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fd fc68 	bl	8001650 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d84:	f7fd fc64 	bl	8001650 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e190      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d030      	beq.n	8003e10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db6:	4b30      	ldr	r3, [pc, #192]	; (8003e78 <HAL_RCC_OscConfig+0x2b4>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fd fc48 	bl	8001650 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fd fc44 	bl	8001650 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e170      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x200>
 8003de2:	e015      	b.n	8003e10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de4:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCC_OscConfig+0x2b4>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fd fc31 	bl	8001650 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fd fc2d 	bl	8001650 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e159      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a0 	beq.w	8003f5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a0e      	ldr	r2, [pc, #56]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCC_OscConfig+0x2b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d121      	bne.n	8003e9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_RCC_OscConfig+0x2b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <HAL_RCC_OscConfig+0x2b8>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e66:	f7fd fbf3 	bl	8001650 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	e011      	b.n	8003e92 <HAL_RCC_OscConfig+0x2ce>
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	42470000 	.word	0x42470000
 8003e78:	42470e80 	.word	0x42470e80
 8003e7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e80:	f7fd fbe6 	bl	8001650 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e112      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e92:	4b8b      	ldr	r3, [pc, #556]	; (80040c0 <HAL_RCC_OscConfig+0x4fc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d106      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x2f0>
 8003ea6:	4b87      	ldr	r3, [pc, #540]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a86      	ldr	r2, [pc, #536]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	e01c      	b.n	8003eee <HAL_RCC_OscConfig+0x32a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d10c      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x312>
 8003ebc:	4b81      	ldr	r3, [pc, #516]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a80      	ldr	r2, [pc, #512]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003ec2:	f043 0304 	orr.w	r3, r3, #4
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	4b7e      	ldr	r3, [pc, #504]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a7d      	ldr	r2, [pc, #500]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	e00b      	b.n	8003eee <HAL_RCC_OscConfig+0x32a>
 8003ed6:	4b7b      	ldr	r3, [pc, #492]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a7a      	ldr	r2, [pc, #488]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee2:	4b78      	ldr	r3, [pc, #480]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a77      	ldr	r2, [pc, #476]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003ee8:	f023 0304 	bic.w	r3, r3, #4
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d015      	beq.n	8003f22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fd fbab 	bl	8001650 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fd fba7 	bl	8001650 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0d1      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	4b6b      	ldr	r3, [pc, #428]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ee      	beq.n	8003efe <HAL_RCC_OscConfig+0x33a>
 8003f20:	e014      	b.n	8003f4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fd fb95 	bl	8001650 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fd fb91 	bl	8001650 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0bb      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f40:	4b60      	ldr	r3, [pc, #384]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ee      	bne.n	8003f2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d105      	bne.n	8003f5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f52:	4b5c      	ldr	r3, [pc, #368]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4a5b      	ldr	r2, [pc, #364]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80a7 	beq.w	80040b6 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f68:	4b56      	ldr	r3, [pc, #344]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d060      	beq.n	8004036 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d145      	bne.n	8004008 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b52      	ldr	r3, [pc, #328]	; (80040c8 <HAL_RCC_OscConfig+0x504>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fd fb65 	bl	8001650 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fd fb61 	bl	8001650 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e08d      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9c:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	019b      	lsls	r3, r3, #6
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	061b      	lsls	r3, r3, #24
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	071b      	lsls	r3, r3, #28
 8003fd4:	493b      	ldr	r1, [pc, #236]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fda:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fb36 	bl	8001650 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fd fb32 	bl	8001650 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e05e      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffa:	4b32      	ldr	r3, [pc, #200]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x424>
 8004006:	e056      	b.n	80040b6 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004008:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <HAL_RCC_OscConfig+0x504>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fd fb1f 	bl	8001650 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004016:	f7fd fb1b 	bl	8001650 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e047      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004028:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x452>
 8004034:	e03f      	b.n	80040b6 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e03a      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004042:	4b20      	ldr	r3, [pc, #128]	; (80040c4 <HAL_RCC_OscConfig+0x500>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d030      	beq.n	80040b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d129      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d122      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004072:	4013      	ands	r3, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004078:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800407a:	4293      	cmp	r3, r2
 800407c:	d119      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	3b01      	subs	r3, #1
 800408c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d10f      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40007000 	.word	0x40007000
 80040c4:	40023800 	.word	0x40023800
 80040c8:	42470060 	.word	0x42470060

080040cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e03f      	b.n	800415e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fc fff6 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2224      	movs	r2, #36	; 0x24
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800410e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fddb 	bl	8004ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b08a      	sub	sp, #40	; 0x28
 800416a:	af02      	add	r7, sp, #8
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b20      	cmp	r3, #32
 8004184:	d17c      	bne.n	8004280 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_UART_Transmit+0x2c>
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e075      	b.n	8004282 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_UART_Transmit+0x3e>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e06e      	b.n	8004282 <HAL_UART_Transmit+0x11c>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2221      	movs	r2, #33	; 0x21
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ba:	f7fd fa49 	bl	8001650 <HAL_GetTick>
 80041be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	88fa      	ldrh	r2, [r7, #6]
 80041ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d4:	d108      	bne.n	80041e8 <HAL_UART_Transmit+0x82>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d104      	bne.n	80041e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	e003      	b.n	80041f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041f8:	e02a      	b.n	8004250 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2200      	movs	r2, #0
 8004202:	2180      	movs	r1, #128	; 0x80
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fb1f 	bl	8004848 <UART_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e036      	b.n	8004282 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004228:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	3302      	adds	r3, #2
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	e007      	b.n	8004242 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	3301      	adds	r3, #1
 8004240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1cf      	bne.n	80041fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2200      	movs	r2, #0
 8004262:	2140      	movs	r1, #64	; 0x40
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 faef 	bl	8004848 <UART_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e006      	b.n	8004282 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	e000      	b.n	8004282 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
  }
}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	4613      	mov	r3, r2
 8004296:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d11d      	bne.n	80042e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_UART_Receive_IT+0x26>
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e016      	b.n	80042e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_UART_Receive_IT+0x38>
 80042be:	2302      	movs	r3, #2
 80042c0:	e00f      	b.n	80042e2 <HAL_UART_Receive_IT+0x58>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	461a      	mov	r2, r3
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 fb24 	bl	8004924 <UART_Start_Receive_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	e000      	b.n	80042e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b0ba      	sub	sp, #232	; 0xe8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800432a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_UART_IRQHandler+0x66>
 800433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fc03 	bl	8004b56 <UART_Receive_IT>
      return;
 8004350:	e256      	b.n	8004800 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80de 	beq.w	8004518 <HAL_UART_IRQHandler+0x22c>
 800435c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800436c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80d1 	beq.w	8004518 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_UART_IRQHandler+0xae>
 8004382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_UART_IRQHandler+0xd2>
 80043a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f043 0202 	orr.w	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_UART_IRQHandler+0xf6>
 80043ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0204 	orr.w	r2, r3, #4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d011      	beq.n	8004412 <HAL_UART_IRQHandler+0x126>
 80043ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f043 0208 	orr.w	r2, r3, #8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 81ed 	beq.w	80047f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800441c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_UART_IRQHandler+0x14e>
 8004428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fb8e 	bl	8004b56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d103      	bne.n	8004466 <HAL_UART_IRQHandler+0x17a>
 800445e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04f      	beq.n	8004506 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa96 	bl	8004998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b40      	cmp	r3, #64	; 0x40
 8004478:	d141      	bne.n	80044fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3314      	adds	r3, #20
 80044a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1d9      	bne.n	800447a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d013      	beq.n	80044f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	4a7d      	ldr	r2, [pc, #500]	; (80046c8 <HAL_UART_IRQHandler+0x3dc>)
 80044d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd fa69 	bl	80019b2 <HAL_DMA_Abort_IT>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d016      	beq.n	8004514 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f0:	4610      	mov	r0, r2
 80044f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	e00e      	b.n	8004514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f990 	bl	800481c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	e00a      	b.n	8004514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f98c 	bl	800481c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	e006      	b.n	8004514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f988 	bl	800481c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004512:	e170      	b.n	80047f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004514:	bf00      	nop
    return;
 8004516:	e16e      	b.n	80047f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	2b01      	cmp	r3, #1
 800451e:	f040 814a 	bne.w	80047b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8143 	beq.w	80047b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 813c 	beq.w	80047b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	f040 80b4 	bne.w	80046cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004570:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8140 	beq.w	80047fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800457e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004582:	429a      	cmp	r2, r3
 8004584:	f080 8139 	bcs.w	80047fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800458e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459a:	f000 8088 	beq.w	80046ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	330c      	adds	r3, #12
 80045a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1d9      	bne.n	800459e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3314      	adds	r3, #20
 80045f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3314      	adds	r3, #20
 800460a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800460e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004612:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004616:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e1      	bne.n	80045ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3314      	adds	r3, #20
 8004646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800464a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800464c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004650:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e3      	bne.n	8004626 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800467c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467e:	f023 0310 	bic.w	r3, r3, #16
 8004682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004690:	65ba      	str	r2, [r7, #88]	; 0x58
 8004692:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004696:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800469e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e3      	bne.n	800466c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fd f912 	bl	80018d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f8b6 	bl	8004830 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046c4:	e099      	b.n	80047fa <HAL_UART_IRQHandler+0x50e>
 80046c6:	bf00      	nop
 80046c8:	08004a5f 	.word	0x08004a5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 808b 	beq.w	80047fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8086 	beq.w	80047fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004708:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004716:	647a      	str	r2, [r7, #68]	; 0x44
 8004718:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800471c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e3      	bne.n	80046f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	623b      	str	r3, [r7, #32]
   return(result);
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800474e:	633a      	str	r2, [r7, #48]	; 0x30
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e3      	bne.n	800472a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0310 	bic.w	r3, r3, #16
 8004786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004794:	61fa      	str	r2, [r7, #28]
 8004796:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	69b9      	ldr	r1, [r7, #24]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	617b      	str	r3, [r7, #20]
   return(result);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e3      	bne.n	8004770 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f83e 	bl	8004830 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047b4:	e023      	b.n	80047fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_UART_IRQHandler+0x4ea>
 80047c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f959 	bl	8004a86 <UART_Transmit_IT>
    return;
 80047d4:	e014      	b.n	8004800 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00e      	beq.n	8004800 <HAL_UART_IRQHandler+0x514>
 80047e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f999 	bl	8004b26 <UART_EndTransmit_IT>
    return;
 80047f4:	e004      	b.n	8004800 <HAL_UART_IRQHandler+0x514>
    return;
 80047f6:	bf00      	nop
 80047f8:	e002      	b.n	8004800 <HAL_UART_IRQHandler+0x514>
      return;
 80047fa:	bf00      	nop
 80047fc:	e000      	b.n	8004800 <HAL_UART_IRQHandler+0x514>
      return;
 80047fe:	bf00      	nop
  }
}
 8004800:	37e8      	adds	r7, #232	; 0xe8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop

08004808 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b090      	sub	sp, #64	; 0x40
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4613      	mov	r3, r2
 8004856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004858:	e050      	b.n	80048fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004860:	d04c      	beq.n	80048fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <UART_WaitOnFlagUntilTimeout+0x30>
 8004868:	f7fc fef2 	bl	8001650 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004874:	429a      	cmp	r2, r3
 8004876:	d241      	bcs.n	80048fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004898:	637a      	str	r2, [r7, #52]	; 0x34
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800489e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e5      	bne.n	8004878 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3314      	adds	r3, #20
 80048b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	613b      	str	r3, [r7, #16]
   return(result);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3314      	adds	r3, #20
 80048ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048cc:	623a      	str	r2, [r7, #32]
 80048ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	69f9      	ldr	r1, [r7, #28]
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e5      	bne.n	80048ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e00f      	b.n	800491c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4013      	ands	r3, r2
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	bf0c      	ite	eq
 800490c:	2301      	moveq	r3, #1
 800490e:	2300      	movne	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	429a      	cmp	r2, r3
 8004918:	d09f      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3740      	adds	r7, #64	; 0x40
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	88fa      	ldrh	r2, [r7, #6]
 8004942:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2222      	movs	r2, #34	; 0x22
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004968:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0220 	orr.w	r2, r2, #32
 8004988:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b095      	sub	sp, #84	; 0x54
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c0:	643a      	str	r2, [r7, #64]	; 0x40
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e5      	bne.n	80049a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3314      	adds	r3, #20
 80049f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e5      	bne.n	80049d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d119      	bne.n	8004a44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a30:	61ba      	str	r2, [r7, #24]
 8004a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6979      	ldr	r1, [r7, #20]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a52:	bf00      	nop
 8004a54:	3754      	adds	r7, #84	; 0x54
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fecf 	bl	800481c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b21      	cmp	r3, #33	; 0x21
 8004a98:	d13e      	bne.n	8004b18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d114      	bne.n	8004ace <UART_Transmit_IT+0x48>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d110      	bne.n	8004ace <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	621a      	str	r2, [r3, #32]
 8004acc:	e008      	b.n	8004ae0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	1c59      	adds	r1, r3, #1
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6211      	str	r1, [r2, #32]
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	4619      	mov	r1, r3
 8004aee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fe5e 	bl	8004808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b08c      	sub	sp, #48	; 0x30
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b22      	cmp	r3, #34	; 0x22
 8004b68:	f040 80ab 	bne.w	8004cc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b74:	d117      	bne.n	8004ba6 <UART_Receive_IT+0x50>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d113      	bne.n	8004ba6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ba4:	e026      	b.n	8004bf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb8:	d007      	beq.n	8004bca <UART_Receive_IT+0x74>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <UART_Receive_IT+0x82>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e008      	b.n	8004bea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4619      	mov	r1, r3
 8004c02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d15a      	bne.n	8004cbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0220 	bic.w	r2, r2, #32
 8004c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d135      	bne.n	8004cb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	623a      	str	r2, [r7, #32]
 8004c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	69f9      	ldr	r1, [r7, #28]
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d10a      	bne.n	8004ca6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff fdbf 	bl	8004830 <HAL_UARTEx_RxEventCallback>
 8004cb2:	e002      	b.n	8004cba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7fc f851 	bl	8000d5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e002      	b.n	8004cc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3730      	adds	r7, #48	; 0x30
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	b09f      	sub	sp, #124	; 0x7c
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce2:	68d9      	ldr	r1, [r3, #12]
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	ea40 0301 	orr.w	r3, r0, r1
 8004cec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d10:	f021 010c 	bic.w	r1, r1, #12
 8004d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2a:	6999      	ldr	r1, [r3, #24]
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	ea40 0301 	orr.w	r3, r0, r1
 8004d34:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4bc5      	ldr	r3, [pc, #788]	; (8005050 <UART_SetConfig+0x384>)
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d004      	beq.n	8004d4a <UART_SetConfig+0x7e>
 8004d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4bc3      	ldr	r3, [pc, #780]	; (8005054 <UART_SetConfig+0x388>)
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d103      	bne.n	8004d52 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d4a:	f7fe fd3d 	bl	80037c8 <HAL_RCC_GetPCLK2Freq>
 8004d4e:	6778      	str	r0, [r7, #116]	; 0x74
 8004d50:	e002      	b.n	8004d58 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d52:	f7fe fd25 	bl	80037a0 <HAL_RCC_GetPCLK1Freq>
 8004d56:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d60:	f040 80b6 	bne.w	8004ed0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d66:	461c      	mov	r4, r3
 8004d68:	f04f 0500 	mov.w	r5, #0
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	462b      	mov	r3, r5
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	6439      	str	r1, [r7, #64]	; 0x40
 8004d74:	415b      	adcs	r3, r3
 8004d76:	647b      	str	r3, [r7, #68]	; 0x44
 8004d78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d7c:	1912      	adds	r2, r2, r4
 8004d7e:	eb45 0303 	adc.w	r3, r5, r3
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f04f 0100 	mov.w	r1, #0
 8004d8a:	00d9      	lsls	r1, r3, #3
 8004d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d90:	00d0      	lsls	r0, r2, #3
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	1911      	adds	r1, r2, r4
 8004d98:	6639      	str	r1, [r7, #96]	; 0x60
 8004d9a:	416b      	adcs	r3, r5
 8004d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	1891      	adds	r1, r2, r2
 8004daa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dac:	415b      	adcs	r3, r3
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004db4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004db8:	f7fb fa82 	bl	80002c0 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4ba5      	ldr	r3, [pc, #660]	; (8005058 <UART_SetConfig+0x38c>)
 8004dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	011e      	lsls	r6, r3, #4
 8004dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dcc:	461c      	mov	r4, r3
 8004dce:	f04f 0500 	mov.w	r5, #0
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	1891      	adds	r1, r2, r2
 8004dd8:	6339      	str	r1, [r7, #48]	; 0x30
 8004dda:	415b      	adcs	r3, r3
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004de2:	1912      	adds	r2, r2, r4
 8004de4:	eb45 0303 	adc.w	r3, r5, r3
 8004de8:	f04f 0000 	mov.w	r0, #0
 8004dec:	f04f 0100 	mov.w	r1, #0
 8004df0:	00d9      	lsls	r1, r3, #3
 8004df2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004df6:	00d0      	lsls	r0, r2, #3
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	1911      	adds	r1, r2, r4
 8004dfe:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e00:	416b      	adcs	r3, r5
 8004e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	1891      	adds	r1, r2, r2
 8004e10:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e12:	415b      	adcs	r3, r3
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e1a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e1e:	f7fb fa4f 	bl	80002c0 <__aeabi_uldivmod>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4b8c      	ldr	r3, [pc, #560]	; (8005058 <UART_SetConfig+0x38c>)
 8004e28:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	2164      	movs	r1, #100	; 0x64
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	3332      	adds	r3, #50	; 0x32
 8004e3a:	4a87      	ldr	r2, [pc, #540]	; (8005058 <UART_SetConfig+0x38c>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e48:	441e      	add	r6, r3
 8004e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	1894      	adds	r4, r2, r2
 8004e58:	623c      	str	r4, [r7, #32]
 8004e5a:	415b      	adcs	r3, r3
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e62:	1812      	adds	r2, r2, r0
 8004e64:	eb41 0303 	adc.w	r3, r1, r3
 8004e68:	f04f 0400 	mov.w	r4, #0
 8004e6c:	f04f 0500 	mov.w	r5, #0
 8004e70:	00dd      	lsls	r5, r3, #3
 8004e72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e76:	00d4      	lsls	r4, r2, #3
 8004e78:	4622      	mov	r2, r4
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	1814      	adds	r4, r2, r0
 8004e7e:	653c      	str	r4, [r7, #80]	; 0x50
 8004e80:	414b      	adcs	r3, r1
 8004e82:	657b      	str	r3, [r7, #84]	; 0x54
 8004e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	1891      	adds	r1, r2, r2
 8004e90:	61b9      	str	r1, [r7, #24]
 8004e92:	415b      	adcs	r3, r3
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e9e:	f7fb fa0f 	bl	80002c0 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4b6c      	ldr	r3, [pc, #432]	; (8005058 <UART_SetConfig+0x38c>)
 8004ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2164      	movs	r1, #100	; 0x64
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	3332      	adds	r3, #50	; 0x32
 8004eba:	4a67      	ldr	r2, [pc, #412]	; (8005058 <UART_SetConfig+0x38c>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f003 0207 	and.w	r2, r3, #7
 8004ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4432      	add	r2, r6
 8004ecc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ece:	e0b9      	b.n	8005044 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed2:	461c      	mov	r4, r3
 8004ed4:	f04f 0500 	mov.w	r5, #0
 8004ed8:	4622      	mov	r2, r4
 8004eda:	462b      	mov	r3, r5
 8004edc:	1891      	adds	r1, r2, r2
 8004ede:	6139      	str	r1, [r7, #16]
 8004ee0:	415b      	adcs	r3, r3
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ee8:	1912      	adds	r2, r2, r4
 8004eea:	eb45 0303 	adc.w	r3, r5, r3
 8004eee:	f04f 0000 	mov.w	r0, #0
 8004ef2:	f04f 0100 	mov.w	r1, #0
 8004ef6:	00d9      	lsls	r1, r3, #3
 8004ef8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004efc:	00d0      	lsls	r0, r2, #3
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	eb12 0804 	adds.w	r8, r2, r4
 8004f06:	eb43 0905 	adc.w	r9, r3, r5
 8004f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f04f 0100 	mov.w	r1, #0
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	008b      	lsls	r3, r1, #2
 8004f1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f22:	0082      	lsls	r2, r0, #2
 8004f24:	4640      	mov	r0, r8
 8004f26:	4649      	mov	r1, r9
 8004f28:	f7fb f9ca 	bl	80002c0 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4b49      	ldr	r3, [pc, #292]	; (8005058 <UART_SetConfig+0x38c>)
 8004f32:	fba3 2302 	umull	r2, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	011e      	lsls	r6, r3, #4
 8004f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	1894      	adds	r4, r2, r2
 8004f48:	60bc      	str	r4, [r7, #8]
 8004f4a:	415b      	adcs	r3, r3
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f52:	1812      	adds	r2, r2, r0
 8004f54:	eb41 0303 	adc.w	r3, r1, r3
 8004f58:	f04f 0400 	mov.w	r4, #0
 8004f5c:	f04f 0500 	mov.w	r5, #0
 8004f60:	00dd      	lsls	r5, r3, #3
 8004f62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f66:	00d4      	lsls	r4, r2, #3
 8004f68:	4622      	mov	r2, r4
 8004f6a:	462b      	mov	r3, r5
 8004f6c:	1814      	adds	r4, r2, r0
 8004f6e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f70:	414b      	adcs	r3, r1
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f04f 0100 	mov.w	r1, #0
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	008b      	lsls	r3, r1, #2
 8004f88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f8c:	0082      	lsls	r2, r0, #2
 8004f8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f92:	f7fb f995 	bl	80002c0 <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <UART_SetConfig+0x38c>)
 8004f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	2164      	movs	r1, #100	; 0x64
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	3332      	adds	r3, #50	; 0x32
 8004fae:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <UART_SetConfig+0x38c>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fba:	441e      	add	r6, r3
 8004fbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f04f 0100 	mov.w	r1, #0
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	1894      	adds	r4, r2, r2
 8004fca:	603c      	str	r4, [r7, #0]
 8004fcc:	415b      	adcs	r3, r3
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd4:	1812      	adds	r2, r2, r0
 8004fd6:	eb41 0303 	adc.w	r3, r1, r3
 8004fda:	f04f 0400 	mov.w	r4, #0
 8004fde:	f04f 0500 	mov.w	r5, #0
 8004fe2:	00dd      	lsls	r5, r3, #3
 8004fe4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fe8:	00d4      	lsls	r4, r2, #3
 8004fea:	4622      	mov	r2, r4
 8004fec:	462b      	mov	r3, r5
 8004fee:	eb12 0a00 	adds.w	sl, r2, r0
 8004ff2:	eb43 0b01 	adc.w	fp, r3, r1
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	008b      	lsls	r3, r1, #2
 800500a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800500e:	0082      	lsls	r2, r0, #2
 8005010:	4650      	mov	r0, sl
 8005012:	4659      	mov	r1, fp
 8005014:	f7fb f954 	bl	80002c0 <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <UART_SetConfig+0x38c>)
 800501e:	fba3 1302 	umull	r1, r3, r3, r2
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2164      	movs	r1, #100	; 0x64
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	3332      	adds	r3, #50	; 0x32
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <UART_SetConfig+0x38c>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	f003 020f 	and.w	r2, r3, #15
 800503c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4432      	add	r2, r6
 8005042:	609a      	str	r2, [r3, #8]
}
 8005044:	bf00      	nop
 8005046:	377c      	adds	r7, #124	; 0x7c
 8005048:	46bd      	mov	sp, r7
 800504a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504e:	bf00      	nop
 8005050:	40011000 	.word	0x40011000
 8005054:	40011400 	.word	0x40011400
 8005058:	51eb851f 	.word	0x51eb851f

0800505c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800505c:	b084      	sub	sp, #16
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	f107 001c 	add.w	r0, r7, #28
 800506a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	2b01      	cmp	r3, #1
 8005072:	d122      	bne.n	80050ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800509c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f001 fb16 	bl	80066e0 <USB_CoreReset>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e01a      	b.n	80050f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f001 fb0a 	bl	80066e0 <USB_CoreReset>
 80050cc:	4603      	mov	r3, r0
 80050ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38
 80050e2:	e005      	b.n	80050f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10b      	bne.n	800510e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f043 0206 	orr.w	r2, r3, #6
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800511a:	b004      	add	sp, #16
 800511c:	4770      	bx	lr
	...

08005120 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4613      	mov	r3, r2
 800512c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d165      	bne.n	8005200 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4a41      	ldr	r2, [pc, #260]	; (800523c <USB_SetTurnaroundTime+0x11c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d906      	bls.n	800514a <USB_SetTurnaroundTime+0x2a>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4a40      	ldr	r2, [pc, #256]	; (8005240 <USB_SetTurnaroundTime+0x120>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d202      	bcs.n	800514a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005144:	230f      	movs	r3, #15
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	e062      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4a3c      	ldr	r2, [pc, #240]	; (8005240 <USB_SetTurnaroundTime+0x120>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d306      	bcc.n	8005160 <USB_SetTurnaroundTime+0x40>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4a3b      	ldr	r2, [pc, #236]	; (8005244 <USB_SetTurnaroundTime+0x124>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d202      	bcs.n	8005160 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800515a:	230e      	movs	r3, #14
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	e057      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4a38      	ldr	r2, [pc, #224]	; (8005244 <USB_SetTurnaroundTime+0x124>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d306      	bcc.n	8005176 <USB_SetTurnaroundTime+0x56>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a37      	ldr	r2, [pc, #220]	; (8005248 <USB_SetTurnaroundTime+0x128>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d202      	bcs.n	8005176 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005170:	230d      	movs	r3, #13
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e04c      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4a33      	ldr	r2, [pc, #204]	; (8005248 <USB_SetTurnaroundTime+0x128>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d306      	bcc.n	800518c <USB_SetTurnaroundTime+0x6c>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4a32      	ldr	r2, [pc, #200]	; (800524c <USB_SetTurnaroundTime+0x12c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d802      	bhi.n	800518c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005186:	230c      	movs	r3, #12
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	e041      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4a2f      	ldr	r2, [pc, #188]	; (800524c <USB_SetTurnaroundTime+0x12c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d906      	bls.n	80051a2 <USB_SetTurnaroundTime+0x82>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4a2e      	ldr	r2, [pc, #184]	; (8005250 <USB_SetTurnaroundTime+0x130>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d802      	bhi.n	80051a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800519c:	230b      	movs	r3, #11
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	e036      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4a2a      	ldr	r2, [pc, #168]	; (8005250 <USB_SetTurnaroundTime+0x130>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d906      	bls.n	80051b8 <USB_SetTurnaroundTime+0x98>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4a29      	ldr	r2, [pc, #164]	; (8005254 <USB_SetTurnaroundTime+0x134>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d802      	bhi.n	80051b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80051b2:	230a      	movs	r3, #10
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e02b      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4a26      	ldr	r2, [pc, #152]	; (8005254 <USB_SetTurnaroundTime+0x134>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d906      	bls.n	80051ce <USB_SetTurnaroundTime+0xae>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a25      	ldr	r2, [pc, #148]	; (8005258 <USB_SetTurnaroundTime+0x138>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d202      	bcs.n	80051ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80051c8:	2309      	movs	r3, #9
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e020      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4a21      	ldr	r2, [pc, #132]	; (8005258 <USB_SetTurnaroundTime+0x138>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d306      	bcc.n	80051e4 <USB_SetTurnaroundTime+0xc4>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a20      	ldr	r2, [pc, #128]	; (800525c <USB_SetTurnaroundTime+0x13c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d802      	bhi.n	80051e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80051de:	2308      	movs	r3, #8
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e015      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a1d      	ldr	r2, [pc, #116]	; (800525c <USB_SetTurnaroundTime+0x13c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d906      	bls.n	80051fa <USB_SetTurnaroundTime+0xda>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <USB_SetTurnaroundTime+0x140>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d202      	bcs.n	80051fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80051f4:	2307      	movs	r3, #7
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e00a      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80051fa:	2306      	movs	r3, #6
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e007      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005206:	2309      	movs	r3, #9
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e001      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800520c:	2309      	movs	r3, #9
 800520e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	029b      	lsls	r3, r3, #10
 8005224:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005228:	431a      	orrs	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	00d8acbf 	.word	0x00d8acbf
 8005240:	00e4e1c0 	.word	0x00e4e1c0
 8005244:	00f42400 	.word	0x00f42400
 8005248:	01067380 	.word	0x01067380
 800524c:	011a499f 	.word	0x011a499f
 8005250:	01312cff 	.word	0x01312cff
 8005254:	014ca43f 	.word	0x014ca43f
 8005258:	016e3600 	.word	0x016e3600
 800525c:	01a6ab1f 	.word	0x01a6ab1f
 8005260:	01e84800 	.word	0x01e84800

08005264 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f043 0201 	orr.w	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d115      	bne.n	80052f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052d6:	2001      	movs	r0, #1
 80052d8:	f7fc f9c6 	bl	8001668 <HAL_Delay>
      ms++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f001 f96c 	bl	80065c0 <USB_GetMode>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d01e      	beq.n	800532c <USB_SetCurrentMode+0x84>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b31      	cmp	r3, #49	; 0x31
 80052f2:	d9f0      	bls.n	80052d6 <USB_SetCurrentMode+0x2e>
 80052f4:	e01a      	b.n	800532c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d115      	bne.n	8005328 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005308:	2001      	movs	r0, #1
 800530a:	f7fc f9ad 	bl	8001668 <HAL_Delay>
      ms++;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3301      	adds	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 f953 	bl	80065c0 <USB_GetMode>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <USB_SetCurrentMode+0x84>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b31      	cmp	r3, #49	; 0x31
 8005324:	d9f0      	bls.n	8005308 <USB_SetCurrentMode+0x60>
 8005326:	e001      	b.n	800532c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e005      	b.n	8005338 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b32      	cmp	r3, #50	; 0x32
 8005330:	d101      	bne.n	8005336 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005340:	b084      	sub	sp, #16
 8005342:	b580      	push	{r7, lr}
 8005344:	b086      	sub	sp, #24
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800534e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	e009      	b.n	8005374 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	3340      	adds	r3, #64	; 0x40
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	2200      	movs	r2, #0
 800536c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	3301      	adds	r3, #1
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b0e      	cmp	r3, #14
 8005378:	d9f2      	bls.n	8005360 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800537a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d11c      	bne.n	80053ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538e:	f043 0302 	orr.w	r3, r3, #2
 8005392:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e005      	b.n	80053c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053cc:	461a      	mov	r2, r3
 80053ce:	2300      	movs	r3, #0
 80053d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	4619      	mov	r1, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e0:	461a      	mov	r2, r3
 80053e2:	680b      	ldr	r3, [r1, #0]
 80053e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d10c      	bne.n	8005406 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d104      	bne.n	80053fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053f2:	2100      	movs	r1, #0
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f945 	bl	8005684 <USB_SetDevSpeed>
 80053fa:	e008      	b.n	800540e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053fc:	2101      	movs	r1, #1
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f940 	bl	8005684 <USB_SetDevSpeed>
 8005404:	e003      	b.n	800540e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005406:	2103      	movs	r1, #3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f93b 	bl	8005684 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800540e:	2110      	movs	r1, #16
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f8f3 	bl	80055fc <USB_FlushTxFifo>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f90f 	bl	8005644 <USB_FlushRxFifo>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	461a      	mov	r2, r3
 8005438:	2300      	movs	r3, #0
 800543a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	461a      	mov	r2, r3
 8005444:	2300      	movs	r3, #0
 8005446:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544e:	461a      	mov	r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	e043      	b.n	80054e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800546c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005470:	d118      	bne.n	80054a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	461a      	mov	r2, r3
 8005486:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	e013      	b.n	80054b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	461a      	mov	r2, r3
 800549c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	e008      	b.n	80054b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	461a      	mov	r2, r3
 80054b2:	2300      	movs	r3, #0
 80054b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c2:	461a      	mov	r2, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	461a      	mov	r2, r3
 80054d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	3301      	adds	r3, #1
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d3b7      	bcc.n	800545a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ea:	2300      	movs	r3, #0
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	e043      	b.n	8005578 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005506:	d118      	bne.n	800553a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551a:	461a      	mov	r2, r3
 800551c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e013      	b.n	800554c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	461a      	mov	r2, r3
 8005532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	e008      	b.n	800554c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	461a      	mov	r2, r3
 8005548:	2300      	movs	r3, #0
 800554a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	461a      	mov	r2, r3
 800555a:	2300      	movs	r3, #0
 800555c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005570:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	3301      	adds	r3, #1
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	429a      	cmp	r2, r3
 800557e:	d3b7      	bcc.n	80054f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800558e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005592:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d105      	bne.n	80055b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f043 0210 	orr.w	r2, r3, #16
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <USB_DevInit+0x2b8>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f043 0208 	orr.w	r2, r3, #8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d107      	bne.n	80055e8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055e0:	f043 0304 	orr.w	r3, r3, #4
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055f4:	b004      	add	sp, #16
 80055f6:	4770      	bx	lr
 80055f8:	803c3800 	.word	0x803c3800

080055fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	019b      	lsls	r3, r3, #6
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3301      	adds	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	4a08      	ldr	r2, [pc, #32]	; (8005640 <USB_FlushTxFifo+0x44>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e006      	b.n	8005634 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b20      	cmp	r3, #32
 8005630:	d0f1      	beq.n	8005616 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	00030d40 	.word	0x00030d40

08005644 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2210      	movs	r2, #16
 8005654:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3301      	adds	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	4a08      	ldr	r2, [pc, #32]	; (8005680 <USB_FlushRxFifo+0x3c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e006      	b.n	8005674 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b10      	cmp	r3, #16
 8005670:	d0f1      	beq.n	8005656 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	00030d40 	.word	0x00030d40

08005684 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0306 	and.w	r3, r3, #6
 80056ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]
 80056da:	e00a      	b.n	80056f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d002      	beq.n	80056e8 <USB_GetDevSpeed+0x32>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b06      	cmp	r3, #6
 80056e6:	d102      	bne.n	80056ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056e8:	2302      	movs	r3, #2
 80056ea:	75fb      	strb	r3, [r7, #23]
 80056ec:	e001      	b.n	80056f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056ee:	230f      	movs	r3, #15
 80056f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d13a      	bne.n	8005792 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	2101      	movs	r1, #1
 800572e:	fa01 f303 	lsl.w	r3, r1, r3
 8005732:	b29b      	uxth	r3, r3
 8005734:	68f9      	ldr	r1, [r7, #12]
 8005736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800573a:	4313      	orrs	r3, r2
 800573c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d155      	bne.n	8005800 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	78db      	ldrb	r3, [r3, #3]
 800576e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005770:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	059b      	lsls	r3, r3, #22
 8005776:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005778:	4313      	orrs	r3, r2
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e036      	b.n	8005800 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	69da      	ldr	r2, [r3, #28]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	2101      	movs	r1, #1
 80057a4:	fa01 f303 	lsl.w	r3, r1, r3
 80057a8:	041b      	lsls	r3, r3, #16
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d11a      	bne.n	8005800 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	78db      	ldrb	r3, [r3, #3]
 80057e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057e6:	430b      	orrs	r3, r1
 80057e8:	4313      	orrs	r3, r2
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d161      	bne.n	80058f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005842:	d11f      	bne.n	8005884 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005862:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	2101      	movs	r1, #1
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	b29b      	uxth	r3, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a4:	4013      	ands	r3, r2
 80058a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	b29b      	uxth	r3, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c8:	4013      	ands	r3, r2
 80058ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	0159      	lsls	r1, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	440b      	add	r3, r1
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	4619      	mov	r1, r3
 80058e8:	4b35      	ldr	r3, [pc, #212]	; (80059c0 <USB_DeactivateEndpoint+0x1b0>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]
 80058ee:	e060      	b.n	80059b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005906:	d11f      	bne.n	8005948 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	440a      	add	r2, r1
 800591e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005926:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005946:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	43db      	mvns	r3, r3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005968:	4013      	ands	r3, r2
 800596a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f303 	lsl.w	r3, r1, r3
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	43db      	mvns	r3, r3
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800598c:	4013      	ands	r3, r2
 800598e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	0159      	lsls	r1, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	440b      	add	r3, r1
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	4619      	mov	r1, r3
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <USB_DeactivateEndpoint+0x1b4>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	ec337800 	.word	0xec337800
 80059c4:	eff37800 	.word	0xeff37800

080059c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	; 0x28
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4613      	mov	r3, r2
 80059d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	f040 815c 	bne.w	8005ca2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d132      	bne.n	8005a58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a50:	0cdb      	lsrs	r3, r3, #19
 8005a52:	04db      	lsls	r3, r3, #19
 8005a54:	6113      	str	r3, [r2, #16]
 8005a56:	e074      	b.n	8005b42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	0151      	lsls	r1, r2, #5
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	440a      	add	r2, r1
 8005a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a72:	0cdb      	lsrs	r3, r3, #19
 8005a74:	04db      	lsls	r3, r3, #19
 8005a76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6959      	ldr	r1, [r3, #20]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	440b      	add	r3, r1
 8005ab4:	1e59      	subs	r1, r3, #1
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8005abe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ac0:	4b9d      	ldr	r3, [pc, #628]	; (8005d38 <USB_EPStartXfer+0x370>)
 8005ac2:	400b      	ands	r3, r1
 8005ac4:	69b9      	ldr	r1, [r7, #24]
 8005ac6:	0148      	lsls	r0, r1, #5
 8005ac8:	69f9      	ldr	r1, [r7, #28]
 8005aca:	4401      	add	r1, r0
 8005acc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aea:	69b9      	ldr	r1, [r7, #24]
 8005aec:	0148      	lsls	r0, r1, #5
 8005aee:	69f9      	ldr	r1, [r7, #28]
 8005af0:	4401      	add	r1, r0
 8005af2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005af6:	4313      	orrs	r3, r2
 8005af8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	78db      	ldrb	r3, [r3, #3]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d11f      	bne.n	8005b42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d14b      	bne.n	8005be0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	78db      	ldrb	r3, [r3, #3]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d128      	bne.n	8005bbe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d110      	bne.n	8005b9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	e00f      	b.n	8005bbe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	e12f      	b.n	8005e40 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bfe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	78db      	ldrb	r3, [r3, #3]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d015      	beq.n	8005c34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8117 	beq.w	8005e40 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	2101      	movs	r1, #1
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	69f9      	ldr	r1, [r7, #28]
 8005c2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	634b      	str	r3, [r1, #52]	; 0x34
 8005c32:	e105      	b.n	8005e40 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d110      	bne.n	8005c66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e00f      	b.n	8005c86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	68d9      	ldr	r1, [r3, #12]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	b298      	uxth	r0, r3
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	4603      	mov	r3, r0
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fa2b 	bl	80060f6 <USB_WritePacket>
 8005ca0:	e0ce      	b.n	8005e40 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbc:	0cdb      	lsrs	r3, r3, #19
 8005cbe:	04db      	lsls	r3, r3, #19
 8005cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ce0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ce4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d126      	bne.n	8005d3c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	0148      	lsls	r0, r1, #5
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d10:	4313      	orrs	r3, r2
 8005d12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d32:	6113      	str	r3, [r2, #16]
 8005d34:	e036      	b.n	8005da4 <USB_EPStartXfer+0x3dc>
 8005d36:	bf00      	nop
 8005d38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	1e5a      	subs	r2, r3, #1
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d50:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	8afb      	ldrh	r3, [r7, #22]
 8005d62:	04d9      	lsls	r1, r3, #19
 8005d64:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <USB_EPStartXfer+0x484>)
 8005d66:	400b      	ands	r3, r1
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	0148      	lsls	r0, r1, #5
 8005d6c:	69f9      	ldr	r1, [r7, #28]
 8005d6e:	4401      	add	r1, r0
 8005d70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d74:	4313      	orrs	r3, r2
 8005d76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	8af9      	ldrh	r1, [r7, #22]
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d94:	69b9      	ldr	r1, [r7, #24]
 8005d96:	0148      	lsls	r0, r1, #5
 8005d98:	69f9      	ldr	r1, [r7, #28]
 8005d9a:	4401      	add	r1, r0
 8005d9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005da0:	4313      	orrs	r3, r2
 8005da2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d10d      	bne.n	8005dc6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	68d9      	ldr	r1, [r3, #12]
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	460a      	mov	r2, r1
 8005dc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	78db      	ldrb	r3, [r3, #3]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d128      	bne.n	8005e20 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d110      	bne.n	8005e00 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e00f      	b.n	8005e20 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	1ff80000 	.word	0x1ff80000

08005e50 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	f040 80cd 	bne.w	800600c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d132      	bne.n	8005ee0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ebc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed8:	0cdb      	lsrs	r3, r3, #19
 8005eda:	04db      	lsls	r3, r3, #19
 8005edc:	6113      	str	r3, [r2, #16]
 8005ede:	e04e      	b.n	8005f7e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efa:	0cdb      	lsrs	r3, r3, #19
 8005efc:	04db      	lsls	r3, r3, #19
 8005efe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f22:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d903      	bls.n	8005f38 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f6e:	6939      	ldr	r1, [r7, #16]
 8005f70:	0148      	lsls	r0, r1, #5
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	4401      	add	r1, r0
 8005f76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d11e      	bne.n	8005fc2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	e092      	b.n	80060e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fe0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d07e      	beq.n	80060e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8006000:	6979      	ldr	r1, [r7, #20]
 8006002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006006:	4313      	orrs	r3, r2
 8006008:	634b      	str	r3, [r1, #52]	; 0x34
 800600a:	e06d      	b.n	80060e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	440a      	add	r2, r1
 8006022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006026:	0cdb      	lsrs	r3, r3, #19
 8006028:	04db      	lsls	r3, r3, #19
 800602a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006046:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800604a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800604e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800607e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006096:	6939      	ldr	r1, [r7, #16]
 8006098:	0148      	lsls	r0, r1, #5
 800609a:	6979      	ldr	r1, [r7, #20]
 800609c:	4401      	add	r1, r0
 800609e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a2:	4313      	orrs	r3, r2
 80060a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d10d      	bne.n	80060c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	68d9      	ldr	r1, [r3, #12]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	460a      	mov	r2, r1
 80060c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b089      	sub	sp, #36	; 0x24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	4611      	mov	r1, r2
 8006102:	461a      	mov	r2, r3
 8006104:	460b      	mov	r3, r1
 8006106:	71fb      	strb	r3, [r7, #7]
 8006108:	4613      	mov	r3, r2
 800610a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006114:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006118:	2b00      	cmp	r3, #0
 800611a:	d123      	bne.n	8006164 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800611c:	88bb      	ldrh	r3, [r7, #4]
 800611e:	3303      	adds	r3, #3
 8006120:	089b      	lsrs	r3, r3, #2
 8006122:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	e018      	b.n	800615c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	031a      	lsls	r2, r3, #12
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	4413      	add	r3, r2
 8006132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006136:	461a      	mov	r2, r3
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	3301      	adds	r3, #1
 8006142:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	3301      	adds	r3, #1
 8006148:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3301      	adds	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	3301      	adds	r3, #1
 8006154:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	3301      	adds	r3, #1
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	429a      	cmp	r2, r3
 8006162:	d3e2      	bcc.n	800612a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3724      	adds	r7, #36	; 0x24
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006172:	b480      	push	{r7}
 8006174:	b08b      	sub	sp, #44	; 0x2c
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	4613      	mov	r3, r2
 800617e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	089b      	lsrs	r3, r3, #2
 800618c:	b29b      	uxth	r3, r3
 800618e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006198:	2300      	movs	r3, #0
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	e014      	b.n	80061c8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	601a      	str	r2, [r3, #0]
    pDest++;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	3301      	adds	r3, #1
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	3301      	adds	r3, #1
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	3301      	adds	r3, #1
 80061ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	3301      	adds	r3, #1
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	3301      	adds	r3, #1
 80061c6:	623b      	str	r3, [r7, #32]
 80061c8:	6a3a      	ldr	r2, [r7, #32]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d3e6      	bcc.n	800619e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061d0:	8bfb      	ldrh	r3, [r7, #30]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01e      	beq.n	8006214 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e0:	461a      	mov	r2, r3
 80061e2:	f107 0310 	add.w	r3, r7, #16
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	fa22 f303 	lsr.w	r3, r2, r3
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	701a      	strb	r2, [r3, #0]
      i++;
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	3301      	adds	r3, #1
 8006200:	623b      	str	r3, [r7, #32]
      pDest++;
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	3301      	adds	r3, #1
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006208:	8bfb      	ldrh	r3, [r7, #30]
 800620a:	3b01      	subs	r3, #1
 800620c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800620e:	8bfb      	ldrh	r3, [r7, #30]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1ea      	bne.n	80061ea <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006216:	4618      	mov	r0, r3
 8006218:	372c      	adds	r7, #44	; 0x2c
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d12c      	bne.n	8006298 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	db12      	blt.n	8006276 <USB_EPSetStall+0x54>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00f      	beq.n	8006276 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006270:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006274:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e02b      	b.n	80062f0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	db12      	blt.n	80062d0 <USB_EPSetStall+0xae>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00f      	beq.n	80062d0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062ce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d128      	bne.n	800636c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006334:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006338:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	78db      	ldrb	r3, [r3, #3]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d003      	beq.n	800634a <USB_EPClearStall+0x4c>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	78db      	ldrb	r3, [r3, #3]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d138      	bne.n	80063bc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e027      	b.n	80063bc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800638a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	78db      	ldrb	r3, [r3, #3]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d003      	beq.n	800639c <USB_EPClearStall+0x9e>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d10f      	bne.n	80063bc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063ec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80063fe:	68f9      	ldr	r1, [r7, #12]
 8006400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006404:	4313      	orrs	r3, r2
 8006406:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006430:	f023 0303 	bic.w	r3, r3, #3
 8006434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006444:	f023 0302 	bic.w	r3, r3, #2
 8006448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006486:	f043 0302 	orr.w	r3, r3, #2
 800648a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4013      	ands	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064b2:	68fb      	ldr	r3, [r7, #12]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	4013      	ands	r3, r2
 80064e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	0c1b      	lsrs	r3, r3, #16
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	4013      	ands	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	b29b      	uxth	r3, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	4013      	ands	r3, r2
 8006554:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006556:	68bb      	ldr	r3, [r7, #8]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	01db      	lsls	r3, r3, #7
 8006596:	b2db      	uxtb	r3, r3
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4013      	ands	r3, r2
 80065b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065b2:	68bb      	ldr	r3, [r7, #8]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	371c      	adds	r7, #28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	f003 0301 	and.w	r3, r3, #1
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065fa:	f023 0307 	bic.w	r3, r3, #7
 80065fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800660e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006612:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	460b      	mov	r3, r1
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	333c      	adds	r3, #60	; 0x3c
 800663a:	3304      	adds	r3, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	4a26      	ldr	r2, [pc, #152]	; (80066dc <USB_EP0_OutStart+0xb8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d90a      	bls.n	800665e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006658:	d101      	bne.n	800665e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	e037      	b.n	80066ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	461a      	mov	r2, r3
 8006666:	2300      	movs	r3, #0
 8006668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800667c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668c:	f043 0318 	orr.w	r3, r3, #24
 8006690:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80066a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80066a6:	7afb      	ldrb	r3, [r7, #11]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d10f      	bne.n	80066cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	461a      	mov	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80066ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	4f54300a 	.word	0x4f54300a

080066e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	4a13      	ldr	r2, [pc, #76]	; (8006740 <USB_CoreReset+0x60>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e01a      	b.n	8006732 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	daf3      	bge.n	80066ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f043 0201 	orr.w	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	4a09      	ldr	r2, [pc, #36]	; (8006740 <USB_CoreReset+0x60>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d901      	bls.n	8006724 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e006      	b.n	8006732 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d0f1      	beq.n	8006714 <USB_CoreReset+0x34>

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	00030d40 	.word	0x00030d40

08006744 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006750:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006754:	f002 f9f2 	bl	8008b3c <USBD_static_malloc>
 8006758:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d105      	bne.n	800676c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006768:	2302      	movs	r3, #2
 800676a:	e066      	b.n	800683a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	7c1b      	ldrb	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d119      	bne.n	80067b0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800677c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006780:	2202      	movs	r2, #2
 8006782:	2181      	movs	r1, #129	; 0x81
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f002 f868 	bl	800885a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006794:	2202      	movs	r2, #2
 8006796:	2101      	movs	r1, #1
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f002 f85e 	bl	800885a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2210      	movs	r2, #16
 80067aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80067ae:	e016      	b.n	80067de <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067b0:	2340      	movs	r3, #64	; 0x40
 80067b2:	2202      	movs	r2, #2
 80067b4:	2181      	movs	r1, #129	; 0x81
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f002 f84f 	bl	800885a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067c2:	2340      	movs	r3, #64	; 0x40
 80067c4:	2202      	movs	r2, #2
 80067c6:	2101      	movs	r1, #1
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f002 f846 	bl	800885a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2210      	movs	r2, #16
 80067da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067de:	2308      	movs	r3, #8
 80067e0:	2203      	movs	r2, #3
 80067e2:	2182      	movs	r1, #130	; 0x82
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f002 f838 	bl	800885a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7c1b      	ldrb	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800681a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800681e:	2101      	movs	r1, #1
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f002 f909 	bl	8008a38 <USBD_LL_PrepareReceive>
 8006826:	e007      	b.n	8006838 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800682e:	2340      	movs	r3, #64	; 0x40
 8006830:	2101      	movs	r1, #1
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f002 f900 	bl	8008a38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	460b      	mov	r3, r1
 800684c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800684e:	2181      	movs	r1, #129	; 0x81
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f002 f828 	bl	80088a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800685c:	2101      	movs	r1, #1
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f002 f821 	bl	80088a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800686c:	2182      	movs	r1, #130	; 0x82
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f002 f819 	bl	80088a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00e      	beq.n	80068ac <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800689e:	4618      	mov	r0, r3
 80068a0:	f002 f95a 	bl	8008b58 <USBD_static_free>
    pdev->pClassData = NULL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80068dc:	2303      	movs	r3, #3
 80068de:	e0af      	b.n	8006a40 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d03f      	beq.n	800696c <USBD_CDC_Setup+0xb4>
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	f040 809f 	bne.w	8006a30 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	88db      	ldrh	r3, [r3, #6]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d02e      	beq.n	8006958 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	b25b      	sxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	da16      	bge.n	8006932 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006910:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	88d2      	ldrh	r2, [r2, #6]
 8006916:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	88db      	ldrh	r3, [r3, #6]
 800691c:	2b07      	cmp	r3, #7
 800691e:	bf28      	it	cs
 8006920:	2307      	movcs	r3, #7
 8006922:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	89fa      	ldrh	r2, [r7, #14]
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 fb43 	bl	8007fb6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006930:	e085      	b.n	8006a3e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	785a      	ldrb	r2, [r3, #1]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	88db      	ldrh	r3, [r3, #6]
 8006940:	b2da      	uxtb	r2, r3
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006948:	6939      	ldr	r1, [r7, #16]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	461a      	mov	r2, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 fb5c 	bl	800800e <USBD_CtlPrepareRx>
      break;
 8006956:	e072      	b.n	8006a3e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	7850      	ldrb	r0, [r2, #1]
 8006964:	2200      	movs	r2, #0
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	4798      	blx	r3
      break;
 800696a:	e068      	b.n	8006a3e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b0b      	cmp	r3, #11
 8006972:	d852      	bhi.n	8006a1a <USBD_CDC_Setup+0x162>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <USBD_CDC_Setup+0xc4>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	080069ad 	.word	0x080069ad
 8006980:	08006a29 	.word	0x08006a29
 8006984:	08006a1b 	.word	0x08006a1b
 8006988:	08006a1b 	.word	0x08006a1b
 800698c:	08006a1b 	.word	0x08006a1b
 8006990:	08006a1b 	.word	0x08006a1b
 8006994:	08006a1b 	.word	0x08006a1b
 8006998:	08006a1b 	.word	0x08006a1b
 800699c:	08006a1b 	.word	0x08006a1b
 80069a0:	08006a1b 	.word	0x08006a1b
 80069a4:	080069d7 	.word	0x080069d7
 80069a8:	08006a01 	.word	0x08006a01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d107      	bne.n	80069c8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069b8:	f107 030a 	add.w	r3, r7, #10
 80069bc:	2202      	movs	r2, #2
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 faf8 	bl	8007fb6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069c6:	e032      	b.n	8006a2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 fa82 	bl	8007ed4 <USBD_CtlError>
            ret = USBD_FAIL;
 80069d0:	2303      	movs	r3, #3
 80069d2:	75fb      	strb	r3, [r7, #23]
          break;
 80069d4:	e02b      	b.n	8006a2e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d107      	bne.n	80069f2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069e2:	f107 030d 	add.w	r3, r7, #13
 80069e6:	2201      	movs	r2, #1
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 fae3 	bl	8007fb6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069f0:	e01d      	b.n	8006a2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fa6d 	bl	8007ed4 <USBD_CtlError>
            ret = USBD_FAIL;
 80069fa:	2303      	movs	r3, #3
 80069fc:	75fb      	strb	r3, [r7, #23]
          break;
 80069fe:	e016      	b.n	8006a2e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d00f      	beq.n	8006a2c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fa60 	bl	8007ed4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a18:	e008      	b.n	8006a2c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 fa59 	bl	8007ed4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a22:	2303      	movs	r3, #3
 8006a24:	75fb      	strb	r3, [r7, #23]
          break;
 8006a26:	e002      	b.n	8006a2e <USBD_CDC_Setup+0x176>
          break;
 8006a28:	bf00      	nop
 8006a2a:	e008      	b.n	8006a3e <USBD_CDC_Setup+0x186>
          break;
 8006a2c:	bf00      	nop
      }
      break;
 8006a2e:	e006      	b.n	8006a3e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fa4e 	bl	8007ed4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e04f      	b.n	8006b0a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a72:	78fa      	ldrb	r2, [r7, #3]
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	440b      	add	r3, r1
 8006a80:	3318      	adds	r3, #24
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d029      	beq.n	8006adc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a88:	78fa      	ldrb	r2, [r7, #3]
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	3318      	adds	r3, #24
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	78f9      	ldrb	r1, [r7, #3]
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	1a5b      	subs	r3, r3, r1
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4403      	add	r3, r0
 8006aa8:	3344      	adds	r3, #68	; 0x44
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ab0:	fb03 f301 	mul.w	r3, r3, r1
 8006ab4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d110      	bne.n	8006adc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3318      	adds	r3, #24
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ace:	78f9      	ldrb	r1, [r7, #3]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 ff8e 	bl	80089f6 <USBD_LL_Transmit>
 8006ada:	e015      	b.n	8006b08 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b04:	78fa      	ldrb	r2, [r7, #3]
 8006b06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e015      	b.n	8006b60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 ff9e 	bl	8008a7a <USBD_LL_GetRxDataSize>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e01b      	b.n	8006bba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d015      	beq.n	8006bb8 <USBD_CDC_EP0_RxReady+0x50>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b92:	2bff      	cmp	r3, #255	; 0xff
 8006b94:	d010      	beq.n	8006bb8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006ba4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bac:	b292      	uxth	r2, r2
 8006bae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	22ff      	movs	r2, #255	; 0xff
 8006bb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2243      	movs	r2, #67	; 0x43
 8006bd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006bd2:	4b03      	ldr	r3, [pc, #12]	; (8006be0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	2000009c 	.word	0x2000009c

08006be4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2243      	movs	r2, #67	; 0x43
 8006bf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006bf2:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	20000058 	.word	0x20000058

08006c04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2243      	movs	r2, #67	; 0x43
 8006c10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006c12:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	200000e0 	.word	0x200000e0

08006c24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	220a      	movs	r2, #10
 8006c30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c32:	4b03      	ldr	r3, [pc, #12]	; (8006c40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	20000014 	.word	0x20000014

08006c44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e004      	b.n	8006c62 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b087      	sub	sp, #28
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c80:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e008      	b.n	8006c9e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e004      	b.n	8006cd0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e01a      	b.n	8006d34 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d114      	bne.n	8006d32 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d26:	2181      	movs	r1, #129	; 0x81
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fe64 	bl	80089f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e016      	b.n	8006d88 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7c1b      	ldrb	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d109      	bne.n	8006d76 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 fe62 	bl	8008a38 <USBD_LL_PrepareReceive>
 8006d74:	e007      	b.n	8006d86 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	2101      	movs	r1, #1
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 fe59 	bl	8008a38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e01f      	b.n	8006de8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	79fa      	ldrb	r2, [r7, #7]
 8006dda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f001 fcd1 	bl	8008784 <USBD_LL_Init>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e016      	b.n	8006e36 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00b      	beq.n	8006e34 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	f107 020e 	add.w	r2, r7, #14
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 fcec 	bl	8008824 <USBD_LL_Start>
 8006e4c:	4603      	mov	r3, r0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	78fa      	ldrb	r2, [r7, #3]
 8006e90:	4611      	mov	r1, r2
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	78fa      	ldrb	r2, [r7, #3]
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	4798      	blx	r3
  }

  return USBD_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 ffba 	bl	8007e60 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006efa:	461a      	mov	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d01a      	beq.n	8006f46 <USBD_LL_SetupStage+0x72>
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d822      	bhi.n	8006f5a <USBD_LL_SetupStage+0x86>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <USBD_LL_SetupStage+0x4a>
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d00a      	beq.n	8006f32 <USBD_LL_SetupStage+0x5e>
 8006f1c:	e01d      	b.n	8006f5a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa62 	bl	80073f0 <USBD_StdDevReq>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f30:	e020      	b.n	8006f74 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fac6 	bl	80074cc <USBD_StdItfReq>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
      break;
 8006f44:	e016      	b.n	8006f74 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fb05 	bl	800755e <USBD_StdEPReq>
 8006f54:	4603      	mov	r3, r0
 8006f56:	73fb      	strb	r3, [r7, #15]
      break;
 8006f58:	e00c      	b.n	8006f74 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 fcbb 	bl	80088e4 <USBD_LL_StallEP>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73fb      	strb	r3, [r7, #15]
      break;
 8006f72:	bf00      	nop
  }

  return ret;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	460b      	mov	r3, r1
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f8c:	7afb      	ldrb	r3, [r7, #11]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d138      	bne.n	8007004 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d14a      	bne.n	800703a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d913      	bls.n	8006fd8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	1ad2      	subs	r2, r2, r3
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	bf28      	it	cs
 8006fca:	4613      	movcs	r3, r2
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f001 f839 	bl	8008048 <USBD_CtlContinueRx>
 8006fd6:	e030      	b.n	800703a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d10b      	bne.n	8006ffc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f001 f834 	bl	800806a <USBD_CtlSendStatus>
 8007002:	e01a      	b.n	800703a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b03      	cmp	r3, #3
 800700e:	d114      	bne.n	800703a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	7afa      	ldrb	r2, [r7, #11]
 8007026:	4611      	mov	r1, r2
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	4798      	blx	r3
 800702c:	4603      	mov	r3, r0
 800702e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	e000      	b.n	800703c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	460b      	mov	r3, r1
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007052:	7afb      	ldrb	r3, [r7, #11]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d16b      	bne.n	8007130 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3314      	adds	r3, #20
 800705c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007064:	2b02      	cmp	r3, #2
 8007066:	d156      	bne.n	8007116 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	429a      	cmp	r2, r3
 8007072:	d914      	bls.n	800709e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	1ad2      	subs	r2, r2, r3
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	461a      	mov	r2, r3
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 ffae 	bl	8007fec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007090:	2300      	movs	r3, #0
 8007092:	2200      	movs	r2, #0
 8007094:	2100      	movs	r1, #0
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f001 fcce 	bl	8008a38 <USBD_LL_PrepareReceive>
 800709c:	e03b      	b.n	8007116 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d11c      	bne.n	80070e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d316      	bcc.n	80070e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d20f      	bcs.n	80070e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070c4:	2200      	movs	r2, #0
 80070c6:	2100      	movs	r1, #0
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 ff8f 	bl	8007fec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070d6:	2300      	movs	r3, #0
 80070d8:	2200      	movs	r2, #0
 80070da:	2100      	movs	r1, #0
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f001 fcab 	bl	8008a38 <USBD_LL_PrepareReceive>
 80070e2:	e018      	b.n	8007116 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d10b      	bne.n	8007108 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007108:	2180      	movs	r1, #128	; 0x80
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f001 fbea 	bl	80088e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 ffbd 	bl	8008090 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800711c:	2b01      	cmp	r3, #1
 800711e:	d122      	bne.n	8007166 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff fe98 	bl	8006e56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800712e:	e01a      	b.n	8007166 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b03      	cmp	r3, #3
 800713a:	d114      	bne.n	8007166 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00e      	beq.n	8007166 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	7afa      	ldrb	r2, [r7, #11]
 8007152:	4611      	mov	r1, r2
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	4798      	blx	r3
 8007158:	4603      	mov	r3, r0
 800715a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	e000      	b.n	8007168 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e02f      	b.n	8007204 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00f      	beq.n	80071ce <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6852      	ldr	r2, [r2, #4]
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	4611      	mov	r1, r2
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071ce:	2340      	movs	r3, #64	; 0x40
 80071d0:	2200      	movs	r2, #0
 80071d2:	2100      	movs	r1, #0
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 fb40 	bl	800885a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2240      	movs	r2, #64	; 0x40
 80071e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071ea:	2340      	movs	r3, #64	; 0x40
 80071ec:	2200      	movs	r2, #0
 80071ee:	2180      	movs	r1, #128	; 0x80
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fb32 	bl	800885a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2240      	movs	r2, #64	; 0x40
 8007200:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	78fa      	ldrb	r2, [r7, #3]
 800721c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723a:	b2da      	uxtb	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2204      	movs	r2, #4
 8007246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b04      	cmp	r3, #4
 800726a:	d106      	bne.n	800727a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007272:	b2da      	uxtb	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800729a:	2303      	movs	r3, #3
 800729c:	e012      	b.n	80072c4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d10b      	bne.n	80072c2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e014      	b.n	8007310 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d10d      	bne.n	800730e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	78fa      	ldrb	r2, [r7, #3]
 8007308:	4611      	mov	r1, r2
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800732e:	2303      	movs	r3, #3
 8007330:	e014      	b.n	800735c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d10d      	bne.n	800735a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	78fa      	ldrb	r2, [r7, #3]
 8007354:	4611      	mov	r1, r2
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007390:	2b00      	cmp	r3, #0
 8007392:	d009      	beq.n	80073a8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6852      	ldr	r2, [r2, #4]
 80073a0:	b2d2      	uxtb	r2, r2
 80073a2:	4611      	mov	r1, r2
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	4798      	blx	r3
  }

  return USBD_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b087      	sub	sp, #28
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3301      	adds	r3, #1
 80073c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073d0:	8a3b      	ldrh	r3, [r7, #16]
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	b21a      	sxth	r2, r3
 80073d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073da:	4313      	orrs	r3, r2
 80073dc:	b21b      	sxth	r3, r3
 80073de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073e0:	89fb      	ldrh	r3, [r7, #14]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
	...

080073f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007406:	2b40      	cmp	r3, #64	; 0x40
 8007408:	d005      	beq.n	8007416 <USBD_StdDevReq+0x26>
 800740a:	2b40      	cmp	r3, #64	; 0x40
 800740c:	d853      	bhi.n	80074b6 <USBD_StdDevReq+0xc6>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00b      	beq.n	800742a <USBD_StdDevReq+0x3a>
 8007412:	2b20      	cmp	r3, #32
 8007414:	d14f      	bne.n	80074b6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]
      break;
 8007428:	e04a      	b.n	80074c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	785b      	ldrb	r3, [r3, #1]
 800742e:	2b09      	cmp	r3, #9
 8007430:	d83b      	bhi.n	80074aa <USBD_StdDevReq+0xba>
 8007432:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <USBD_StdDevReq+0x48>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	0800748d 	.word	0x0800748d
 800743c:	080074a1 	.word	0x080074a1
 8007440:	080074ab 	.word	0x080074ab
 8007444:	08007497 	.word	0x08007497
 8007448:	080074ab 	.word	0x080074ab
 800744c:	0800746b 	.word	0x0800746b
 8007450:	08007461 	.word	0x08007461
 8007454:	080074ab 	.word	0x080074ab
 8007458:	08007483 	.word	0x08007483
 800745c:	08007475 	.word	0x08007475
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f9de 	bl	8007824 <USBD_GetDescriptor>
          break;
 8007468:	e024      	b.n	80074b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fb6d 	bl	8007b4c <USBD_SetAddress>
          break;
 8007472:	e01f      	b.n	80074b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fbac 	bl	8007bd4 <USBD_SetConfig>
 800747c:	4603      	mov	r3, r0
 800747e:	73fb      	strb	r3, [r7, #15]
          break;
 8007480:	e018      	b.n	80074b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fc4b 	bl	8007d20 <USBD_GetConfig>
          break;
 800748a:	e013      	b.n	80074b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fc7c 	bl	8007d8c <USBD_GetStatus>
          break;
 8007494:	e00e      	b.n	80074b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fcab 	bl	8007df4 <USBD_SetFeature>
          break;
 800749e:	e009      	b.n	80074b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fcba 	bl	8007e1c <USBD_ClrFeature>
          break;
 80074a8:	e004      	b.n	80074b4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fd11 	bl	8007ed4 <USBD_CtlError>
          break;
 80074b2:	bf00      	nop
      }
      break;
 80074b4:	e004      	b.n	80074c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fd0b 	bl	8007ed4 <USBD_CtlError>
      break;
 80074be:	bf00      	nop
  }

  return ret;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop

080074cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074e2:	2b40      	cmp	r3, #64	; 0x40
 80074e4:	d005      	beq.n	80074f2 <USBD_StdItfReq+0x26>
 80074e6:	2b40      	cmp	r3, #64	; 0x40
 80074e8:	d82f      	bhi.n	800754a <USBD_StdItfReq+0x7e>
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <USBD_StdItfReq+0x26>
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d12b      	bne.n	800754a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d81d      	bhi.n	800753c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	889b      	ldrh	r3, [r3, #4]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b01      	cmp	r3, #1
 8007508:	d813      	bhi.n	8007532 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	88db      	ldrh	r3, [r3, #6]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d110      	bne.n	8007546 <USBD_StdItfReq+0x7a>
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10d      	bne.n	8007546 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fd9d 	bl	800806a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007530:	e009      	b.n	8007546 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fccd 	bl	8007ed4 <USBD_CtlError>
          break;
 800753a:	e004      	b.n	8007546 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fcc8 	bl	8007ed4 <USBD_CtlError>
          break;
 8007544:	e000      	b.n	8007548 <USBD_StdItfReq+0x7c>
          break;
 8007546:	bf00      	nop
      }
      break;
 8007548:	e004      	b.n	8007554 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fcc1 	bl	8007ed4 <USBD_CtlError>
      break;
 8007552:	bf00      	nop
  }

  return ret;
 8007554:	7bfb      	ldrb	r3, [r7, #15]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	889b      	ldrh	r3, [r3, #4]
 8007570:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800757a:	2b40      	cmp	r3, #64	; 0x40
 800757c:	d007      	beq.n	800758e <USBD_StdEPReq+0x30>
 800757e:	2b40      	cmp	r3, #64	; 0x40
 8007580:	f200 8145 	bhi.w	800780e <USBD_StdEPReq+0x2b0>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00c      	beq.n	80075a2 <USBD_StdEPReq+0x44>
 8007588:	2b20      	cmp	r3, #32
 800758a:	f040 8140 	bne.w	800780e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
 800759c:	4603      	mov	r3, r0
 800759e:	73fb      	strb	r3, [r7, #15]
      break;
 80075a0:	e13a      	b.n	8007818 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	785b      	ldrb	r3, [r3, #1]
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d007      	beq.n	80075ba <USBD_StdEPReq+0x5c>
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	f300 8129 	bgt.w	8007802 <USBD_StdEPReq+0x2a4>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d07f      	beq.n	80076b4 <USBD_StdEPReq+0x156>
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d03c      	beq.n	8007632 <USBD_StdEPReq+0xd4>
 80075b8:	e123      	b.n	8007802 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d002      	beq.n	80075cc <USBD_StdEPReq+0x6e>
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d016      	beq.n	80075f8 <USBD_StdEPReq+0x9a>
 80075ca:	e02c      	b.n	8007626 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00d      	beq.n	80075ee <USBD_StdEPReq+0x90>
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2b80      	cmp	r3, #128	; 0x80
 80075d6:	d00a      	beq.n	80075ee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 f981 	bl	80088e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075e2:	2180      	movs	r1, #128	; 0x80
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 f97d 	bl	80088e4 <USBD_LL_StallEP>
 80075ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075ec:	e020      	b.n	8007630 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fc6f 	bl	8007ed4 <USBD_CtlError>
              break;
 80075f6:	e01b      	b.n	8007630 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	885b      	ldrh	r3, [r3, #2]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10e      	bne.n	800761e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <USBD_StdEPReq+0xc0>
 8007606:	7bbb      	ldrb	r3, [r7, #14]
 8007608:	2b80      	cmp	r3, #128	; 0x80
 800760a:	d008      	beq.n	800761e <USBD_StdEPReq+0xc0>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	88db      	ldrh	r3, [r3, #6]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 f963 	bl	80088e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fd23 	bl	800806a <USBD_CtlSendStatus>

              break;
 8007624:	e004      	b.n	8007630 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fc53 	bl	8007ed4 <USBD_CtlError>
              break;
 800762e:	bf00      	nop
          }
          break;
 8007630:	e0ec      	b.n	800780c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b02      	cmp	r3, #2
 800763c:	d002      	beq.n	8007644 <USBD_StdEPReq+0xe6>
 800763e:	2b03      	cmp	r3, #3
 8007640:	d016      	beq.n	8007670 <USBD_StdEPReq+0x112>
 8007642:	e030      	b.n	80076a6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00d      	beq.n	8007666 <USBD_StdEPReq+0x108>
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	2b80      	cmp	r3, #128	; 0x80
 800764e:	d00a      	beq.n	8007666 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 f945 	bl	80088e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800765a:	2180      	movs	r1, #128	; 0x80
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 f941 	bl	80088e4 <USBD_LL_StallEP>
 8007662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007664:	e025      	b.n	80076b2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fc33 	bl	8007ed4 <USBD_CtlError>
              break;
 800766e:	e020      	b.n	80076b2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	885b      	ldrh	r3, [r3, #2]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d11b      	bne.n	80076b0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767e:	2b00      	cmp	r3, #0
 8007680:	d004      	beq.n	800768c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 f94b 	bl	8008922 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fcec 	bl	800806a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80076a4:	e004      	b.n	80076b0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fc13 	bl	8007ed4 <USBD_CtlError>
              break;
 80076ae:	e000      	b.n	80076b2 <USBD_StdEPReq+0x154>
              break;
 80076b0:	bf00      	nop
          }
          break;
 80076b2:	e0ab      	b.n	800780c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d002      	beq.n	80076c6 <USBD_StdEPReq+0x168>
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d032      	beq.n	800772a <USBD_StdEPReq+0x1cc>
 80076c4:	e097      	b.n	80077f6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d007      	beq.n	80076dc <USBD_StdEPReq+0x17e>
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b80      	cmp	r3, #128	; 0x80
 80076d0:	d004      	beq.n	80076dc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fbfd 	bl	8007ed4 <USBD_CtlError>
                break;
 80076da:	e091      	b.n	8007800 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	da0b      	bge.n	80076fc <USBD_StdEPReq+0x19e>
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ea:	4613      	mov	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	3310      	adds	r3, #16
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	4413      	add	r3, r2
 80076f8:	3304      	adds	r3, #4
 80076fa:	e00b      	b.n	8007714 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	4413      	add	r3, r2
 8007712:	3304      	adds	r3, #4
 8007714:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2202      	movs	r2, #2
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fc47 	bl	8007fb6 <USBD_CtlSendData>
              break;
 8007728:	e06a      	b.n	8007800 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800772a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800772e:	2b00      	cmp	r3, #0
 8007730:	da11      	bge.n	8007756 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	f003 020f 	and.w	r2, r3, #15
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	3324      	adds	r3, #36	; 0x24
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d117      	bne.n	800777c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fbc0 	bl	8007ed4 <USBD_CtlError>
                  break;
 8007754:	e054      	b.n	8007800 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	f003 020f 	and.w	r2, r3, #15
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d104      	bne.n	800777c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fbad 	bl	8007ed4 <USBD_CtlError>
                  break;
 800777a:	e041      	b.n	8007800 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800777c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007780:	2b00      	cmp	r3, #0
 8007782:	da0b      	bge.n	800779c <USBD_StdEPReq+0x23e>
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	3310      	adds	r3, #16
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	4413      	add	r3, r2
 8007798:	3304      	adds	r3, #4
 800779a:	e00b      	b.n	80077b4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	4413      	add	r3, r2
 80077b2:	3304      	adds	r3, #4
 80077b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <USBD_StdEPReq+0x264>
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	2b80      	cmp	r3, #128	; 0x80
 80077c0:	d103      	bne.n	80077ca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	e00e      	b.n	80077e8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 f8c6 	bl	8008960 <USBD_LL_IsStallEP>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2201      	movs	r2, #1
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	e002      	b.n	80077e8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2202      	movs	r2, #2
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fbe1 	bl	8007fb6 <USBD_CtlSendData>
              break;
 80077f4:	e004      	b.n	8007800 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fb6b 	bl	8007ed4 <USBD_CtlError>
              break;
 80077fe:	bf00      	nop
          }
          break;
 8007800:	e004      	b.n	800780c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fb65 	bl	8007ed4 <USBD_CtlError>
          break;
 800780a:	bf00      	nop
      }
      break;
 800780c:	e004      	b.n	8007818 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fb5f 	bl	8007ed4 <USBD_CtlError>
      break;
 8007816:	bf00      	nop
  }

  return ret;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	885b      	ldrh	r3, [r3, #2]
 800783e:	0a1b      	lsrs	r3, r3, #8
 8007840:	b29b      	uxth	r3, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	2b0e      	cmp	r3, #14
 8007846:	f200 8152 	bhi.w	8007aee <USBD_GetDescriptor+0x2ca>
 800784a:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <USBD_GetDescriptor+0x2c>)
 800784c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007850:	080078c1 	.word	0x080078c1
 8007854:	080078d9 	.word	0x080078d9
 8007858:	08007919 	.word	0x08007919
 800785c:	08007aef 	.word	0x08007aef
 8007860:	08007aef 	.word	0x08007aef
 8007864:	08007a8f 	.word	0x08007a8f
 8007868:	08007abb 	.word	0x08007abb
 800786c:	08007aef 	.word	0x08007aef
 8007870:	08007aef 	.word	0x08007aef
 8007874:	08007aef 	.word	0x08007aef
 8007878:	08007aef 	.word	0x08007aef
 800787c:	08007aef 	.word	0x08007aef
 8007880:	08007aef 	.word	0x08007aef
 8007884:	08007aef 	.word	0x08007aef
 8007888:	0800788d 	.word	0x0800788d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	7c12      	ldrb	r2, [r2, #16]
 80078a4:	f107 0108 	add.w	r1, r7, #8
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
 80078ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078ae:	e126      	b.n	8007afe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fb0e 	bl	8007ed4 <USBD_CtlError>
        err++;
 80078b8:	7afb      	ldrb	r3, [r7, #11]
 80078ba:	3301      	adds	r3, #1
 80078bc:	72fb      	strb	r3, [r7, #11]
      break;
 80078be:	e11e      	b.n	8007afe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	7c12      	ldrb	r2, [r2, #16]
 80078cc:	f107 0108 	add.w	r1, r7, #8
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
 80078d4:	60f8      	str	r0, [r7, #12]
      break;
 80078d6:	e112      	b.n	8007afe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	7c1b      	ldrb	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10d      	bne.n	80078fc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	f107 0208 	add.w	r2, r7, #8
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3301      	adds	r3, #1
 80078f6:	2202      	movs	r2, #2
 80078f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078fa:	e100      	b.n	8007afe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	f107 0208 	add.w	r2, r7, #8
 8007908:	4610      	mov	r0, r2
 800790a:	4798      	blx	r3
 800790c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3301      	adds	r3, #1
 8007912:	2202      	movs	r2, #2
 8007914:	701a      	strb	r2, [r3, #0]
      break;
 8007916:	e0f2      	b.n	8007afe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	885b      	ldrh	r3, [r3, #2]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b05      	cmp	r3, #5
 8007920:	f200 80ac 	bhi.w	8007a7c <USBD_GetDescriptor+0x258>
 8007924:	a201      	add	r2, pc, #4	; (adr r2, 800792c <USBD_GetDescriptor+0x108>)
 8007926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792a:	bf00      	nop
 800792c:	08007945 	.word	0x08007945
 8007930:	08007979 	.word	0x08007979
 8007934:	080079ad 	.word	0x080079ad
 8007938:	080079e1 	.word	0x080079e1
 800793c:	08007a15 	.word	0x08007a15
 8007940:	08007a49 	.word	0x08007a49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	7c12      	ldrb	r2, [r2, #16]
 800795c:	f107 0108 	add.w	r1, r7, #8
 8007960:	4610      	mov	r0, r2
 8007962:	4798      	blx	r3
 8007964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007966:	e091      	b.n	8007a8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fab2 	bl	8007ed4 <USBD_CtlError>
            err++;
 8007970:	7afb      	ldrb	r3, [r7, #11]
 8007972:	3301      	adds	r3, #1
 8007974:	72fb      	strb	r3, [r7, #11]
          break;
 8007976:	e089      	b.n	8007a8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	7c12      	ldrb	r2, [r2, #16]
 8007990:	f107 0108 	add.w	r1, r7, #8
 8007994:	4610      	mov	r0, r2
 8007996:	4798      	blx	r3
 8007998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800799a:	e077      	b.n	8007a8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa98 	bl	8007ed4 <USBD_CtlError>
            err++;
 80079a4:	7afb      	ldrb	r3, [r7, #11]
 80079a6:	3301      	adds	r3, #1
 80079a8:	72fb      	strb	r3, [r7, #11]
          break;
 80079aa:	e06f      	b.n	8007a8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	7c12      	ldrb	r2, [r2, #16]
 80079c4:	f107 0108 	add.w	r1, r7, #8
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ce:	e05d      	b.n	8007a8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa7e 	bl	8007ed4 <USBD_CtlError>
            err++;
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	3301      	adds	r3, #1
 80079dc:	72fb      	strb	r3, [r7, #11]
          break;
 80079de:	e055      	b.n	8007a8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	7c12      	ldrb	r2, [r2, #16]
 80079f8:	f107 0108 	add.w	r1, r7, #8
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a02:	e043      	b.n	8007a8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa64 	bl	8007ed4 <USBD_CtlError>
            err++;
 8007a0c:	7afb      	ldrb	r3, [r7, #11]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	72fb      	strb	r3, [r7, #11]
          break;
 8007a12:	e03b      	b.n	8007a8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	7c12      	ldrb	r2, [r2, #16]
 8007a2c:	f107 0108 	add.w	r1, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a36:	e029      	b.n	8007a8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa4a 	bl	8007ed4 <USBD_CtlError>
            err++;
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	3301      	adds	r3, #1
 8007a44:	72fb      	strb	r3, [r7, #11]
          break;
 8007a46:	e021      	b.n	8007a8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	7c12      	ldrb	r2, [r2, #16]
 8007a60:	f107 0108 	add.w	r1, r7, #8
 8007a64:	4610      	mov	r0, r2
 8007a66:	4798      	blx	r3
 8007a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a6a:	e00f      	b.n	8007a8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fa30 	bl	8007ed4 <USBD_CtlError>
            err++;
 8007a74:	7afb      	ldrb	r3, [r7, #11]
 8007a76:	3301      	adds	r3, #1
 8007a78:	72fb      	strb	r3, [r7, #11]
          break;
 8007a7a:	e007      	b.n	8007a8c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa28 	bl	8007ed4 <USBD_CtlError>
          err++;
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	3301      	adds	r3, #1
 8007a88:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a8a:	bf00      	nop
      }
      break;
 8007a8c:	e037      	b.n	8007afe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	7c1b      	ldrb	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d109      	bne.n	8007aaa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9e:	f107 0208 	add.w	r2, r7, #8
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4798      	blx	r3
 8007aa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aa8:	e029      	b.n	8007afe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa11 	bl	8007ed4 <USBD_CtlError>
        err++;
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ab8:	e021      	b.n	8007afe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7c1b      	ldrb	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10d      	bne.n	8007ade <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aca:	f107 0208 	add.w	r2, r7, #8
 8007ace:	4610      	mov	r0, r2
 8007ad0:	4798      	blx	r3
 8007ad2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	2207      	movs	r2, #7
 8007ada:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007adc:	e00f      	b.n	8007afe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f9f7 	bl	8007ed4 <USBD_CtlError>
        err++;
 8007ae6:	7afb      	ldrb	r3, [r7, #11]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	72fb      	strb	r3, [r7, #11]
      break;
 8007aec:	e007      	b.n	8007afe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f9ef 	bl	8007ed4 <USBD_CtlError>
      err++;
 8007af6:	7afb      	ldrb	r3, [r7, #11]
 8007af8:	3301      	adds	r3, #1
 8007afa:	72fb      	strb	r3, [r7, #11]
      break;
 8007afc:	bf00      	nop
  }

  if (err != 0U)
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d11e      	bne.n	8007b42 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	88db      	ldrh	r3, [r3, #6]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d016      	beq.n	8007b3a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007b0c:	893b      	ldrh	r3, [r7, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00e      	beq.n	8007b30 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	88da      	ldrh	r2, [r3, #6]
 8007b16:	893b      	ldrh	r3, [r7, #8]
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	bf28      	it	cs
 8007b1c:	4613      	movcs	r3, r2
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b22:	893b      	ldrh	r3, [r7, #8]
 8007b24:	461a      	mov	r2, r3
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fa44 	bl	8007fb6 <USBD_CtlSendData>
 8007b2e:	e009      	b.n	8007b44 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9ce 	bl	8007ed4 <USBD_CtlError>
 8007b38:	e004      	b.n	8007b44 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa95 	bl	800806a <USBD_CtlSendStatus>
 8007b40:	e000      	b.n	8007b44 <USBD_GetDescriptor+0x320>
    return;
 8007b42:	bf00      	nop
  }
}
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop

08007b4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	889b      	ldrh	r3, [r3, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d131      	bne.n	8007bc2 <USBD_SetAddress+0x76>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	88db      	ldrh	r3, [r3, #6]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d12d      	bne.n	8007bc2 <USBD_SetAddress+0x76>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	885b      	ldrh	r3, [r3, #2]
 8007b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007b6c:	d829      	bhi.n	8007bc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	885b      	ldrh	r3, [r3, #2]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d104      	bne.n	8007b90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9a3 	bl	8007ed4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8e:	e01d      	b.n	8007bcc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	7bfa      	ldrb	r2, [r7, #15]
 8007b94:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 ff0b 	bl	80089b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa61 	bl	800806a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb6:	e009      	b.n	8007bcc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc0:	e004      	b.n	8007bcc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f985 	bl	8007ed4 <USBD_CtlError>
  }
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	885b      	ldrh	r3, [r3, #2]
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	4b4c      	ldr	r3, [pc, #304]	; (8007d1c <USBD_SetConfig+0x148>)
 8007bea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bec:	4b4b      	ldr	r3, [pc, #300]	; (8007d1c <USBD_SetConfig+0x148>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d905      	bls.n	8007c00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f96c 	bl	8007ed4 <USBD_CtlError>
    return USBD_FAIL;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e088      	b.n	8007d12 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d002      	beq.n	8007c12 <USBD_SetConfig+0x3e>
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d025      	beq.n	8007c5c <USBD_SetConfig+0x88>
 8007c10:	e071      	b.n	8007cf6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c12:	4b42      	ldr	r3, [pc, #264]	; (8007d1c <USBD_SetConfig+0x148>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01c      	beq.n	8007c54 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007c1a:	4b40      	ldr	r3, [pc, #256]	; (8007d1c <USBD_SetConfig+0x148>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c24:	4b3d      	ldr	r3, [pc, #244]	; (8007d1c <USBD_SetConfig+0x148>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff f91e 	bl	8006e6c <USBD_SetClassConfig>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f949 	bl	8007ed4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c42:	e065      	b.n	8007d10 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fa10 	bl	800806a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2203      	movs	r2, #3
 8007c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c52:	e05d      	b.n	8007d10 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fa08 	bl	800806a <USBD_CtlSendStatus>
      break;
 8007c5a:	e059      	b.n	8007d10 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c5c:	4b2f      	ldr	r3, [pc, #188]	; (8007d1c <USBD_SetConfig+0x148>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d112      	bne.n	8007c8a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c6c:	4b2b      	ldr	r3, [pc, #172]	; (8007d1c <USBD_SetConfig+0x148>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c76:	4b29      	ldr	r3, [pc, #164]	; (8007d1c <USBD_SetConfig+0x148>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff f911 	bl	8006ea4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f9f1 	bl	800806a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c88:	e042      	b.n	8007d10 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c8a:	4b24      	ldr	r3, [pc, #144]	; (8007d1c <USBD_SetConfig+0x148>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d02a      	beq.n	8007cee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff f8ff 	bl	8006ea4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ca6:	4b1d      	ldr	r3, [pc, #116]	; (8007d1c <USBD_SetConfig+0x148>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cb0:	4b1a      	ldr	r3, [pc, #104]	; (8007d1c <USBD_SetConfig+0x148>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff f8d8 	bl	8006e6c <USBD_SetClassConfig>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00f      	beq.n	8007ce6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f903 	bl	8007ed4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff f8e4 	bl	8006ea4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ce4:	e014      	b.n	8007d10 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f9bf 	bl	800806a <USBD_CtlSendStatus>
      break;
 8007cec:	e010      	b.n	8007d10 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f9bb 	bl	800806a <USBD_CtlSendStatus>
      break;
 8007cf4:	e00c      	b.n	8007d10 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f8eb 	bl	8007ed4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cfe:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <USBD_SetConfig+0x148>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff f8cd 	bl	8006ea4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0e:	bf00      	nop
  }

  return ret;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000434 	.word	0x20000434

08007d20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	88db      	ldrh	r3, [r3, #6]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d004      	beq.n	8007d3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f8cd 	bl	8007ed4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d3a:	e023      	b.n	8007d84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	dc02      	bgt.n	8007d4e <USBD_GetConfig+0x2e>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	dc03      	bgt.n	8007d54 <USBD_GetConfig+0x34>
 8007d4c:	e015      	b.n	8007d7a <USBD_GetConfig+0x5a>
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d00b      	beq.n	8007d6a <USBD_GetConfig+0x4a>
 8007d52:	e012      	b.n	8007d7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	2201      	movs	r2, #1
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f927 	bl	8007fb6 <USBD_CtlSendData>
        break;
 8007d68:	e00c      	b.n	8007d84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	2201      	movs	r2, #1
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f91f 	bl	8007fb6 <USBD_CtlSendData>
        break;
 8007d78:	e004      	b.n	8007d84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8a9 	bl	8007ed4 <USBD_CtlError>
        break;
 8007d82:	bf00      	nop
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d81e      	bhi.n	8007de2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	88db      	ldrh	r3, [r3, #6]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d004      	beq.n	8007db6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f890 	bl	8007ed4 <USBD_CtlError>
        break;
 8007db4:	e01a      	b.n	8007dec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d005      	beq.n	8007dd2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f043 0202 	orr.w	r2, r3, #2
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f8eb 	bl	8007fb6 <USBD_CtlSendData>
      break;
 8007de0:	e004      	b.n	8007dec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f875 	bl	8007ed4 <USBD_CtlError>
      break;
 8007dea:	bf00      	nop
  }
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	885b      	ldrh	r3, [r3, #2]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d106      	bne.n	8007e14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f92b 	bl	800806a <USBD_CtlSendStatus>
  }
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d80b      	bhi.n	8007e4c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	885b      	ldrh	r3, [r3, #2]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d10c      	bne.n	8007e56 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f910 	bl	800806a <USBD_CtlSendStatus>
      }
      break;
 8007e4a:	e004      	b.n	8007e56 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f840 	bl	8007ed4 <USBD_CtlError>
      break;
 8007e54:	e000      	b.n	8007e58 <USBD_ClrFeature+0x3c>
      break;
 8007e56:	bf00      	nop
  }
}
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	781a      	ldrb	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	781a      	ldrb	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7ff fa91 	bl	80073b2 <SWAPBYTE>
 8007e90:	4603      	mov	r3, r0
 8007e92:	461a      	mov	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff fa84 	bl	80073b2 <SWAPBYTE>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	461a      	mov	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f7ff fa77 	bl	80073b2 <SWAPBYTE>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	80da      	strh	r2, [r3, #6]
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ede:	2180      	movs	r1, #128	; 0x80
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fcff 	bl	80088e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fcfb 	bl	80088e4 <USBD_LL_StallEP>
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b086      	sub	sp, #24
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	60f8      	str	r0, [r7, #12]
 8007efe:	60b9      	str	r1, [r7, #8]
 8007f00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d036      	beq.n	8007f7a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f10:	6938      	ldr	r0, [r7, #16]
 8007f12:	f000 f836 	bl	8007f82 <USBD_GetLen>
 8007f16:	4603      	mov	r3, r0
 8007f18:	3301      	adds	r3, #1
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	4413      	add	r3, r2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	7812      	ldrb	r2, [r2, #0]
 8007f2e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f30:	7dfb      	ldrb	r3, [r7, #23]
 8007f32:	3301      	adds	r3, #1
 8007f34:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	2203      	movs	r2, #3
 8007f3e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
 8007f42:	3301      	adds	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f46:	e013      	b.n	8007f70 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	7812      	ldrb	r2, [r2, #0]
 8007f52:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	3301      	adds	r3, #1
 8007f58:	613b      	str	r3, [r7, #16]
    idx++;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	4413      	add	r3, r2
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e7      	bne.n	8007f48 <USBD_GetString+0x52>
 8007f78:	e000      	b.n	8007f7c <USBD_GetString+0x86>
    return;
 8007f7a:	bf00      	nop
  }
}
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b085      	sub	sp, #20
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f92:	e005      	b.n	8007fa0 <USBD_GetLen+0x1e>
  {
    len++;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	3301      	adds	r3, #1
 8007f98:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1f5      	bne.n	8007f94 <USBD_GetLen+0x12>
  }

  return len;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	2100      	movs	r1, #0
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 fd0a 	bl	80089f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 fcf9 	bl	80089f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2203      	movs	r2, #3
 800801e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	2100      	movs	r1, #0
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 fcfd 	bl	8008a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	2100      	movs	r1, #0
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 fcec 	bl	8008a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2204      	movs	r2, #4
 8008076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800807a:	2300      	movs	r3, #0
 800807c:	2200      	movs	r2, #0
 800807e:	2100      	movs	r1, #0
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fcb8 	bl	80089f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2205      	movs	r2, #5
 800809c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080a0:	2300      	movs	r3, #0
 80080a2:	2200      	movs	r2, #0
 80080a4:	2100      	movs	r1, #0
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fcc6 	bl	8008a38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080bc:	2200      	movs	r2, #0
 80080be:	4912      	ldr	r1, [pc, #72]	; (8008108 <MX_USB_DEVICE_Init+0x50>)
 80080c0:	4812      	ldr	r0, [pc, #72]	; (800810c <MX_USB_DEVICE_Init+0x54>)
 80080c2:	f7fe fe65 	bl	8006d90 <USBD_Init>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080cc:	f7f8 ff06 	bl	8000edc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080d0:	490f      	ldr	r1, [pc, #60]	; (8008110 <MX_USB_DEVICE_Init+0x58>)
 80080d2:	480e      	ldr	r0, [pc, #56]	; (800810c <MX_USB_DEVICE_Init+0x54>)
 80080d4:	f7fe fe8c 	bl	8006df0 <USBD_RegisterClass>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080de:	f7f8 fefd 	bl	8000edc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080e2:	490c      	ldr	r1, [pc, #48]	; (8008114 <MX_USB_DEVICE_Init+0x5c>)
 80080e4:	4809      	ldr	r0, [pc, #36]	; (800810c <MX_USB_DEVICE_Init+0x54>)
 80080e6:	f7fe fdad 	bl	8006c44 <USBD_CDC_RegisterInterface>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080f0:	f7f8 fef4 	bl	8000edc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080f4:	4805      	ldr	r0, [pc, #20]	; (800810c <MX_USB_DEVICE_Init+0x54>)
 80080f6:	f7fe fea2 	bl	8006e3e <USBD_Start>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008100:	f7f8 feec 	bl	8000edc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008104:	bf00      	nop
 8008106:	bd80      	pop	{r7, pc}
 8008108:	20000138 	.word	0x20000138
 800810c:	20000870 	.word	0x20000870
 8008110:	20000020 	.word	0x20000020
 8008114:	20000124 	.word	0x20000124

08008118 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800811c:	2200      	movs	r2, #0
 800811e:	4905      	ldr	r1, [pc, #20]	; (8008134 <CDC_Init_FS+0x1c>)
 8008120:	4805      	ldr	r0, [pc, #20]	; (8008138 <CDC_Init_FS+0x20>)
 8008122:	f7fe fda4 	bl	8006c6e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008126:	4905      	ldr	r1, [pc, #20]	; (800813c <CDC_Init_FS+0x24>)
 8008128:	4803      	ldr	r0, [pc, #12]	; (8008138 <CDC_Init_FS+0x20>)
 800812a:	f7fe fdbe 	bl	8006caa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800812e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008130:	4618      	mov	r0, r3
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20001340 	.word	0x20001340
 8008138:	20000870 	.word	0x20000870
 800813c:	20000b40 	.word	0x20000b40

08008140 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008144:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008146:	4618      	mov	r0, r3
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	71fb      	strb	r3, [r7, #7]
 800815c:	4613      	mov	r3, r2
 800815e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b23      	cmp	r3, #35	; 0x23
 8008164:	d84a      	bhi.n	80081fc <CDC_Control_FS+0xac>
 8008166:	a201      	add	r2, pc, #4	; (adr r2, 800816c <CDC_Control_FS+0x1c>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	080081fd 	.word	0x080081fd
 8008170:	080081fd 	.word	0x080081fd
 8008174:	080081fd 	.word	0x080081fd
 8008178:	080081fd 	.word	0x080081fd
 800817c:	080081fd 	.word	0x080081fd
 8008180:	080081fd 	.word	0x080081fd
 8008184:	080081fd 	.word	0x080081fd
 8008188:	080081fd 	.word	0x080081fd
 800818c:	080081fd 	.word	0x080081fd
 8008190:	080081fd 	.word	0x080081fd
 8008194:	080081fd 	.word	0x080081fd
 8008198:	080081fd 	.word	0x080081fd
 800819c:	080081fd 	.word	0x080081fd
 80081a0:	080081fd 	.word	0x080081fd
 80081a4:	080081fd 	.word	0x080081fd
 80081a8:	080081fd 	.word	0x080081fd
 80081ac:	080081fd 	.word	0x080081fd
 80081b0:	080081fd 	.word	0x080081fd
 80081b4:	080081fd 	.word	0x080081fd
 80081b8:	080081fd 	.word	0x080081fd
 80081bc:	080081fd 	.word	0x080081fd
 80081c0:	080081fd 	.word	0x080081fd
 80081c4:	080081fd 	.word	0x080081fd
 80081c8:	080081fd 	.word	0x080081fd
 80081cc:	080081fd 	.word	0x080081fd
 80081d0:	080081fd 	.word	0x080081fd
 80081d4:	080081fd 	.word	0x080081fd
 80081d8:	080081fd 	.word	0x080081fd
 80081dc:	080081fd 	.word	0x080081fd
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	080081fd 	.word	0x080081fd
 80081e8:	080081fd 	.word	0x080081fd
 80081ec:	080081fd 	.word	0x080081fd
 80081f0:	080081fd 	.word	0x080081fd
 80081f4:	080081fd 	.word	0x080081fd
 80081f8:	080081fd 	.word	0x080081fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081fc:	bf00      	nop
  }

  return (USBD_OK);
 80081fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	4807      	ldr	r0, [pc, #28]	; (8008238 <CDC_Receive_FS+0x2c>)
 800821a:	f7fe fd46 	bl	8006caa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800821e:	4806      	ldr	r0, [pc, #24]	; (8008238 <CDC_Receive_FS+0x2c>)
 8008220:	f7fe fd8c 	bl	8006d3c <USBD_CDC_ReceivePacket>

  data_received(Buf, Len);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7f8 fdb4 	bl	8000d94 <data_received>

  return (USBD_OK);
 800822c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000870 	.word	0x20000870

0800823c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */

	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800824c:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <CDC_Transmit_FS+0x48>)
 800824e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008252:	60bb      	str	r3, [r7, #8]

	if (hcdc->TxState != 0){
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <CDC_Transmit_FS+0x26>

	return USBD_BUSY;
 800825e:	2301      	movs	r3, #1
 8008260:	e00b      	b.n	800827a <CDC_Transmit_FS+0x3e>

	}

	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008262:	887b      	ldrh	r3, [r7, #2]
 8008264:	461a      	mov	r2, r3
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4806      	ldr	r0, [pc, #24]	; (8008284 <CDC_Transmit_FS+0x48>)
 800826a:	f7fe fd00 	bl	8006c6e <USBD_CDC_SetTxBuffer>

	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800826e:	4805      	ldr	r0, [pc, #20]	; (8008284 <CDC_Transmit_FS+0x48>)
 8008270:	f7fe fd34 	bl	8006cdc <USBD_CDC_TransmitPacket>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20000870 	.word	0x20000870

08008288 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800829a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	371c      	adds	r7, #28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
	...

080082ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	6039      	str	r1, [r7, #0]
 80082b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2212      	movs	r2, #18
 80082bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082be:	4b03      	ldr	r3, [pc, #12]	; (80082cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	20000158 	.word	0x20000158

080082d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	6039      	str	r1, [r7, #0]
 80082da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2204      	movs	r2, #4
 80082e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082e2:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	20000178 	.word	0x20000178

080082f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	6039      	str	r1, [r7, #0]
 80082fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d105      	bne.n	8008312 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4907      	ldr	r1, [pc, #28]	; (8008328 <USBD_FS_ProductStrDescriptor+0x34>)
 800830a:	4808      	ldr	r0, [pc, #32]	; (800832c <USBD_FS_ProductStrDescriptor+0x38>)
 800830c:	f7ff fdf3 	bl	8007ef6 <USBD_GetString>
 8008310:	e004      	b.n	800831c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	4904      	ldr	r1, [pc, #16]	; (8008328 <USBD_FS_ProductStrDescriptor+0x34>)
 8008316:	4805      	ldr	r0, [pc, #20]	; (800832c <USBD_FS_ProductStrDescriptor+0x38>)
 8008318:	f7ff fded 	bl	8007ef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800831c:	4b02      	ldr	r3, [pc, #8]	; (8008328 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20001b40 	.word	0x20001b40
 800832c:	080095a0 	.word	0x080095a0

08008330 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	6039      	str	r1, [r7, #0]
 800833a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	4904      	ldr	r1, [pc, #16]	; (8008350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008340:	4804      	ldr	r0, [pc, #16]	; (8008354 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008342:	f7ff fdd8 	bl	8007ef6 <USBD_GetString>
  return USBD_StrDesc;
 8008346:	4b02      	ldr	r3, [pc, #8]	; (8008350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20001b40 	.word	0x20001b40
 8008354:	080095b8 	.word	0x080095b8

08008358 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	6039      	str	r1, [r7, #0]
 8008362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	221a      	movs	r2, #26
 8008368:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800836a:	f000 f855 	bl	8008418 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800836e:	4b02      	ldr	r3, [pc, #8]	; (8008378 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	2000017c 	.word	0x2000017c

0800837c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	6039      	str	r1, [r7, #0]
 8008386:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d105      	bne.n	800839a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4907      	ldr	r1, [pc, #28]	; (80083b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008392:	4808      	ldr	r0, [pc, #32]	; (80083b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008394:	f7ff fdaf 	bl	8007ef6 <USBD_GetString>
 8008398:	e004      	b.n	80083a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	4904      	ldr	r1, [pc, #16]	; (80083b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800839e:	4805      	ldr	r0, [pc, #20]	; (80083b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083a0:	f7ff fda9 	bl	8007ef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083a4:	4b02      	ldr	r3, [pc, #8]	; (80083b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20001b40 	.word	0x20001b40
 80083b4:	080095cc 	.word	0x080095cc

080083b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	6039      	str	r1, [r7, #0]
 80083c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d105      	bne.n	80083d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	4907      	ldr	r1, [pc, #28]	; (80083ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083ce:	4808      	ldr	r0, [pc, #32]	; (80083f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083d0:	f7ff fd91 	bl	8007ef6 <USBD_GetString>
 80083d4:	e004      	b.n	80083e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	4904      	ldr	r1, [pc, #16]	; (80083ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083da:	4805      	ldr	r0, [pc, #20]	; (80083f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083dc:	f7ff fd8b 	bl	8007ef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083e0:	4b02      	ldr	r3, [pc, #8]	; (80083ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20001b40 	.word	0x20001b40
 80083f0:	080095d8 	.word	0x080095d8

080083f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	220c      	movs	r2, #12
 8008404:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008406:	4b03      	ldr	r3, [pc, #12]	; (8008414 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	2000016c 	.word	0x2000016c

08008418 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800841e:	4b0f      	ldr	r3, [pc, #60]	; (800845c <Get_SerialNum+0x44>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008424:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <Get_SerialNum+0x48>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800842a:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <Get_SerialNum+0x4c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4413      	add	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d009      	beq.n	8008452 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800843e:	2208      	movs	r2, #8
 8008440:	4909      	ldr	r1, [pc, #36]	; (8008468 <Get_SerialNum+0x50>)
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 f814 	bl	8008470 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008448:	2204      	movs	r2, #4
 800844a:	4908      	ldr	r1, [pc, #32]	; (800846c <Get_SerialNum+0x54>)
 800844c:	68b8      	ldr	r0, [r7, #8]
 800844e:	f000 f80f 	bl	8008470 <IntToUnicode>
  }
}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	1fff7a10 	.word	0x1fff7a10
 8008460:	1fff7a14 	.word	0x1fff7a14
 8008464:	1fff7a18 	.word	0x1fff7a18
 8008468:	2000017e 	.word	0x2000017e
 800846c:	2000018e 	.word	0x2000018e

08008470 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008482:	2300      	movs	r3, #0
 8008484:	75fb      	strb	r3, [r7, #23]
 8008486:	e027      	b.n	80084d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	0f1b      	lsrs	r3, r3, #28
 800848c:	2b09      	cmp	r3, #9
 800848e:	d80b      	bhi.n	80084a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	0f1b      	lsrs	r3, r3, #28
 8008494:	b2da      	uxtb	r2, r3
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	4619      	mov	r1, r3
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	440b      	add	r3, r1
 80084a0:	3230      	adds	r2, #48	; 0x30
 80084a2:	b2d2      	uxtb	r2, r2
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	e00a      	b.n	80084be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	0f1b      	lsrs	r3, r3, #28
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	4619      	mov	r1, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	440b      	add	r3, r1
 80084b8:	3237      	adds	r2, #55	; 0x37
 80084ba:	b2d2      	uxtb	r2, r2
 80084bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	3301      	adds	r3, #1
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	4413      	add	r3, r2
 80084ce:	2200      	movs	r2, #0
 80084d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	3301      	adds	r3, #1
 80084d6:	75fb      	strb	r3, [r7, #23]
 80084d8:	7dfa      	ldrb	r2, [r7, #23]
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d3d3      	bcc.n	8008488 <IntToUnicode+0x18>
  }
}
 80084e0:	bf00      	nop
 80084e2:	bf00      	nop
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
	...

080084f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	; 0x28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084f8:	f107 0314 	add.w	r3, r7, #20
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	605a      	str	r2, [r3, #4]
 8008502:	609a      	str	r2, [r3, #8]
 8008504:	60da      	str	r2, [r3, #12]
 8008506:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008510:	d147      	bne.n	80085a2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008512:	2300      	movs	r3, #0
 8008514:	613b      	str	r3, [r7, #16]
 8008516:	4b25      	ldr	r3, [pc, #148]	; (80085ac <HAL_PCD_MspInit+0xbc>)
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	4a24      	ldr	r2, [pc, #144]	; (80085ac <HAL_PCD_MspInit+0xbc>)
 800851c:	f043 0301 	orr.w	r3, r3, #1
 8008520:	6313      	str	r3, [r2, #48]	; 0x30
 8008522:	4b22      	ldr	r3, [pc, #136]	; (80085ac <HAL_PCD_MspInit+0xbc>)
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	613b      	str	r3, [r7, #16]
 800852c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800852e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008534:	2300      	movs	r3, #0
 8008536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008538:	2300      	movs	r3, #0
 800853a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800853c:	f107 0314 	add.w	r3, r7, #20
 8008540:	4619      	mov	r1, r3
 8008542:	481b      	ldr	r0, [pc, #108]	; (80085b0 <HAL_PCD_MspInit+0xc0>)
 8008544:	f7f9 fa58 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008548:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800854c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800854e:	2302      	movs	r3, #2
 8008550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008552:	2300      	movs	r3, #0
 8008554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008556:	2303      	movs	r3, #3
 8008558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800855a:	230a      	movs	r3, #10
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800855e:	f107 0314 	add.w	r3, r7, #20
 8008562:	4619      	mov	r1, r3
 8008564:	4812      	ldr	r0, [pc, #72]	; (80085b0 <HAL_PCD_MspInit+0xc0>)
 8008566:	f7f9 fa47 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800856a:	4b10      	ldr	r3, [pc, #64]	; (80085ac <HAL_PCD_MspInit+0xbc>)
 800856c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856e:	4a0f      	ldr	r2, [pc, #60]	; (80085ac <HAL_PCD_MspInit+0xbc>)
 8008570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008574:	6353      	str	r3, [r2, #52]	; 0x34
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <HAL_PCD_MspInit+0xbc>)
 800857c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857e:	4a0b      	ldr	r2, [pc, #44]	; (80085ac <HAL_PCD_MspInit+0xbc>)
 8008580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008584:	6453      	str	r3, [r2, #68]	; 0x44
 8008586:	4b09      	ldr	r3, [pc, #36]	; (80085ac <HAL_PCD_MspInit+0xbc>)
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008592:	2200      	movs	r2, #0
 8008594:	2100      	movs	r1, #0
 8008596:	2043      	movs	r0, #67	; 0x43
 8008598:	f7f9 f965 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800859c:	2043      	movs	r0, #67	; 0x43
 800859e:	f7f9 f97e 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085a2:	bf00      	nop
 80085a4:	3728      	adds	r7, #40	; 0x28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40023800 	.word	0x40023800
 80085b0:	40020000 	.word	0x40020000

080085b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f7fe fc82 	bl	8006ed4 <USBD_LL_SetupStage>
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	4613      	mov	r3, r2
 80085f0:	00db      	lsls	r3, r3, #3
 80085f2:	1a9b      	subs	r3, r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	440b      	add	r3, r1
 80085f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	4619      	mov	r1, r3
 8008602:	f7fe fcbc 	bl	8006f7e <USBD_LL_DataOutStage>
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008620:	78fa      	ldrb	r2, [r7, #3]
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	4613      	mov	r3, r2
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	1a9b      	subs	r3, r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	440b      	add	r3, r1
 800862e:	3348      	adds	r3, #72	; 0x48
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	4619      	mov	r1, r3
 8008636:	f7fe fd05 	bl	8007044 <USBD_LL_DataInStage>
}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008650:	4618      	mov	r0, r3
 8008652:	f7fe fe19 	bl	8007288 <USBD_LL_SOF>
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008666:	2301      	movs	r3, #1
 8008668:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d001      	beq.n	8008676 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008672:	f7f8 fc33 	bl	8000edc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800867c:	7bfa      	ldrb	r2, [r7, #15]
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe fdc3 	bl	800720c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe fd6f 	bl	8007170 <USBD_LL_Reset>
}
 8008692:	bf00      	nop
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe fdbe 	bl	800722c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	6812      	ldr	r2, [r2, #0]
 80086be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086d0:	4b04      	ldr	r3, [pc, #16]	; (80086e4 <HAL_PCD_SuspendCallback+0x48>)
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	4a03      	ldr	r2, [pc, #12]	; (80086e4 <HAL_PCD_SuspendCallback+0x48>)
 80086d6:	f043 0306 	orr.w	r3, r3, #6
 80086da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	e000ed00 	.word	0xe000ed00

080086e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fdae 	bl	8007258 <USBD_LL_Resume>
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fdfc 	bl	8007318 <USBD_LL_IsoOUTIncomplete>
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fdc4 	bl	80072cc <USBD_LL_IsoINIncomplete>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fe02 	bl	8007364 <USBD_LL_DevConnected>
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fdff 	bl	800737a <USBD_LL_DevDisconnected>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d13f      	bne.n	8008814 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008794:	4a22      	ldr	r2, [pc, #136]	; (8008820 <USBD_LL_Init+0x9c>)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a20      	ldr	r2, [pc, #128]	; (8008820 <USBD_LL_Init+0x9c>)
 80087a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087a4:	4b1e      	ldr	r3, [pc, #120]	; (8008820 <USBD_LL_Init+0x9c>)
 80087a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80087ac:	4b1c      	ldr	r3, [pc, #112]	; (8008820 <USBD_LL_Init+0x9c>)
 80087ae:	2206      	movs	r2, #6
 80087b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80087b2:	4b1b      	ldr	r3, [pc, #108]	; (8008820 <USBD_LL_Init+0x9c>)
 80087b4:	2202      	movs	r2, #2
 80087b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087b8:	4b19      	ldr	r3, [pc, #100]	; (8008820 <USBD_LL_Init+0x9c>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80087be:	4b18      	ldr	r3, [pc, #96]	; (8008820 <USBD_LL_Init+0x9c>)
 80087c0:	2202      	movs	r2, #2
 80087c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087c4:	4b16      	ldr	r3, [pc, #88]	; (8008820 <USBD_LL_Init+0x9c>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087ca:	4b15      	ldr	r3, [pc, #84]	; (8008820 <USBD_LL_Init+0x9c>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087d0:	4b13      	ldr	r3, [pc, #76]	; (8008820 <USBD_LL_Init+0x9c>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80087d6:	4b12      	ldr	r3, [pc, #72]	; (8008820 <USBD_LL_Init+0x9c>)
 80087d8:	2201      	movs	r2, #1
 80087da:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80087dc:	4b10      	ldr	r3, [pc, #64]	; (8008820 <USBD_LL_Init+0x9c>)
 80087de:	2201      	movs	r2, #1
 80087e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087e2:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <USBD_LL_Init+0x9c>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087e8:	480d      	ldr	r0, [pc, #52]	; (8008820 <USBD_LL_Init+0x9c>)
 80087ea:	f7f9 fc29 	bl	8002040 <HAL_PCD_Init>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 80087f4:	f7f8 fb72 	bl	8000edc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087f8:	2180      	movs	r1, #128	; 0x80
 80087fa:	4809      	ldr	r0, [pc, #36]	; (8008820 <USBD_LL_Init+0x9c>)
 80087fc:	f7fa fdbb 	bl	8003376 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008800:	2240      	movs	r2, #64	; 0x40
 8008802:	2100      	movs	r1, #0
 8008804:	4806      	ldr	r0, [pc, #24]	; (8008820 <USBD_LL_Init+0x9c>)
 8008806:	f7fa fd6f 	bl	80032e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800880a:	2280      	movs	r2, #128	; 0x80
 800880c:	2101      	movs	r1, #1
 800880e:	4804      	ldr	r0, [pc, #16]	; (8008820 <USBD_LL_Init+0x9c>)
 8008810:	f7fa fd6a 	bl	80032e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20001d40 	.word	0x20001d40

08008824 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800883a:	4618      	mov	r0, r3
 800883c:	f7f9 fd24 	bl	8002288 <HAL_PCD_Start>
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 f990 	bl	8008b6c <USBD_Get_USB_Status>
 800884c:	4603      	mov	r3, r0
 800884e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008850:	7bbb      	ldrb	r3, [r7, #14]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	4608      	mov	r0, r1
 8008864:	4611      	mov	r1, r2
 8008866:	461a      	mov	r2, r3
 8008868:	4603      	mov	r3, r0
 800886a:	70fb      	strb	r3, [r7, #3]
 800886c:	460b      	mov	r3, r1
 800886e:	70bb      	strb	r3, [r7, #2]
 8008870:	4613      	mov	r3, r2
 8008872:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008882:	78bb      	ldrb	r3, [r7, #2]
 8008884:	883a      	ldrh	r2, [r7, #0]
 8008886:	78f9      	ldrb	r1, [r7, #3]
 8008888:	f7fa f935 	bl	8002af6 <HAL_PCD_EP_Open>
 800888c:	4603      	mov	r3, r0
 800888e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	4618      	mov	r0, r3
 8008894:	f000 f96a 	bl	8008b6c <USBD_Get_USB_Status>
 8008898:	4603      	mov	r3, r0
 800889a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889c:	7bbb      	ldrb	r3, [r7, #14]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088c0:	78fa      	ldrb	r2, [r7, #3]
 80088c2:	4611      	mov	r1, r2
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fa f97e 	bl	8002bc6 <HAL_PCD_EP_Close>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f94b 	bl	8008b6c <USBD_Get_USB_Status>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088da:	7bbb      	ldrb	r3, [r7, #14]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f7fa fa56 	bl	8002db4 <HAL_PCD_EP_SetStall>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f92c 	bl	8008b6c <USBD_Get_USB_Status>
 8008914:	4603      	mov	r3, r0
 8008916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008918:	7bbb      	ldrb	r3, [r7, #14]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	460b      	mov	r3, r1
 800892c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f7fa fa9b 	bl	8002e7c <HAL_PCD_EP_ClrStall>
 8008946:	4603      	mov	r3, r0
 8008948:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	4618      	mov	r0, r3
 800894e:	f000 f90d 	bl	8008b6c <USBD_Get_USB_Status>
 8008952:	4603      	mov	r3, r0
 8008954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008956:	7bbb      	ldrb	r3, [r7, #14]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008972:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008978:	2b00      	cmp	r3, #0
 800897a:	da0b      	bge.n	8008994 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008982:	68f9      	ldr	r1, [r7, #12]
 8008984:	4613      	mov	r3, r2
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	440b      	add	r3, r1
 800898e:	333e      	adds	r3, #62	; 0x3e
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	e00b      	b.n	80089ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	4613      	mov	r3, r2
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	440b      	add	r3, r1
 80089a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80089aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089d2:	78fa      	ldrb	r2, [r7, #3]
 80089d4:	4611      	mov	r1, r2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fa f868 	bl	8002aac <HAL_PCD_SetAddress>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 f8c2 	bl	8008b6c <USBD_Get_USB_Status>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b086      	sub	sp, #24
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
 8008a02:	460b      	mov	r3, r1
 8008a04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a14:	7af9      	ldrb	r1, [r7, #11]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	f7fa f981 	bl	8002d20 <HAL_PCD_EP_Transmit>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 f8a1 	bl	8008b6c <USBD_Get_USB_Status>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	460b      	mov	r3, r1
 8008a46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a56:	7af9      	ldrb	r1, [r7, #11]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	f7fa f8fd 	bl	8002c5a <HAL_PCD_EP_Receive>
 8008a60:	4603      	mov	r3, r0
 8008a62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 f880 	bl	8008b6c <USBD_Get_USB_Status>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a70:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fa f92d 	bl	8002cf0 <HAL_PCD_EP_GetRxCount>
 8008a96:	4603      	mov	r3, r0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <HAL_PCDEx_LPM_Callback+0x18>
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d01f      	beq.n	8008af6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008ab6:	e03b      	b.n	8008b30 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d007      	beq.n	8008ad0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008ac0:	f7f7 fee4 	bl	800088c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ac4:	4b1c      	ldr	r3, [pc, #112]	; (8008b38 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <HAL_PCDEx_LPM_Callback+0x98>)
 8008aca:	f023 0306 	bic.w	r3, r3, #6
 8008ace:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	6812      	ldr	r2, [r2, #0]
 8008ade:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ae2:	f023 0301 	bic.w	r3, r3, #1
 8008ae6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe fbb2 	bl	8007258 <USBD_LL_Resume>
    break;
 8008af4:	e01c      	b.n	8008b30 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6812      	ldr	r2, [r2, #0]
 8008b04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b08:	f043 0301 	orr.w	r3, r3, #1
 8008b0c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe fb89 	bl	800722c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b22:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	4a04      	ldr	r2, [pc, #16]	; (8008b38 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b28:	f043 0306 	orr.w	r3, r3, #6
 8008b2c:	6113      	str	r3, [r2, #16]
    break;
 8008b2e:	bf00      	nop
}
 8008b30:	bf00      	nop
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	e000ed00 	.word	0xe000ed00

08008b3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b44:	4b03      	ldr	r3, [pc, #12]	; (8008b54 <USBD_static_malloc+0x18>)
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	20000438 	.word	0x20000438

08008b58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]

}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d817      	bhi.n	8008bb0 <USBD_Get_USB_Status+0x44>
 8008b80:	a201      	add	r2, pc, #4	; (adr r2, 8008b88 <USBD_Get_USB_Status+0x1c>)
 8008b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b86:	bf00      	nop
 8008b88:	08008b99 	.word	0x08008b99
 8008b8c:	08008b9f 	.word	0x08008b9f
 8008b90:	08008ba5 	.word	0x08008ba5
 8008b94:	08008bab 	.word	0x08008bab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9c:	e00b      	b.n	8008bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba2:	e008      	b.n	8008bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba8:	e005      	b.n	8008bb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008baa:	2303      	movs	r3, #3
 8008bac:	73fb      	strb	r3, [r7, #15]
    break;
 8008bae:	e002      	b.n	8008bb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb4:	bf00      	nop
  }
  return usb_status;
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <__errno>:
 8008bc4:	4b01      	ldr	r3, [pc, #4]	; (8008bcc <__errno+0x8>)
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	20000198 	.word	0x20000198

08008bd0 <__libc_init_array>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	4d0d      	ldr	r5, [pc, #52]	; (8008c08 <__libc_init_array+0x38>)
 8008bd4:	4c0d      	ldr	r4, [pc, #52]	; (8008c0c <__libc_init_array+0x3c>)
 8008bd6:	1b64      	subs	r4, r4, r5
 8008bd8:	10a4      	asrs	r4, r4, #2
 8008bda:	2600      	movs	r6, #0
 8008bdc:	42a6      	cmp	r6, r4
 8008bde:	d109      	bne.n	8008bf4 <__libc_init_array+0x24>
 8008be0:	4d0b      	ldr	r5, [pc, #44]	; (8008c10 <__libc_init_array+0x40>)
 8008be2:	4c0c      	ldr	r4, [pc, #48]	; (8008c14 <__libc_init_array+0x44>)
 8008be4:	f000 fc4e 	bl	8009484 <_init>
 8008be8:	1b64      	subs	r4, r4, r5
 8008bea:	10a4      	asrs	r4, r4, #2
 8008bec:	2600      	movs	r6, #0
 8008bee:	42a6      	cmp	r6, r4
 8008bf0:	d105      	bne.n	8008bfe <__libc_init_array+0x2e>
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf8:	4798      	blx	r3
 8008bfa:	3601      	adds	r6, #1
 8008bfc:	e7ee      	b.n	8008bdc <__libc_init_array+0xc>
 8008bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c02:	4798      	blx	r3
 8008c04:	3601      	adds	r6, #1
 8008c06:	e7f2      	b.n	8008bee <__libc_init_array+0x1e>
 8008c08:	0800963c 	.word	0x0800963c
 8008c0c:	0800963c 	.word	0x0800963c
 8008c10:	0800963c 	.word	0x0800963c
 8008c14:	08009640 	.word	0x08009640

08008c18 <memcpy>:
 8008c18:	440a      	add	r2, r1
 8008c1a:	4291      	cmp	r1, r2
 8008c1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c20:	d100      	bne.n	8008c24 <memcpy+0xc>
 8008c22:	4770      	bx	lr
 8008c24:	b510      	push	{r4, lr}
 8008c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c2e:	4291      	cmp	r1, r2
 8008c30:	d1f9      	bne.n	8008c26 <memcpy+0xe>
 8008c32:	bd10      	pop	{r4, pc}

08008c34 <memset>:
 8008c34:	4402      	add	r2, r0
 8008c36:	4603      	mov	r3, r0
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d100      	bne.n	8008c3e <memset+0xa>
 8008c3c:	4770      	bx	lr
 8008c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c42:	e7f9      	b.n	8008c38 <memset+0x4>

08008c44 <siprintf>:
 8008c44:	b40e      	push	{r1, r2, r3}
 8008c46:	b500      	push	{lr}
 8008c48:	b09c      	sub	sp, #112	; 0x70
 8008c4a:	ab1d      	add	r3, sp, #116	; 0x74
 8008c4c:	9002      	str	r0, [sp, #8]
 8008c4e:	9006      	str	r0, [sp, #24]
 8008c50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c54:	4809      	ldr	r0, [pc, #36]	; (8008c7c <siprintf+0x38>)
 8008c56:	9107      	str	r1, [sp, #28]
 8008c58:	9104      	str	r1, [sp, #16]
 8008c5a:	4909      	ldr	r1, [pc, #36]	; (8008c80 <siprintf+0x3c>)
 8008c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c60:	9105      	str	r1, [sp, #20]
 8008c62:	6800      	ldr	r0, [r0, #0]
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	a902      	add	r1, sp, #8
 8008c68:	f000 f868 	bl	8008d3c <_svfiprintf_r>
 8008c6c:	9b02      	ldr	r3, [sp, #8]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	b01c      	add	sp, #112	; 0x70
 8008c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c78:	b003      	add	sp, #12
 8008c7a:	4770      	bx	lr
 8008c7c:	20000198 	.word	0x20000198
 8008c80:	ffff0208 	.word	0xffff0208

08008c84 <__ssputs_r>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	688e      	ldr	r6, [r1, #8]
 8008c8a:	429e      	cmp	r6, r3
 8008c8c:	4682      	mov	sl, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	4690      	mov	r8, r2
 8008c92:	461f      	mov	r7, r3
 8008c94:	d838      	bhi.n	8008d08 <__ssputs_r+0x84>
 8008c96:	898a      	ldrh	r2, [r1, #12]
 8008c98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c9c:	d032      	beq.n	8008d04 <__ssputs_r+0x80>
 8008c9e:	6825      	ldr	r5, [r4, #0]
 8008ca0:	6909      	ldr	r1, [r1, #16]
 8008ca2:	eba5 0901 	sub.w	r9, r5, r1
 8008ca6:	6965      	ldr	r5, [r4, #20]
 8008ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	444b      	add	r3, r9
 8008cb4:	106d      	asrs	r5, r5, #1
 8008cb6:	429d      	cmp	r5, r3
 8008cb8:	bf38      	it	cc
 8008cba:	461d      	movcc	r5, r3
 8008cbc:	0553      	lsls	r3, r2, #21
 8008cbe:	d531      	bpl.n	8008d24 <__ssputs_r+0xa0>
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	f000 fb39 	bl	8009338 <_malloc_r>
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	b950      	cbnz	r0, 8008ce0 <__ssputs_r+0x5c>
 8008cca:	230c      	movs	r3, #12
 8008ccc:	f8ca 3000 	str.w	r3, [sl]
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce0:	6921      	ldr	r1, [r4, #16]
 8008ce2:	464a      	mov	r2, r9
 8008ce4:	f7ff ff98 	bl	8008c18 <memcpy>
 8008ce8:	89a3      	ldrh	r3, [r4, #12]
 8008cea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf2:	81a3      	strh	r3, [r4, #12]
 8008cf4:	6126      	str	r6, [r4, #16]
 8008cf6:	6165      	str	r5, [r4, #20]
 8008cf8:	444e      	add	r6, r9
 8008cfa:	eba5 0509 	sub.w	r5, r5, r9
 8008cfe:	6026      	str	r6, [r4, #0]
 8008d00:	60a5      	str	r5, [r4, #8]
 8008d02:	463e      	mov	r6, r7
 8008d04:	42be      	cmp	r6, r7
 8008d06:	d900      	bls.n	8008d0a <__ssputs_r+0x86>
 8008d08:	463e      	mov	r6, r7
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	6820      	ldr	r0, [r4, #0]
 8008d0e:	4641      	mov	r1, r8
 8008d10:	f000 faa8 	bl	8009264 <memmove>
 8008d14:	68a3      	ldr	r3, [r4, #8]
 8008d16:	6822      	ldr	r2, [r4, #0]
 8008d18:	1b9b      	subs	r3, r3, r6
 8008d1a:	4432      	add	r2, r6
 8008d1c:	60a3      	str	r3, [r4, #8]
 8008d1e:	6022      	str	r2, [r4, #0]
 8008d20:	2000      	movs	r0, #0
 8008d22:	e7db      	b.n	8008cdc <__ssputs_r+0x58>
 8008d24:	462a      	mov	r2, r5
 8008d26:	f000 fb61 	bl	80093ec <_realloc_r>
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d1e1      	bne.n	8008cf4 <__ssputs_r+0x70>
 8008d30:	6921      	ldr	r1, [r4, #16]
 8008d32:	4650      	mov	r0, sl
 8008d34:	f000 fab0 	bl	8009298 <_free_r>
 8008d38:	e7c7      	b.n	8008cca <__ssputs_r+0x46>
	...

08008d3c <_svfiprintf_r>:
 8008d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d40:	4698      	mov	r8, r3
 8008d42:	898b      	ldrh	r3, [r1, #12]
 8008d44:	061b      	lsls	r3, r3, #24
 8008d46:	b09d      	sub	sp, #116	; 0x74
 8008d48:	4607      	mov	r7, r0
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	4614      	mov	r4, r2
 8008d4e:	d50e      	bpl.n	8008d6e <_svfiprintf_r+0x32>
 8008d50:	690b      	ldr	r3, [r1, #16]
 8008d52:	b963      	cbnz	r3, 8008d6e <_svfiprintf_r+0x32>
 8008d54:	2140      	movs	r1, #64	; 0x40
 8008d56:	f000 faef 	bl	8009338 <_malloc_r>
 8008d5a:	6028      	str	r0, [r5, #0]
 8008d5c:	6128      	str	r0, [r5, #16]
 8008d5e:	b920      	cbnz	r0, 8008d6a <_svfiprintf_r+0x2e>
 8008d60:	230c      	movs	r3, #12
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d68:	e0d1      	b.n	8008f0e <_svfiprintf_r+0x1d2>
 8008d6a:	2340      	movs	r3, #64	; 0x40
 8008d6c:	616b      	str	r3, [r5, #20]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	9309      	str	r3, [sp, #36]	; 0x24
 8008d72:	2320      	movs	r3, #32
 8008d74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d78:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d7c:	2330      	movs	r3, #48	; 0x30
 8008d7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f28 <_svfiprintf_r+0x1ec>
 8008d82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d86:	f04f 0901 	mov.w	r9, #1
 8008d8a:	4623      	mov	r3, r4
 8008d8c:	469a      	mov	sl, r3
 8008d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d92:	b10a      	cbz	r2, 8008d98 <_svfiprintf_r+0x5c>
 8008d94:	2a25      	cmp	r2, #37	; 0x25
 8008d96:	d1f9      	bne.n	8008d8c <_svfiprintf_r+0x50>
 8008d98:	ebba 0b04 	subs.w	fp, sl, r4
 8008d9c:	d00b      	beq.n	8008db6 <_svfiprintf_r+0x7a>
 8008d9e:	465b      	mov	r3, fp
 8008da0:	4622      	mov	r2, r4
 8008da2:	4629      	mov	r1, r5
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff ff6d 	bl	8008c84 <__ssputs_r>
 8008daa:	3001      	adds	r0, #1
 8008dac:	f000 80aa 	beq.w	8008f04 <_svfiprintf_r+0x1c8>
 8008db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db2:	445a      	add	r2, fp
 8008db4:	9209      	str	r2, [sp, #36]	; 0x24
 8008db6:	f89a 3000 	ldrb.w	r3, [sl]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 80a2 	beq.w	8008f04 <_svfiprintf_r+0x1c8>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dca:	f10a 0a01 	add.w	sl, sl, #1
 8008dce:	9304      	str	r3, [sp, #16]
 8008dd0:	9307      	str	r3, [sp, #28]
 8008dd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dd6:	931a      	str	r3, [sp, #104]	; 0x68
 8008dd8:	4654      	mov	r4, sl
 8008dda:	2205      	movs	r2, #5
 8008ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de0:	4851      	ldr	r0, [pc, #324]	; (8008f28 <_svfiprintf_r+0x1ec>)
 8008de2:	f7f7 fa1d 	bl	8000220 <memchr>
 8008de6:	9a04      	ldr	r2, [sp, #16]
 8008de8:	b9d8      	cbnz	r0, 8008e22 <_svfiprintf_r+0xe6>
 8008dea:	06d0      	lsls	r0, r2, #27
 8008dec:	bf44      	itt	mi
 8008dee:	2320      	movmi	r3, #32
 8008df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df4:	0711      	lsls	r1, r2, #28
 8008df6:	bf44      	itt	mi
 8008df8:	232b      	movmi	r3, #43	; 0x2b
 8008dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008e02:	2b2a      	cmp	r3, #42	; 0x2a
 8008e04:	d015      	beq.n	8008e32 <_svfiprintf_r+0xf6>
 8008e06:	9a07      	ldr	r2, [sp, #28]
 8008e08:	4654      	mov	r4, sl
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	f04f 0c0a 	mov.w	ip, #10
 8008e10:	4621      	mov	r1, r4
 8008e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e16:	3b30      	subs	r3, #48	; 0x30
 8008e18:	2b09      	cmp	r3, #9
 8008e1a:	d94e      	bls.n	8008eba <_svfiprintf_r+0x17e>
 8008e1c:	b1b0      	cbz	r0, 8008e4c <_svfiprintf_r+0x110>
 8008e1e:	9207      	str	r2, [sp, #28]
 8008e20:	e014      	b.n	8008e4c <_svfiprintf_r+0x110>
 8008e22:	eba0 0308 	sub.w	r3, r0, r8
 8008e26:	fa09 f303 	lsl.w	r3, r9, r3
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	9304      	str	r3, [sp, #16]
 8008e2e:	46a2      	mov	sl, r4
 8008e30:	e7d2      	b.n	8008dd8 <_svfiprintf_r+0x9c>
 8008e32:	9b03      	ldr	r3, [sp, #12]
 8008e34:	1d19      	adds	r1, r3, #4
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	9103      	str	r1, [sp, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bfbb      	ittet	lt
 8008e3e:	425b      	neglt	r3, r3
 8008e40:	f042 0202 	orrlt.w	r2, r2, #2
 8008e44:	9307      	strge	r3, [sp, #28]
 8008e46:	9307      	strlt	r3, [sp, #28]
 8008e48:	bfb8      	it	lt
 8008e4a:	9204      	strlt	r2, [sp, #16]
 8008e4c:	7823      	ldrb	r3, [r4, #0]
 8008e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e50:	d10c      	bne.n	8008e6c <_svfiprintf_r+0x130>
 8008e52:	7863      	ldrb	r3, [r4, #1]
 8008e54:	2b2a      	cmp	r3, #42	; 0x2a
 8008e56:	d135      	bne.n	8008ec4 <_svfiprintf_r+0x188>
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	1d1a      	adds	r2, r3, #4
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	9203      	str	r2, [sp, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	bfb8      	it	lt
 8008e64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e68:	3402      	adds	r4, #2
 8008e6a:	9305      	str	r3, [sp, #20]
 8008e6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f38 <_svfiprintf_r+0x1fc>
 8008e70:	7821      	ldrb	r1, [r4, #0]
 8008e72:	2203      	movs	r2, #3
 8008e74:	4650      	mov	r0, sl
 8008e76:	f7f7 f9d3 	bl	8000220 <memchr>
 8008e7a:	b140      	cbz	r0, 8008e8e <_svfiprintf_r+0x152>
 8008e7c:	2340      	movs	r3, #64	; 0x40
 8008e7e:	eba0 000a 	sub.w	r0, r0, sl
 8008e82:	fa03 f000 	lsl.w	r0, r3, r0
 8008e86:	9b04      	ldr	r3, [sp, #16]
 8008e88:	4303      	orrs	r3, r0
 8008e8a:	3401      	adds	r4, #1
 8008e8c:	9304      	str	r3, [sp, #16]
 8008e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e92:	4826      	ldr	r0, [pc, #152]	; (8008f2c <_svfiprintf_r+0x1f0>)
 8008e94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e98:	2206      	movs	r2, #6
 8008e9a:	f7f7 f9c1 	bl	8000220 <memchr>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d038      	beq.n	8008f14 <_svfiprintf_r+0x1d8>
 8008ea2:	4b23      	ldr	r3, [pc, #140]	; (8008f30 <_svfiprintf_r+0x1f4>)
 8008ea4:	bb1b      	cbnz	r3, 8008eee <_svfiprintf_r+0x1b2>
 8008ea6:	9b03      	ldr	r3, [sp, #12]
 8008ea8:	3307      	adds	r3, #7
 8008eaa:	f023 0307 	bic.w	r3, r3, #7
 8008eae:	3308      	adds	r3, #8
 8008eb0:	9303      	str	r3, [sp, #12]
 8008eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb4:	4433      	add	r3, r6
 8008eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb8:	e767      	b.n	8008d8a <_svfiprintf_r+0x4e>
 8008eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	e7a5      	b.n	8008e10 <_svfiprintf_r+0xd4>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	3401      	adds	r4, #1
 8008ec8:	9305      	str	r3, [sp, #20]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	f04f 0c0a 	mov.w	ip, #10
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed6:	3a30      	subs	r2, #48	; 0x30
 8008ed8:	2a09      	cmp	r2, #9
 8008eda:	d903      	bls.n	8008ee4 <_svfiprintf_r+0x1a8>
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0c5      	beq.n	8008e6c <_svfiprintf_r+0x130>
 8008ee0:	9105      	str	r1, [sp, #20]
 8008ee2:	e7c3      	b.n	8008e6c <_svfiprintf_r+0x130>
 8008ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ee8:	4604      	mov	r4, r0
 8008eea:	2301      	movs	r3, #1
 8008eec:	e7f0      	b.n	8008ed0 <_svfiprintf_r+0x194>
 8008eee:	ab03      	add	r3, sp, #12
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	4b0f      	ldr	r3, [pc, #60]	; (8008f34 <_svfiprintf_r+0x1f8>)
 8008ef6:	a904      	add	r1, sp, #16
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f3af 8000 	nop.w
 8008efe:	1c42      	adds	r2, r0, #1
 8008f00:	4606      	mov	r6, r0
 8008f02:	d1d6      	bne.n	8008eb2 <_svfiprintf_r+0x176>
 8008f04:	89ab      	ldrh	r3, [r5, #12]
 8008f06:	065b      	lsls	r3, r3, #25
 8008f08:	f53f af2c 	bmi.w	8008d64 <_svfiprintf_r+0x28>
 8008f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f0e:	b01d      	add	sp, #116	; 0x74
 8008f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f14:	ab03      	add	r3, sp, #12
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	462a      	mov	r2, r5
 8008f1a:	4b06      	ldr	r3, [pc, #24]	; (8008f34 <_svfiprintf_r+0x1f8>)
 8008f1c:	a904      	add	r1, sp, #16
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f000 f87a 	bl	8009018 <_printf_i>
 8008f24:	e7eb      	b.n	8008efe <_svfiprintf_r+0x1c2>
 8008f26:	bf00      	nop
 8008f28:	08009600 	.word	0x08009600
 8008f2c:	0800960a 	.word	0x0800960a
 8008f30:	00000000 	.word	0x00000000
 8008f34:	08008c85 	.word	0x08008c85
 8008f38:	08009606 	.word	0x08009606

08008f3c <_printf_common>:
 8008f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	4616      	mov	r6, r2
 8008f42:	4699      	mov	r9, r3
 8008f44:	688a      	ldr	r2, [r1, #8]
 8008f46:	690b      	ldr	r3, [r1, #16]
 8008f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	bfb8      	it	lt
 8008f50:	4613      	movlt	r3, r2
 8008f52:	6033      	str	r3, [r6, #0]
 8008f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f58:	4607      	mov	r7, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	b10a      	cbz	r2, 8008f62 <_printf_common+0x26>
 8008f5e:	3301      	adds	r3, #1
 8008f60:	6033      	str	r3, [r6, #0]
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	0699      	lsls	r1, r3, #26
 8008f66:	bf42      	ittt	mi
 8008f68:	6833      	ldrmi	r3, [r6, #0]
 8008f6a:	3302      	addmi	r3, #2
 8008f6c:	6033      	strmi	r3, [r6, #0]
 8008f6e:	6825      	ldr	r5, [r4, #0]
 8008f70:	f015 0506 	ands.w	r5, r5, #6
 8008f74:	d106      	bne.n	8008f84 <_printf_common+0x48>
 8008f76:	f104 0a19 	add.w	sl, r4, #25
 8008f7a:	68e3      	ldr	r3, [r4, #12]
 8008f7c:	6832      	ldr	r2, [r6, #0]
 8008f7e:	1a9b      	subs	r3, r3, r2
 8008f80:	42ab      	cmp	r3, r5
 8008f82:	dc26      	bgt.n	8008fd2 <_printf_common+0x96>
 8008f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f88:	1e13      	subs	r3, r2, #0
 8008f8a:	6822      	ldr	r2, [r4, #0]
 8008f8c:	bf18      	it	ne
 8008f8e:	2301      	movne	r3, #1
 8008f90:	0692      	lsls	r2, r2, #26
 8008f92:	d42b      	bmi.n	8008fec <_printf_common+0xb0>
 8008f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f98:	4649      	mov	r1, r9
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	47c0      	blx	r8
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d01e      	beq.n	8008fe0 <_printf_common+0xa4>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	68e5      	ldr	r5, [r4, #12]
 8008fa6:	6832      	ldr	r2, [r6, #0]
 8008fa8:	f003 0306 	and.w	r3, r3, #6
 8008fac:	2b04      	cmp	r3, #4
 8008fae:	bf08      	it	eq
 8008fb0:	1aad      	subeq	r5, r5, r2
 8008fb2:	68a3      	ldr	r3, [r4, #8]
 8008fb4:	6922      	ldr	r2, [r4, #16]
 8008fb6:	bf0c      	ite	eq
 8008fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fbc:	2500      	movne	r5, #0
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	bfc4      	itt	gt
 8008fc2:	1a9b      	subgt	r3, r3, r2
 8008fc4:	18ed      	addgt	r5, r5, r3
 8008fc6:	2600      	movs	r6, #0
 8008fc8:	341a      	adds	r4, #26
 8008fca:	42b5      	cmp	r5, r6
 8008fcc:	d11a      	bne.n	8009004 <_printf_common+0xc8>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e008      	b.n	8008fe4 <_printf_common+0xa8>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	4638      	mov	r0, r7
 8008fda:	47c0      	blx	r8
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d103      	bne.n	8008fe8 <_printf_common+0xac>
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe8:	3501      	adds	r5, #1
 8008fea:	e7c6      	b.n	8008f7a <_printf_common+0x3e>
 8008fec:	18e1      	adds	r1, r4, r3
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	2030      	movs	r0, #48	; 0x30
 8008ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ff6:	4422      	add	r2, r4
 8008ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009000:	3302      	adds	r3, #2
 8009002:	e7c7      	b.n	8008f94 <_printf_common+0x58>
 8009004:	2301      	movs	r3, #1
 8009006:	4622      	mov	r2, r4
 8009008:	4649      	mov	r1, r9
 800900a:	4638      	mov	r0, r7
 800900c:	47c0      	blx	r8
 800900e:	3001      	adds	r0, #1
 8009010:	d0e6      	beq.n	8008fe0 <_printf_common+0xa4>
 8009012:	3601      	adds	r6, #1
 8009014:	e7d9      	b.n	8008fca <_printf_common+0x8e>
	...

08009018 <_printf_i>:
 8009018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800901c:	460c      	mov	r4, r1
 800901e:	4691      	mov	r9, r2
 8009020:	7e27      	ldrb	r7, [r4, #24]
 8009022:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009024:	2f78      	cmp	r7, #120	; 0x78
 8009026:	4680      	mov	r8, r0
 8009028:	469a      	mov	sl, r3
 800902a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800902e:	d807      	bhi.n	8009040 <_printf_i+0x28>
 8009030:	2f62      	cmp	r7, #98	; 0x62
 8009032:	d80a      	bhi.n	800904a <_printf_i+0x32>
 8009034:	2f00      	cmp	r7, #0
 8009036:	f000 80d8 	beq.w	80091ea <_printf_i+0x1d2>
 800903a:	2f58      	cmp	r7, #88	; 0x58
 800903c:	f000 80a3 	beq.w	8009186 <_printf_i+0x16e>
 8009040:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009048:	e03a      	b.n	80090c0 <_printf_i+0xa8>
 800904a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800904e:	2b15      	cmp	r3, #21
 8009050:	d8f6      	bhi.n	8009040 <_printf_i+0x28>
 8009052:	a001      	add	r0, pc, #4	; (adr r0, 8009058 <_printf_i+0x40>)
 8009054:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009058:	080090b1 	.word	0x080090b1
 800905c:	080090c5 	.word	0x080090c5
 8009060:	08009041 	.word	0x08009041
 8009064:	08009041 	.word	0x08009041
 8009068:	08009041 	.word	0x08009041
 800906c:	08009041 	.word	0x08009041
 8009070:	080090c5 	.word	0x080090c5
 8009074:	08009041 	.word	0x08009041
 8009078:	08009041 	.word	0x08009041
 800907c:	08009041 	.word	0x08009041
 8009080:	08009041 	.word	0x08009041
 8009084:	080091d1 	.word	0x080091d1
 8009088:	080090f5 	.word	0x080090f5
 800908c:	080091b3 	.word	0x080091b3
 8009090:	08009041 	.word	0x08009041
 8009094:	08009041 	.word	0x08009041
 8009098:	080091f3 	.word	0x080091f3
 800909c:	08009041 	.word	0x08009041
 80090a0:	080090f5 	.word	0x080090f5
 80090a4:	08009041 	.word	0x08009041
 80090a8:	08009041 	.word	0x08009041
 80090ac:	080091bb 	.word	0x080091bb
 80090b0:	680b      	ldr	r3, [r1, #0]
 80090b2:	1d1a      	adds	r2, r3, #4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	600a      	str	r2, [r1, #0]
 80090b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090c0:	2301      	movs	r3, #1
 80090c2:	e0a3      	b.n	800920c <_printf_i+0x1f4>
 80090c4:	6825      	ldr	r5, [r4, #0]
 80090c6:	6808      	ldr	r0, [r1, #0]
 80090c8:	062e      	lsls	r6, r5, #24
 80090ca:	f100 0304 	add.w	r3, r0, #4
 80090ce:	d50a      	bpl.n	80090e6 <_printf_i+0xce>
 80090d0:	6805      	ldr	r5, [r0, #0]
 80090d2:	600b      	str	r3, [r1, #0]
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	da03      	bge.n	80090e0 <_printf_i+0xc8>
 80090d8:	232d      	movs	r3, #45	; 0x2d
 80090da:	426d      	negs	r5, r5
 80090dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090e0:	485e      	ldr	r0, [pc, #376]	; (800925c <_printf_i+0x244>)
 80090e2:	230a      	movs	r3, #10
 80090e4:	e019      	b.n	800911a <_printf_i+0x102>
 80090e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090ea:	6805      	ldr	r5, [r0, #0]
 80090ec:	600b      	str	r3, [r1, #0]
 80090ee:	bf18      	it	ne
 80090f0:	b22d      	sxthne	r5, r5
 80090f2:	e7ef      	b.n	80090d4 <_printf_i+0xbc>
 80090f4:	680b      	ldr	r3, [r1, #0]
 80090f6:	6825      	ldr	r5, [r4, #0]
 80090f8:	1d18      	adds	r0, r3, #4
 80090fa:	6008      	str	r0, [r1, #0]
 80090fc:	0628      	lsls	r0, r5, #24
 80090fe:	d501      	bpl.n	8009104 <_printf_i+0xec>
 8009100:	681d      	ldr	r5, [r3, #0]
 8009102:	e002      	b.n	800910a <_printf_i+0xf2>
 8009104:	0669      	lsls	r1, r5, #25
 8009106:	d5fb      	bpl.n	8009100 <_printf_i+0xe8>
 8009108:	881d      	ldrh	r5, [r3, #0]
 800910a:	4854      	ldr	r0, [pc, #336]	; (800925c <_printf_i+0x244>)
 800910c:	2f6f      	cmp	r7, #111	; 0x6f
 800910e:	bf0c      	ite	eq
 8009110:	2308      	moveq	r3, #8
 8009112:	230a      	movne	r3, #10
 8009114:	2100      	movs	r1, #0
 8009116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800911a:	6866      	ldr	r6, [r4, #4]
 800911c:	60a6      	str	r6, [r4, #8]
 800911e:	2e00      	cmp	r6, #0
 8009120:	bfa2      	ittt	ge
 8009122:	6821      	ldrge	r1, [r4, #0]
 8009124:	f021 0104 	bicge.w	r1, r1, #4
 8009128:	6021      	strge	r1, [r4, #0]
 800912a:	b90d      	cbnz	r5, 8009130 <_printf_i+0x118>
 800912c:	2e00      	cmp	r6, #0
 800912e:	d04d      	beq.n	80091cc <_printf_i+0x1b4>
 8009130:	4616      	mov	r6, r2
 8009132:	fbb5 f1f3 	udiv	r1, r5, r3
 8009136:	fb03 5711 	mls	r7, r3, r1, r5
 800913a:	5dc7      	ldrb	r7, [r0, r7]
 800913c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009140:	462f      	mov	r7, r5
 8009142:	42bb      	cmp	r3, r7
 8009144:	460d      	mov	r5, r1
 8009146:	d9f4      	bls.n	8009132 <_printf_i+0x11a>
 8009148:	2b08      	cmp	r3, #8
 800914a:	d10b      	bne.n	8009164 <_printf_i+0x14c>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	07df      	lsls	r7, r3, #31
 8009150:	d508      	bpl.n	8009164 <_printf_i+0x14c>
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	6861      	ldr	r1, [r4, #4]
 8009156:	4299      	cmp	r1, r3
 8009158:	bfde      	ittt	le
 800915a:	2330      	movle	r3, #48	; 0x30
 800915c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009160:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009164:	1b92      	subs	r2, r2, r6
 8009166:	6122      	str	r2, [r4, #16]
 8009168:	f8cd a000 	str.w	sl, [sp]
 800916c:	464b      	mov	r3, r9
 800916e:	aa03      	add	r2, sp, #12
 8009170:	4621      	mov	r1, r4
 8009172:	4640      	mov	r0, r8
 8009174:	f7ff fee2 	bl	8008f3c <_printf_common>
 8009178:	3001      	adds	r0, #1
 800917a:	d14c      	bne.n	8009216 <_printf_i+0x1fe>
 800917c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009180:	b004      	add	sp, #16
 8009182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009186:	4835      	ldr	r0, [pc, #212]	; (800925c <_printf_i+0x244>)
 8009188:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	680e      	ldr	r6, [r1, #0]
 8009190:	061f      	lsls	r7, r3, #24
 8009192:	f856 5b04 	ldr.w	r5, [r6], #4
 8009196:	600e      	str	r6, [r1, #0]
 8009198:	d514      	bpl.n	80091c4 <_printf_i+0x1ac>
 800919a:	07d9      	lsls	r1, r3, #31
 800919c:	bf44      	itt	mi
 800919e:	f043 0320 	orrmi.w	r3, r3, #32
 80091a2:	6023      	strmi	r3, [r4, #0]
 80091a4:	b91d      	cbnz	r5, 80091ae <_printf_i+0x196>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	f023 0320 	bic.w	r3, r3, #32
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	2310      	movs	r3, #16
 80091b0:	e7b0      	b.n	8009114 <_printf_i+0xfc>
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	f043 0320 	orr.w	r3, r3, #32
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	2378      	movs	r3, #120	; 0x78
 80091bc:	4828      	ldr	r0, [pc, #160]	; (8009260 <_printf_i+0x248>)
 80091be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091c2:	e7e3      	b.n	800918c <_printf_i+0x174>
 80091c4:	065e      	lsls	r6, r3, #25
 80091c6:	bf48      	it	mi
 80091c8:	b2ad      	uxthmi	r5, r5
 80091ca:	e7e6      	b.n	800919a <_printf_i+0x182>
 80091cc:	4616      	mov	r6, r2
 80091ce:	e7bb      	b.n	8009148 <_printf_i+0x130>
 80091d0:	680b      	ldr	r3, [r1, #0]
 80091d2:	6826      	ldr	r6, [r4, #0]
 80091d4:	6960      	ldr	r0, [r4, #20]
 80091d6:	1d1d      	adds	r5, r3, #4
 80091d8:	600d      	str	r5, [r1, #0]
 80091da:	0635      	lsls	r5, r6, #24
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	d501      	bpl.n	80091e4 <_printf_i+0x1cc>
 80091e0:	6018      	str	r0, [r3, #0]
 80091e2:	e002      	b.n	80091ea <_printf_i+0x1d2>
 80091e4:	0671      	lsls	r1, r6, #25
 80091e6:	d5fb      	bpl.n	80091e0 <_printf_i+0x1c8>
 80091e8:	8018      	strh	r0, [r3, #0]
 80091ea:	2300      	movs	r3, #0
 80091ec:	6123      	str	r3, [r4, #16]
 80091ee:	4616      	mov	r6, r2
 80091f0:	e7ba      	b.n	8009168 <_printf_i+0x150>
 80091f2:	680b      	ldr	r3, [r1, #0]
 80091f4:	1d1a      	adds	r2, r3, #4
 80091f6:	600a      	str	r2, [r1, #0]
 80091f8:	681e      	ldr	r6, [r3, #0]
 80091fa:	6862      	ldr	r2, [r4, #4]
 80091fc:	2100      	movs	r1, #0
 80091fe:	4630      	mov	r0, r6
 8009200:	f7f7 f80e 	bl	8000220 <memchr>
 8009204:	b108      	cbz	r0, 800920a <_printf_i+0x1f2>
 8009206:	1b80      	subs	r0, r0, r6
 8009208:	6060      	str	r0, [r4, #4]
 800920a:	6863      	ldr	r3, [r4, #4]
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	2300      	movs	r3, #0
 8009210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009214:	e7a8      	b.n	8009168 <_printf_i+0x150>
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	4632      	mov	r2, r6
 800921a:	4649      	mov	r1, r9
 800921c:	4640      	mov	r0, r8
 800921e:	47d0      	blx	sl
 8009220:	3001      	adds	r0, #1
 8009222:	d0ab      	beq.n	800917c <_printf_i+0x164>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	079b      	lsls	r3, r3, #30
 8009228:	d413      	bmi.n	8009252 <_printf_i+0x23a>
 800922a:	68e0      	ldr	r0, [r4, #12]
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	4298      	cmp	r0, r3
 8009230:	bfb8      	it	lt
 8009232:	4618      	movlt	r0, r3
 8009234:	e7a4      	b.n	8009180 <_printf_i+0x168>
 8009236:	2301      	movs	r3, #1
 8009238:	4632      	mov	r2, r6
 800923a:	4649      	mov	r1, r9
 800923c:	4640      	mov	r0, r8
 800923e:	47d0      	blx	sl
 8009240:	3001      	adds	r0, #1
 8009242:	d09b      	beq.n	800917c <_printf_i+0x164>
 8009244:	3501      	adds	r5, #1
 8009246:	68e3      	ldr	r3, [r4, #12]
 8009248:	9903      	ldr	r1, [sp, #12]
 800924a:	1a5b      	subs	r3, r3, r1
 800924c:	42ab      	cmp	r3, r5
 800924e:	dcf2      	bgt.n	8009236 <_printf_i+0x21e>
 8009250:	e7eb      	b.n	800922a <_printf_i+0x212>
 8009252:	2500      	movs	r5, #0
 8009254:	f104 0619 	add.w	r6, r4, #25
 8009258:	e7f5      	b.n	8009246 <_printf_i+0x22e>
 800925a:	bf00      	nop
 800925c:	08009611 	.word	0x08009611
 8009260:	08009622 	.word	0x08009622

08009264 <memmove>:
 8009264:	4288      	cmp	r0, r1
 8009266:	b510      	push	{r4, lr}
 8009268:	eb01 0402 	add.w	r4, r1, r2
 800926c:	d902      	bls.n	8009274 <memmove+0x10>
 800926e:	4284      	cmp	r4, r0
 8009270:	4623      	mov	r3, r4
 8009272:	d807      	bhi.n	8009284 <memmove+0x20>
 8009274:	1e43      	subs	r3, r0, #1
 8009276:	42a1      	cmp	r1, r4
 8009278:	d008      	beq.n	800928c <memmove+0x28>
 800927a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800927e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009282:	e7f8      	b.n	8009276 <memmove+0x12>
 8009284:	4402      	add	r2, r0
 8009286:	4601      	mov	r1, r0
 8009288:	428a      	cmp	r2, r1
 800928a:	d100      	bne.n	800928e <memmove+0x2a>
 800928c:	bd10      	pop	{r4, pc}
 800928e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009296:	e7f7      	b.n	8009288 <memmove+0x24>

08009298 <_free_r>:
 8009298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800929a:	2900      	cmp	r1, #0
 800929c:	d048      	beq.n	8009330 <_free_r+0x98>
 800929e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092a2:	9001      	str	r0, [sp, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f1a1 0404 	sub.w	r4, r1, #4
 80092aa:	bfb8      	it	lt
 80092ac:	18e4      	addlt	r4, r4, r3
 80092ae:	f000 f8d3 	bl	8009458 <__malloc_lock>
 80092b2:	4a20      	ldr	r2, [pc, #128]	; (8009334 <_free_r+0x9c>)
 80092b4:	9801      	ldr	r0, [sp, #4]
 80092b6:	6813      	ldr	r3, [r2, #0]
 80092b8:	4615      	mov	r5, r2
 80092ba:	b933      	cbnz	r3, 80092ca <_free_r+0x32>
 80092bc:	6063      	str	r3, [r4, #4]
 80092be:	6014      	str	r4, [r2, #0]
 80092c0:	b003      	add	sp, #12
 80092c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092c6:	f000 b8cd 	b.w	8009464 <__malloc_unlock>
 80092ca:	42a3      	cmp	r3, r4
 80092cc:	d90b      	bls.n	80092e6 <_free_r+0x4e>
 80092ce:	6821      	ldr	r1, [r4, #0]
 80092d0:	1862      	adds	r2, r4, r1
 80092d2:	4293      	cmp	r3, r2
 80092d4:	bf04      	itt	eq
 80092d6:	681a      	ldreq	r2, [r3, #0]
 80092d8:	685b      	ldreq	r3, [r3, #4]
 80092da:	6063      	str	r3, [r4, #4]
 80092dc:	bf04      	itt	eq
 80092de:	1852      	addeq	r2, r2, r1
 80092e0:	6022      	streq	r2, [r4, #0]
 80092e2:	602c      	str	r4, [r5, #0]
 80092e4:	e7ec      	b.n	80092c0 <_free_r+0x28>
 80092e6:	461a      	mov	r2, r3
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	b10b      	cbz	r3, 80092f0 <_free_r+0x58>
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	d9fa      	bls.n	80092e6 <_free_r+0x4e>
 80092f0:	6811      	ldr	r1, [r2, #0]
 80092f2:	1855      	adds	r5, r2, r1
 80092f4:	42a5      	cmp	r5, r4
 80092f6:	d10b      	bne.n	8009310 <_free_r+0x78>
 80092f8:	6824      	ldr	r4, [r4, #0]
 80092fa:	4421      	add	r1, r4
 80092fc:	1854      	adds	r4, r2, r1
 80092fe:	42a3      	cmp	r3, r4
 8009300:	6011      	str	r1, [r2, #0]
 8009302:	d1dd      	bne.n	80092c0 <_free_r+0x28>
 8009304:	681c      	ldr	r4, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	6053      	str	r3, [r2, #4]
 800930a:	4421      	add	r1, r4
 800930c:	6011      	str	r1, [r2, #0]
 800930e:	e7d7      	b.n	80092c0 <_free_r+0x28>
 8009310:	d902      	bls.n	8009318 <_free_r+0x80>
 8009312:	230c      	movs	r3, #12
 8009314:	6003      	str	r3, [r0, #0]
 8009316:	e7d3      	b.n	80092c0 <_free_r+0x28>
 8009318:	6825      	ldr	r5, [r4, #0]
 800931a:	1961      	adds	r1, r4, r5
 800931c:	428b      	cmp	r3, r1
 800931e:	bf04      	itt	eq
 8009320:	6819      	ldreq	r1, [r3, #0]
 8009322:	685b      	ldreq	r3, [r3, #4]
 8009324:	6063      	str	r3, [r4, #4]
 8009326:	bf04      	itt	eq
 8009328:	1949      	addeq	r1, r1, r5
 800932a:	6021      	streq	r1, [r4, #0]
 800932c:	6054      	str	r4, [r2, #4]
 800932e:	e7c7      	b.n	80092c0 <_free_r+0x28>
 8009330:	b003      	add	sp, #12
 8009332:	bd30      	pop	{r4, r5, pc}
 8009334:	20000658 	.word	0x20000658

08009338 <_malloc_r>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	1ccd      	adds	r5, r1, #3
 800933c:	f025 0503 	bic.w	r5, r5, #3
 8009340:	3508      	adds	r5, #8
 8009342:	2d0c      	cmp	r5, #12
 8009344:	bf38      	it	cc
 8009346:	250c      	movcc	r5, #12
 8009348:	2d00      	cmp	r5, #0
 800934a:	4606      	mov	r6, r0
 800934c:	db01      	blt.n	8009352 <_malloc_r+0x1a>
 800934e:	42a9      	cmp	r1, r5
 8009350:	d903      	bls.n	800935a <_malloc_r+0x22>
 8009352:	230c      	movs	r3, #12
 8009354:	6033      	str	r3, [r6, #0]
 8009356:	2000      	movs	r0, #0
 8009358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800935a:	f000 f87d 	bl	8009458 <__malloc_lock>
 800935e:	4921      	ldr	r1, [pc, #132]	; (80093e4 <_malloc_r+0xac>)
 8009360:	680a      	ldr	r2, [r1, #0]
 8009362:	4614      	mov	r4, r2
 8009364:	b99c      	cbnz	r4, 800938e <_malloc_r+0x56>
 8009366:	4f20      	ldr	r7, [pc, #128]	; (80093e8 <_malloc_r+0xb0>)
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	b923      	cbnz	r3, 8009376 <_malloc_r+0x3e>
 800936c:	4621      	mov	r1, r4
 800936e:	4630      	mov	r0, r6
 8009370:	f000 f862 	bl	8009438 <_sbrk_r>
 8009374:	6038      	str	r0, [r7, #0]
 8009376:	4629      	mov	r1, r5
 8009378:	4630      	mov	r0, r6
 800937a:	f000 f85d 	bl	8009438 <_sbrk_r>
 800937e:	1c43      	adds	r3, r0, #1
 8009380:	d123      	bne.n	80093ca <_malloc_r+0x92>
 8009382:	230c      	movs	r3, #12
 8009384:	6033      	str	r3, [r6, #0]
 8009386:	4630      	mov	r0, r6
 8009388:	f000 f86c 	bl	8009464 <__malloc_unlock>
 800938c:	e7e3      	b.n	8009356 <_malloc_r+0x1e>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	1b5b      	subs	r3, r3, r5
 8009392:	d417      	bmi.n	80093c4 <_malloc_r+0x8c>
 8009394:	2b0b      	cmp	r3, #11
 8009396:	d903      	bls.n	80093a0 <_malloc_r+0x68>
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	441c      	add	r4, r3
 800939c:	6025      	str	r5, [r4, #0]
 800939e:	e004      	b.n	80093aa <_malloc_r+0x72>
 80093a0:	6863      	ldr	r3, [r4, #4]
 80093a2:	42a2      	cmp	r2, r4
 80093a4:	bf0c      	ite	eq
 80093a6:	600b      	streq	r3, [r1, #0]
 80093a8:	6053      	strne	r3, [r2, #4]
 80093aa:	4630      	mov	r0, r6
 80093ac:	f000 f85a 	bl	8009464 <__malloc_unlock>
 80093b0:	f104 000b 	add.w	r0, r4, #11
 80093b4:	1d23      	adds	r3, r4, #4
 80093b6:	f020 0007 	bic.w	r0, r0, #7
 80093ba:	1ac2      	subs	r2, r0, r3
 80093bc:	d0cc      	beq.n	8009358 <_malloc_r+0x20>
 80093be:	1a1b      	subs	r3, r3, r0
 80093c0:	50a3      	str	r3, [r4, r2]
 80093c2:	e7c9      	b.n	8009358 <_malloc_r+0x20>
 80093c4:	4622      	mov	r2, r4
 80093c6:	6864      	ldr	r4, [r4, #4]
 80093c8:	e7cc      	b.n	8009364 <_malloc_r+0x2c>
 80093ca:	1cc4      	adds	r4, r0, #3
 80093cc:	f024 0403 	bic.w	r4, r4, #3
 80093d0:	42a0      	cmp	r0, r4
 80093d2:	d0e3      	beq.n	800939c <_malloc_r+0x64>
 80093d4:	1a21      	subs	r1, r4, r0
 80093d6:	4630      	mov	r0, r6
 80093d8:	f000 f82e 	bl	8009438 <_sbrk_r>
 80093dc:	3001      	adds	r0, #1
 80093de:	d1dd      	bne.n	800939c <_malloc_r+0x64>
 80093e0:	e7cf      	b.n	8009382 <_malloc_r+0x4a>
 80093e2:	bf00      	nop
 80093e4:	20000658 	.word	0x20000658
 80093e8:	2000065c 	.word	0x2000065c

080093ec <_realloc_r>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	4607      	mov	r7, r0
 80093f0:	4614      	mov	r4, r2
 80093f2:	460e      	mov	r6, r1
 80093f4:	b921      	cbnz	r1, 8009400 <_realloc_r+0x14>
 80093f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093fa:	4611      	mov	r1, r2
 80093fc:	f7ff bf9c 	b.w	8009338 <_malloc_r>
 8009400:	b922      	cbnz	r2, 800940c <_realloc_r+0x20>
 8009402:	f7ff ff49 	bl	8009298 <_free_r>
 8009406:	4625      	mov	r5, r4
 8009408:	4628      	mov	r0, r5
 800940a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800940c:	f000 f830 	bl	8009470 <_malloc_usable_size_r>
 8009410:	42a0      	cmp	r0, r4
 8009412:	d20f      	bcs.n	8009434 <_realloc_r+0x48>
 8009414:	4621      	mov	r1, r4
 8009416:	4638      	mov	r0, r7
 8009418:	f7ff ff8e 	bl	8009338 <_malloc_r>
 800941c:	4605      	mov	r5, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	d0f2      	beq.n	8009408 <_realloc_r+0x1c>
 8009422:	4631      	mov	r1, r6
 8009424:	4622      	mov	r2, r4
 8009426:	f7ff fbf7 	bl	8008c18 <memcpy>
 800942a:	4631      	mov	r1, r6
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff ff33 	bl	8009298 <_free_r>
 8009432:	e7e9      	b.n	8009408 <_realloc_r+0x1c>
 8009434:	4635      	mov	r5, r6
 8009436:	e7e7      	b.n	8009408 <_realloc_r+0x1c>

08009438 <_sbrk_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d06      	ldr	r5, [pc, #24]	; (8009454 <_sbrk_r+0x1c>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	602b      	str	r3, [r5, #0]
 8009444:	f7f7 ffd4 	bl	80013f0 <_sbrk>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_sbrk_r+0x1a>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_sbrk_r+0x1a>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	20002148 	.word	0x20002148

08009458 <__malloc_lock>:
 8009458:	4801      	ldr	r0, [pc, #4]	; (8009460 <__malloc_lock+0x8>)
 800945a:	f000 b811 	b.w	8009480 <__retarget_lock_acquire_recursive>
 800945e:	bf00      	nop
 8009460:	20002150 	.word	0x20002150

08009464 <__malloc_unlock>:
 8009464:	4801      	ldr	r0, [pc, #4]	; (800946c <__malloc_unlock+0x8>)
 8009466:	f000 b80c 	b.w	8009482 <__retarget_lock_release_recursive>
 800946a:	bf00      	nop
 800946c:	20002150 	.word	0x20002150

08009470 <_malloc_usable_size_r>:
 8009470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009474:	1f18      	subs	r0, r3, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfbc      	itt	lt
 800947a:	580b      	ldrlt	r3, [r1, r0]
 800947c:	18c0      	addlt	r0, r0, r3
 800947e:	4770      	bx	lr

08009480 <__retarget_lock_acquire_recursive>:
 8009480:	4770      	bx	lr

08009482 <__retarget_lock_release_recursive>:
 8009482:	4770      	bx	lr

08009484 <_init>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	bf00      	nop
 8009488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948a:	bc08      	pop	{r3}
 800948c:	469e      	mov	lr, r3
 800948e:	4770      	bx	lr

08009490 <_fini>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	bf00      	nop
 8009494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009496:	bc08      	pop	{r3}
 8009498:	469e      	mov	lr, r3
 800949a:	4770      	bx	lr
