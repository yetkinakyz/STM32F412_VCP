
f412_vcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000929c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800946c  0800946c  0001946c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009604  08009604  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800960c  0800960c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800960c  0800960c  0001960c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009610  08009610  00019610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f5c  200001fc  08009810  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002158  08009810  00022158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d860  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e76  00000000  00000000  0003da8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00041908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00042ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002316a  00000000  00000000  00043b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019642  00000000  00000000  00066cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1613  00000000  00000000  00080314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  0014197c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009454 	.word	0x08009454

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08009454 	.word	0x08009454

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <GPIO_FUNC>:
GPIO_TypeDef* GPIO_PORT_SELECT(unsigned char peripheralGROUP);
uint16_t GPIO_PIN_SELECT(unsigned char peripheralID);

/* Functions -----------------------------------------------------------------*/
void GPIO_FUNC(unsigned char peripheralGROUP, unsigned char peripheralID, unsigned char PROCESS, unsigned char COMMAND)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b089      	sub	sp, #36	; 0x24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4604      	mov	r4, r0
 80005c0:	4608      	mov	r0, r1
 80005c2:	4611      	mov	r1, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	4623      	mov	r3, r4
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	4603      	mov	r3, r0
 80005cc:	71bb      	strb	r3, [r7, #6]
 80005ce:	460b      	mov	r3, r1
 80005d0:	717b      	strb	r3, [r7, #5]
 80005d2:	4613      	mov	r3, r2
 80005d4:	713b      	strb	r3, [r7, #4]
	//Read GPIO
	if(PROCESS == 0x11)
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	2b11      	cmp	r3, #17
 80005da:	d126      	bne.n	800062a <GPIO_FUNC+0x72>
	{
		GPIO_TypeDef* port = GPIO_PORT_SELECT(peripheralGROUP);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f884 	bl	80006ec <GPIO_PORT_SELECT>
 80005e4:	61f8      	str	r0, [r7, #28]
		uint16_t pin = GPIO_PIN_SELECT(peripheralID);
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f8c1 	bl	8000770 <GPIO_PIN_SELECT>
 80005ee:	4603      	mov	r3, r0
 80005f0:	837b      	strh	r3, [r7, #26]
		int result = HAL_GPIO_ReadPin(port, pin);
 80005f2:	8b7b      	ldrh	r3, [r7, #26]
 80005f4:	4619      	mov	r1, r3
 80005f6:	69f8      	ldr	r0, [r7, #28]
 80005f8:	f001 fb7a 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	617b      	str	r3, [r7, #20]
		char GPIO_STATE[9];

		sprintf(GPIO_STATE, "GPIO state is %d.\n", result);
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	4933      	ldr	r1, [pc, #204]	; (80006d4 <GPIO_FUNC+0x11c>)
 8000608:	4618      	mov	r0, r3
 800060a:	f008 fb03 	bl	8008c14 <siprintf>
		CDC_Transmit_FS((uint8_t *)GPIO_STATE, strlen(GPIO_STATE));
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fdfc 	bl	8000210 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f007 fdf2 	bl	800820c <CDC_Transmit_FS>

	else
	{
		CDC_Transmit_FS((uint8_t *)"Error: Invalid GPIO process.\n", strlen("Error: Invalid GPIO process.\n"));
	}
}
 8000628:	e04f      	b.n	80006ca <GPIO_FUNC+0x112>
	else if(PROCESS == 0x22)
 800062a:	797b      	ldrb	r3, [r7, #5]
 800062c:	2b22      	cmp	r3, #34	; 0x22
 800062e:	d132      	bne.n	8000696 <GPIO_FUNC+0xde>
		if(COMMAND == 0x00)
 8000630:	793b      	ldrb	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d113      	bne.n	800065e <GPIO_FUNC+0xa6>
			CDC_Transmit_FS((uint8_t *)"Reset.\n", strlen("Reset.\n"));
 8000636:	2107      	movs	r1, #7
 8000638:	4827      	ldr	r0, [pc, #156]	; (80006d8 <GPIO_FUNC+0x120>)
 800063a:	f007 fde7 	bl	800820c <CDC_Transmit_FS>
			HAL_GPIO_WritePin(GPIO_PORT_SELECT(peripheralGROUP), GPIO_PIN_SELECT(peripheralID), GPIO_PIN_RESET);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f853 	bl	80006ec <GPIO_PORT_SELECT>
 8000646:	4604      	mov	r4, r0
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f890 	bl	8000770 <GPIO_PIN_SELECT>
 8000650:	4603      	mov	r3, r0
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	4620      	mov	r0, r4
 8000658:	f001 fb62 	bl	8001d20 <HAL_GPIO_WritePin>
}
 800065c:	e035      	b.n	80006ca <GPIO_FUNC+0x112>
		else if(COMMAND == 0x01)
 800065e:	793b      	ldrb	r3, [r7, #4]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d113      	bne.n	800068c <GPIO_FUNC+0xd4>
			CDC_Transmit_FS((uint8_t *)"Set.\n", strlen("Set.\n"));
 8000664:	2105      	movs	r1, #5
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <GPIO_FUNC+0x124>)
 8000668:	f007 fdd0 	bl	800820c <CDC_Transmit_FS>
			HAL_GPIO_WritePin(GPIO_PORT_SELECT(peripheralGROUP), GPIO_PIN_SELECT(peripheralID), GPIO_PIN_SET);
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f83c 	bl	80006ec <GPIO_PORT_SELECT>
 8000674:	4604      	mov	r4, r0
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f879 	bl	8000770 <GPIO_PIN_SELECT>
 800067e:	4603      	mov	r3, r0
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	4620      	mov	r0, r4
 8000686:	f001 fb4b 	bl	8001d20 <HAL_GPIO_WritePin>
}
 800068a:	e01e      	b.n	80006ca <GPIO_FUNC+0x112>
			CDC_Transmit_FS((uint8_t *)"Error: Invalid 'GPIO Write' command.\n", strlen("Error: Invalid 'GPIO Write' command.\n"));
 800068c:	2125      	movs	r1, #37	; 0x25
 800068e:	4814      	ldr	r0, [pc, #80]	; (80006e0 <GPIO_FUNC+0x128>)
 8000690:	f007 fdbc 	bl	800820c <CDC_Transmit_FS>
}
 8000694:	e019      	b.n	80006ca <GPIO_FUNC+0x112>
	else if(PROCESS == 0x33)
 8000696:	797b      	ldrb	r3, [r7, #5]
 8000698:	2b33      	cmp	r3, #51	; 0x33
 800069a:	d112      	bne.n	80006c2 <GPIO_FUNC+0x10a>
		CDC_Transmit_FS((uint8_t *)"Toggled.\n", strlen("Toggled.\n"));
 800069c:	2109      	movs	r1, #9
 800069e:	4811      	ldr	r0, [pc, #68]	; (80006e4 <GPIO_FUNC+0x12c>)
 80006a0:	f007 fdb4 	bl	800820c <CDC_Transmit_FS>
		HAL_GPIO_TogglePin(GPIO_PORT_SELECT(peripheralGROUP), GPIO_PIN_SELECT(peripheralID));
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f820 	bl	80006ec <GPIO_PORT_SELECT>
 80006ac:	4604      	mov	r4, r0
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f85d 	bl	8000770 <GPIO_PIN_SELECT>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4619      	mov	r1, r3
 80006ba:	4620      	mov	r0, r4
 80006bc:	f001 fb49 	bl	8001d52 <HAL_GPIO_TogglePin>
}
 80006c0:	e003      	b.n	80006ca <GPIO_FUNC+0x112>
		CDC_Transmit_FS((uint8_t *)"Error: Invalid GPIO process.\n", strlen("Error: Invalid GPIO process.\n"));
 80006c2:	211d      	movs	r1, #29
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <GPIO_FUNC+0x130>)
 80006c6:	f007 fda1 	bl	800820c <CDC_Transmit_FS>
}
 80006ca:	bf00      	nop
 80006cc:	3724      	adds	r7, #36	; 0x24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd90      	pop	{r4, r7, pc}
 80006d2:	bf00      	nop
 80006d4:	0800946c 	.word	0x0800946c
 80006d8:	08009480 	.word	0x08009480
 80006dc:	08009488 	.word	0x08009488
 80006e0:	08009490 	.word	0x08009490
 80006e4:	080094b8 	.word	0x080094b8
 80006e8:	080094c4 	.word	0x080094c4

080006ec <GPIO_PORT_SELECT>:

/* GPIO PORT SELECTOR */
GPIO_TypeDef* GPIO_PORT_SELECT(unsigned char peripheralGROUP)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
		 if (peripheralGROUP == 0x10)	{return GPIOA;}
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b10      	cmp	r3, #16
 80006fa:	d101      	bne.n	8000700 <GPIO_PORT_SELECT+0x14>
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <GPIO_PORT_SELECT+0x64>)
 80006fe:	e022      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x11)	{return GPIOB;}
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b11      	cmp	r3, #17
 8000704:	d101      	bne.n	800070a <GPIO_PORT_SELECT+0x1e>
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <GPIO_PORT_SELECT+0x68>)
 8000708:	e01d      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x12)	{return GPIOC;}
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b12      	cmp	r3, #18
 800070e:	d101      	bne.n	8000714 <GPIO_PORT_SELECT+0x28>
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <GPIO_PORT_SELECT+0x6c>)
 8000712:	e018      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x13)	{return GPIOD;}
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b13      	cmp	r3, #19
 8000718:	d101      	bne.n	800071e <GPIO_PORT_SELECT+0x32>
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <GPIO_PORT_SELECT+0x70>)
 800071c:	e013      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x14)	{return GPIOE;}
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b14      	cmp	r3, #20
 8000722:	d101      	bne.n	8000728 <GPIO_PORT_SELECT+0x3c>
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <GPIO_PORT_SELECT+0x74>)
 8000726:	e00e      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x15)	{return GPIOF;}
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b15      	cmp	r3, #21
 800072c:	d101      	bne.n	8000732 <GPIO_PORT_SELECT+0x46>
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <GPIO_PORT_SELECT+0x78>)
 8000730:	e009      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else if (peripheralGROUP == 0x16)	{return GPIOG;}
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b16      	cmp	r3, #22
 8000736:	d101      	bne.n	800073c <GPIO_PORT_SELECT+0x50>
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <GPIO_PORT_SELECT+0x7c>)
 800073a:	e004      	b.n	8000746 <GPIO_PORT_SELECT+0x5a>

	else //Error!
	{
		CDC_Transmit_FS((uint8_t *)"Error: Invalid 'GPIO Port' selection.\n", strlen("Error: Invalid 'GPIO Port' selection.\n"));
 800073c:	2126      	movs	r1, #38	; 0x26
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <GPIO_PORT_SELECT+0x80>)
 8000740:	f007 fd64 	bl	800820c <CDC_Transmit_FS>
	}

	return 0;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020000 	.word	0x40020000
 8000754:	40020400 	.word	0x40020400
 8000758:	40020800 	.word	0x40020800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40021000 	.word	0x40021000
 8000764:	40021400 	.word	0x40021400
 8000768:	40021800 	.word	0x40021800
 800076c:	080094e4 	.word	0x080094e4

08000770 <GPIO_PIN_SELECT>:

/* GPIO PIN SELECTOR */
uint16_t GPIO_PIN_SELECT(unsigned char peripheralID)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
		 if (peripheralID == 0x00)	{return GPIO_PIN_0;}
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <GPIO_PIN_SELECT+0x14>
 8000780:	2301      	movs	r3, #1
 8000782:	e05d      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x01)	{return GPIO_PIN_1;}
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d101      	bne.n	800078e <GPIO_PIN_SELECT+0x1e>
 800078a:	2302      	movs	r3, #2
 800078c:	e058      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x02)	{return GPIO_PIN_2;}
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d101      	bne.n	8000798 <GPIO_PIN_SELECT+0x28>
 8000794:	2304      	movs	r3, #4
 8000796:	e053      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x03)	{return GPIO_PIN_3;}
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d101      	bne.n	80007a2 <GPIO_PIN_SELECT+0x32>
 800079e:	2308      	movs	r3, #8
 80007a0:	e04e      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x04)	{return GPIO_PIN_4;}
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d101      	bne.n	80007ac <GPIO_PIN_SELECT+0x3c>
 80007a8:	2310      	movs	r3, #16
 80007aa:	e049      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x05)	{return GPIO_PIN_5;}
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b05      	cmp	r3, #5
 80007b0:	d101      	bne.n	80007b6 <GPIO_PIN_SELECT+0x46>
 80007b2:	2320      	movs	r3, #32
 80007b4:	e044      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x06)	{return GPIO_PIN_6;}
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b06      	cmp	r3, #6
 80007ba:	d101      	bne.n	80007c0 <GPIO_PIN_SELECT+0x50>
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	e03f      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x07)	{return GPIO_PIN_7;}
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b07      	cmp	r3, #7
 80007c4:	d101      	bne.n	80007ca <GPIO_PIN_SELECT+0x5a>
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	e03a      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x08)	{return GPIO_PIN_8;}
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b08      	cmp	r3, #8
 80007ce:	d102      	bne.n	80007d6 <GPIO_PIN_SELECT+0x66>
 80007d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d4:	e034      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x09)	{return GPIO_PIN_9;}
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b09      	cmp	r3, #9
 80007da:	d102      	bne.n	80007e2 <GPIO_PIN_SELECT+0x72>
 80007dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e0:	e02e      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x10)	{return GPIO_PIN_10;}
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b10      	cmp	r3, #16
 80007e6:	d102      	bne.n	80007ee <GPIO_PIN_SELECT+0x7e>
 80007e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ec:	e028      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x11)	{return GPIO_PIN_11;}
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b11      	cmp	r3, #17
 80007f2:	d102      	bne.n	80007fa <GPIO_PIN_SELECT+0x8a>
 80007f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007f8:	e022      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x12)	{return GPIO_PIN_12;}
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b12      	cmp	r3, #18
 80007fe:	d102      	bne.n	8000806 <GPIO_PIN_SELECT+0x96>
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	e01c      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x13)	{return GPIO_PIN_13;}
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b13      	cmp	r3, #19
 800080a:	d102      	bne.n	8000812 <GPIO_PIN_SELECT+0xa2>
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000810:	e016      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x14)	{return GPIO_PIN_14;}
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b14      	cmp	r3, #20
 8000816:	d102      	bne.n	800081e <GPIO_PIN_SELECT+0xae>
 8000818:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800081c:	e010      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x15)	{return GPIO_PIN_15;}
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b15      	cmp	r3, #21
 8000822:	d102      	bne.n	800082a <GPIO_PIN_SELECT+0xba>
 8000824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000828:	e00a      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else if (peripheralID == 0x16)	{return GPIO_PIN_All;}
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b16      	cmp	r3, #22
 800082e:	d102      	bne.n	8000836 <GPIO_PIN_SELECT+0xc6>
 8000830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000834:	e004      	b.n	8000840 <GPIO_PIN_SELECT+0xd0>

	else //Error!
	{
		CDC_Transmit_FS((uint8_t *)"Error: Invalid 'GPIO Pin' selection.\n", strlen("Error: Invalid 'GPIO Pin' selection.\n"));
 8000836:	2125      	movs	r1, #37	; 0x25
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <GPIO_PIN_SELECT+0xd8>)
 800083a:	f007 fce7 	bl	800820c <CDC_Transmit_FS>
	}

	return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	0800950c 	.word	0x0800950c

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 fe80 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f81c 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 f9d2 	bl	8000c00 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800085c:	f007 fc14 	bl	8008088 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000860:	f000 f89c 	bl	800099c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000864:	f000 f8c8 	bl	80009f8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000868:	f000 f8f4 	bl	8000a54 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800086c:	f000 f920 	bl	8000ab0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000870:	f000 f948 	bl	8000b04 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000874:	f000 f970 	bl	8000b58 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000878:	f000 f998 	bl	8000bac <MX_USART6_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart1, usart_buffer, sizeof(usart_buffer));
 800087c:	2216      	movs	r2, #22
 800087e:	4902      	ldr	r1, [pc, #8]	; (8000888 <main+0x3c>)
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <main+0x40>)
 8000882:	f003 fcea 	bl	800425a <HAL_UART_Receive_IT>
 8000886:	e7f9      	b.n	800087c <main+0x30>
 8000888:	20000418 	.word	0x20000418
 800088c:	200007a0 	.word	0x200007a0

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0a4      	sub	sp, #144	; 0x90
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800089a:	2234      	movs	r2, #52	; 0x34
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f008 f9b0 	bl	8008c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	223c      	movs	r2, #60	; 0x3c
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f008 f9a1 	bl	8008c04 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b33      	ldr	r3, [pc, #204]	; (8000994 <SystemClock_Config+0x104>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a32      	ldr	r2, [pc, #200]	; (8000994 <SystemClock_Config+0x104>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b30      	ldr	r3, [pc, #192]	; (8000994 <SystemClock_Config+0x104>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <SystemClock_Config+0x108>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a2c      	ldr	r2, [pc, #176]	; (8000998 <SystemClock_Config+0x108>)
 80008e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <SystemClock_Config+0x108>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000902:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000904:	2302      	movs	r3, #2
 8000906:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000908:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 800090e:	2304      	movs	r3, #4
 8000910:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000912:	2348      	movs	r3, #72	; 0x48
 8000914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800091e:	2303      	movs	r3, #3
 8000920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000924:	2302      	movs	r3, #2
 8000926:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800092e:	4618      	mov	r0, r3
 8000930:	f003 f930 	bl	8003b94 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800093a:	f000 fac5 	bl	8000ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2302      	movs	r3, #2
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000954:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000958:	2102      	movs	r1, #2
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fd28 	bl	80033b0 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000966:	f000 faaf 	bl	8000ec8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800096a:	2320      	movs	r3, #32
 800096c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4618      	mov	r0, r3
 8000978:	f002 ff3e 	bl	80037f8 <HAL_RCCEx_PeriphCLKConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000982:	f000 faa1 	bl	8000ec8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000986:	f002 fdf9 	bl	800357c <HAL_RCC_EnableCSS>
}
 800098a:	bf00      	nop
 800098c:	3790      	adds	r7, #144	; 0x90
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_I2C1_Init+0x50>)
 80009a2:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <MX_I2C1_Init+0x54>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_I2C1_Init+0x50>)
 80009a8:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <MX_I2C1_Init+0x58>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_I2C1_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_I2C1_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_I2C1_Init+0x50>)
 80009ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_I2C1_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_I2C1_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <MX_I2C1_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_I2C1_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_I2C1_Init+0x50>)
 80009da:	f001 f9d5 	bl	8001d88 <HAL_I2C_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e4:	f000 fa70 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200006f8 	.word	0x200006f8
 80009f0:	40005400 	.word	0x40005400
 80009f4:	000186a0 	.word	0x000186a0

080009f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C2_Init+0x50>)
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <MX_I2C2_Init+0x54>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C2_Init+0x50>)
 8000a04:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <MX_I2C2_Init+0x58>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C2_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_I2C2_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_I2C2_Init+0x50>)
 8000a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_I2C2_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_I2C2_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_I2C2_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_I2C2_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_I2C2_Init+0x50>)
 8000a36:	f001 f9a7 	bl	8001d88 <HAL_I2C_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a40:	f000 fa42 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000074c 	.word	0x2000074c
 8000a4c:	40005800 	.word	0x40005800
 8000a50:	000186a0 	.word	0x000186a0

08000a54 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_I2C3_Init+0x50>)
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <MX_I2C3_Init+0x54>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_I2C3_Init+0x50>)
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MX_I2C3_Init+0x58>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_I2C3_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_I2C3_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_I2C3_Init+0x50>)
 8000a72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a76:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_I2C3_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_I2C3_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_I2C3_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_I2C3_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_I2C3_Init+0x50>)
 8000a92:	f001 f979 	bl	8001d88 <HAL_I2C_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a9c:	f000 fa14 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000660 	.word	0x20000660
 8000aa8:	40005c00 	.word	0x40005c00
 8000aac:	000186a0 	.word	0x000186a0

08000ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_USART1_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_USART1_UART_Init+0x4c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART1_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART1_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ae8:	f003 fad8 	bl	800409c <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f9e9 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200007a0 	.word	0x200007a0
 8000b00:	40011000 	.word	0x40011000

08000b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_USART2_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f003 faae 	bl	800409c <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f9bf 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000828 	.word	0x20000828
 8000b54:	40004400 	.word	0x40004400

08000b58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART3_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b90:	f003 fa84 	bl	800409c <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f995 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200006b4 	.word	0x200006b4
 8000ba8:	40004800 	.word	0x40004800

08000bac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_USART6_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000be4:	f003 fa5a 	bl	800409c <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f000 f96b 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200007e4 	.word	0x200007e4
 8000bfc:	40011400 	.word	0x40011400

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	4b34      	ldr	r3, [pc, #208]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a33      	ldr	r2, [pc, #204]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c20:	f043 0310 	orr.w	r3, r3, #16
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b31      	ldr	r3, [pc, #196]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a2c      	ldr	r2, [pc, #176]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a25      	ldr	r2, [pc, #148]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c58:	f043 0320 	orr.w	r3, r3, #32
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0320 	and.w	r3, r3, #32
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_GPIO_Init+0xec>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_GPIO_Init+0xec>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <MX_GPIO_Init+0xec>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_GPIO_Init+0xec>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	210f      	movs	r1, #15
 8000cc2:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <MX_GPIO_Init+0xf0>)
 8000cc4:	f001 f82c 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <MX_GPIO_Init+0xf0>)
 8000ce0:	f000 fe72 	bl	80019c8 <HAL_GPIO_Init>

}
 8000ce4:	bf00      	nop
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

/* USART receive callback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	if(peripheralGROUP == 0x20)
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_UART_RxCpltCallback+0x70>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b20      	cmp	r3, #32
 8000d02:	d12a      	bne.n	8000d5a <HAL_UART_RxCpltCallback+0x66>
	{
		if(peripheralID == 0x01)
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_UART_RxCpltCallback+0x74>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d105      	bne.n	8000d18 <HAL_UART_RxCpltCallback+0x24>
		{
			HAL_UART_Receive_IT(&huart1, usart_buffer, sizeof(usart_buffer));
 8000d0c:	2216      	movs	r2, #22
 8000d0e:	4917      	ldr	r1, [pc, #92]	; (8000d6c <HAL_UART_RxCpltCallback+0x78>)
 8000d10:	4817      	ldr	r0, [pc, #92]	; (8000d70 <HAL_UART_RxCpltCallback+0x7c>)
 8000d12:	f003 faa2 	bl	800425a <HAL_UART_Receive_IT>
 8000d16:	e01c      	b.n	8000d52 <HAL_UART_RxCpltCallback+0x5e>
		}

		else if(peripheralID == 0x02)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_UART_RxCpltCallback+0x74>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d105      	bne.n	8000d2c <HAL_UART_RxCpltCallback+0x38>
		{
			HAL_UART_Receive_IT(&huart2, usart_buffer, sizeof(usart_buffer));
 8000d20:	2216      	movs	r2, #22
 8000d22:	4912      	ldr	r1, [pc, #72]	; (8000d6c <HAL_UART_RxCpltCallback+0x78>)
 8000d24:	4813      	ldr	r0, [pc, #76]	; (8000d74 <HAL_UART_RxCpltCallback+0x80>)
 8000d26:	f003 fa98 	bl	800425a <HAL_UART_Receive_IT>
 8000d2a:	e012      	b.n	8000d52 <HAL_UART_RxCpltCallback+0x5e>
		}

		else if(peripheralID == 0x03)
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_UART_RxCpltCallback+0x74>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d105      	bne.n	8000d40 <HAL_UART_RxCpltCallback+0x4c>
		{
			HAL_UART_Receive_IT(&huart3, usart_buffer, sizeof(usart_buffer));
 8000d34:	2216      	movs	r2, #22
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <HAL_UART_RxCpltCallback+0x78>)
 8000d38:	480f      	ldr	r0, [pc, #60]	; (8000d78 <HAL_UART_RxCpltCallback+0x84>)
 8000d3a:	f003 fa8e 	bl	800425a <HAL_UART_Receive_IT>
 8000d3e:	e008      	b.n	8000d52 <HAL_UART_RxCpltCallback+0x5e>
		}

		else if(peripheralID == 0x06)
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_UART_RxCpltCallback+0x74>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d104      	bne.n	8000d52 <HAL_UART_RxCpltCallback+0x5e>
		{
			HAL_UART_Receive_IT(&huart6, usart_buffer, sizeof(usart_buffer));
 8000d48:	2216      	movs	r2, #22
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <HAL_UART_RxCpltCallback+0x78>)
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <HAL_UART_RxCpltCallback+0x88>)
 8000d4e:	f003 fa84 	bl	800425a <HAL_UART_Receive_IT>
		}

		CDC_Transmit_FS(usart_buffer, sizeof(usart_buffer));
 8000d52:	2116      	movs	r1, #22
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_UART_RxCpltCallback+0x78>)
 8000d56:	f007 fa59 	bl	800820c <CDC_Transmit_FS>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000001 	.word	0x20000001
 8000d68:	20000002 	.word	0x20000002
 8000d6c:	20000418 	.word	0x20000418
 8000d70:	200007a0 	.word	0x200007a0
 8000d74:	20000828 	.word	0x20000828
 8000d78:	200006b4 	.word	0x200006b4
 8000d7c:	200007e4 	.word	0x200007e4

08000d80 <data_received>:

/* USB receive function */
void data_received(uint8_t* data, uint32_t *Len)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	uint8_t len = (uint8_t)*Len;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	73fb      	strb	r3, [r7, #15]

	memset (buffer, '\0', sizeof(buffer));
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	2100      	movs	r1, #0
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <data_received+0x58>)
 8000d98:	f007 ff34 	bl	8008c04 <memset>
	memcpy(buffer, data, len);
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <data_received+0x58>)
 8000da4:	f007 ff20 	bl	8008be8 <memcpy>

	if(data_check(data) == 0)
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 f819 	bl	8000de0 <data_check>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d103      	bne.n	8000dbc <data_received+0x3c>
	{
	  PROCESS_INIT(data);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 f831 	bl	8000e1c <PROCESS_INIT>
 8000dba:	e003      	b.n	8000dc4 <data_received+0x44>
	}

	else
	{
	  CDC_Transmit_FS((uint8_t *)"Incorrect data.\n", strlen("Incorrect data.\n"));
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4807      	ldr	r0, [pc, #28]	; (8000ddc <data_received+0x5c>)
 8000dc0:	f007 fa24 	bl	800820c <CDC_Transmit_FS>
	}

	memset (data, '\0', len);
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f007 ff1a 	bl	8008c04 <memset>
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000218 	.word	0x20000218
 8000ddc:	08009534 	.word	0x08009534

08000de0 <data_check>:

/* Checksum check */
uint8_t data_check(uint8_t data[])
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	uint8_t checksum = data[0];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	73fb      	strb	r3, [r7, #15]

	for (int i = 1; i < 64; i++)
 8000dee:	2301      	movs	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	e009      	b.n	8000e08 <data_check+0x28>
	{
		checksum ^= data[i];
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	4053      	eors	r3, r2
 8000e00:	73fb      	strb	r3, [r7, #15]
	for (int i = 1; i < 64; i++)
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	3301      	adds	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e0c:	ddf2      	ble.n	8000df4 <data_check+0x14>
	}

	return checksum;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <PROCESS_INIT>:

/* Process Initialization */
void PROCESS_INIT(uint8_t data[])
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	hostID = data[0];
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <PROCESS_INIT+0x98>)
 8000e2a:	701a      	strb	r2, [r3, #0]
	peripheralGROUP = data[1];
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	785a      	ldrb	r2, [r3, #1]
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <PROCESS_INIT+0x9c>)
 8000e32:	701a      	strb	r2, [r3, #0]
	peripheralID = data[2];
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	789a      	ldrb	r2, [r3, #2]
 8000e38:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <PROCESS_INIT+0xa0>)
 8000e3a:	701a      	strb	r2, [r3, #0]
	PROCESS = data[3];
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	78da      	ldrb	r2, [r3, #3]
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <PROCESS_INIT+0xa4>)
 8000e42:	701a      	strb	r2, [r3, #0]
	COMMAND = data[4];
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	791a      	ldrb	r2, [r3, #4]
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <PROCESS_INIT+0xa8>)
 8000e4a:	701a      	strb	r2, [r3, #0]

	if(peripheralGROUP >= 0x10 && peripheralGROUP < 0x20)
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <PROCESS_INIT+0x9c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d90e      	bls.n	8000e72 <PROCESS_INIT+0x56>
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <PROCESS_INIT+0x9c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b1f      	cmp	r3, #31
 8000e5a:	d80a      	bhi.n	8000e72 <PROCESS_INIT+0x56>
	{
		//GPIO Control
		GPIO_FUNC(peripheralGROUP, peripheralID, PROCESS, COMMAND);
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <PROCESS_INIT+0x9c>)
 8000e5e:	7818      	ldrb	r0, [r3, #0]
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <PROCESS_INIT+0xa0>)
 8000e62:	7819      	ldrb	r1, [r3, #0]
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <PROCESS_INIT+0xa4>)
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <PROCESS_INIT+0xa8>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	f7ff fba4 	bl	80005b8 <GPIO_FUNC>

	else if(peripheralGROUP >= 0x40 && peripheralGROUP < 0x50)
	{
		//SPI Control
	}
}
 8000e70:	e01c      	b.n	8000eac <PROCESS_INIT+0x90>
	else if(peripheralGROUP >= 0x20 && peripheralGROUP < 0x30)
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <PROCESS_INIT+0x9c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b1f      	cmp	r3, #31
 8000e78:	d918      	bls.n	8000eac <PROCESS_INIT+0x90>
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <PROCESS_INIT+0x9c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b2f      	cmp	r3, #47	; 0x2f
 8000e80:	d809      	bhi.n	8000e96 <PROCESS_INIT+0x7a>
		USART_FUNC(peripheralID, PROCESS, COMMAND);
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <PROCESS_INIT+0xa0>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <PROCESS_INIT+0xa4>)
 8000e88:	7811      	ldrb	r1, [r2, #0]
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <PROCESS_INIT+0xa8>)
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 faec 	bl	800146c <USART_FUNC>
}
 8000e94:	e00a      	b.n	8000eac <PROCESS_INIT+0x90>
	else if(peripheralGROUP >= 0x30 && peripheralGROUP < 0x40)
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <PROCESS_INIT+0x9c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e9c:	d906      	bls.n	8000eac <PROCESS_INIT+0x90>
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <PROCESS_INIT+0x9c>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ea4:	d902      	bls.n	8000eac <PROCESS_INIT+0x90>
	else if(peripheralGROUP >= 0x40 && peripheralGROUP < 0x50)
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <PROCESS_INIT+0x9c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b3f      	cmp	r3, #63	; 0x3f
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000001 	.word	0x20000001
 8000ebc:	20000002 	.word	0x20000002
 8000ec0:	20000003 	.word	0x20000003
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a5b      	ldr	r2, [pc, #364]	; (80010b0 <HAL_I2C_MspInit+0x18c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12c      	bne.n	8000fa0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	4b5a      	ldr	r3, [pc, #360]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a59      	ldr	r2, [pc, #356]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f62:	23c0      	movs	r3, #192	; 0xc0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f66:	2312      	movs	r3, #18
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f72:	2304      	movs	r3, #4
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	484e      	ldr	r0, [pc, #312]	; (80010b8 <HAL_I2C_MspInit+0x194>)
 8000f7e:	f000 fd23 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	4b4b      	ldr	r3, [pc, #300]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a4a      	ldr	r2, [pc, #296]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f9e:	e082      	b.n	80010a6 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a45      	ldr	r2, [pc, #276]	; (80010bc <HAL_I2C_MspInit+0x198>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12c      	bne.n	8001004 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a40      	ldr	r2, [pc, #256]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fca:	2312      	movs	r3, #18
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4837      	ldr	r0, [pc, #220]	; (80010c0 <HAL_I2C_MspInit+0x19c>)
 8000fe2:	f000 fcf1 	bl	80019c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a31      	ldr	r2, [pc, #196]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000ff0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
}
 8001002:	e050      	b.n	80010a6 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <HAL_I2C_MspInit+0x1a0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d14b      	bne.n	80010a6 <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104c:	2312      	movs	r3, #18
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001058:	2304      	movs	r3, #4
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4819      	ldr	r0, [pc, #100]	; (80010c8 <HAL_I2C_MspInit+0x1a4>)
 8001064:	f000 fcb0 	bl	80019c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106e:	2312      	movs	r3, #18
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001072:	2301      	movs	r3, #1
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800107a:	2304      	movs	r3, #4
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	4619      	mov	r1, r3
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <HAL_I2C_MspInit+0x1a8>)
 8001086:	f000 fc9f 	bl	80019c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 8001094:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_I2C_MspInit+0x190>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
}
 80010a6:	bf00      	nop
 80010a8:	3738      	adds	r7, #56	; 0x38
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40005400 	.word	0x40005400
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40005800 	.word	0x40005800
 80010c0:	40021400 	.word	0x40021400
 80010c4:	40005c00 	.word	0x40005c00
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020000 	.word	0x40020000

080010d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b090      	sub	sp, #64	; 0x40
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a84      	ldr	r2, [pc, #528]	; (8001300 <HAL_UART_MspInit+0x230>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d135      	bne.n	800115e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80010f6:	4b83      	ldr	r3, [pc, #524]	; (8001304 <HAL_UART_MspInit+0x234>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a82      	ldr	r2, [pc, #520]	; (8001304 <HAL_UART_MspInit+0x234>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b80      	ldr	r3, [pc, #512]	; (8001304 <HAL_UART_MspInit+0x234>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
 800110c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
 8001112:	4b7c      	ldr	r3, [pc, #496]	; (8001304 <HAL_UART_MspInit+0x234>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a7b      	ldr	r2, [pc, #492]	; (8001304 <HAL_UART_MspInit+0x234>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b79      	ldr	r3, [pc, #484]	; (8001304 <HAL_UART_MspInit+0x234>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800112a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800113c:	2307      	movs	r3, #7
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001144:	4619      	mov	r1, r3
 8001146:	4870      	ldr	r0, [pc, #448]	; (8001308 <HAL_UART_MspInit+0x238>)
 8001148:	f000 fc3e 	bl	80019c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2025      	movs	r0, #37	; 0x25
 8001152:	f000 fb70 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001156:	2025      	movs	r0, #37	; 0x25
 8001158:	f000 fb89 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800115c:	e0cb      	b.n	80012f6 <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART2)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a6a      	ldr	r2, [pc, #424]	; (800130c <HAL_UART_MspInit+0x23c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d134      	bne.n	80011d2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
 800116c:	4b65      	ldr	r3, [pc, #404]	; (8001304 <HAL_UART_MspInit+0x234>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a64      	ldr	r2, [pc, #400]	; (8001304 <HAL_UART_MspInit+0x234>)
 8001172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b62      	ldr	r3, [pc, #392]	; (8001304 <HAL_UART_MspInit+0x234>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <HAL_UART_MspInit+0x234>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4a5d      	ldr	r2, [pc, #372]	; (8001304 <HAL_UART_MspInit+0x234>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b5b      	ldr	r3, [pc, #364]	; (8001304 <HAL_UART_MspInit+0x234>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011a0:	230c      	movs	r3, #12
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b0:	2307      	movs	r3, #7
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b8:	4619      	mov	r1, r3
 80011ba:	4853      	ldr	r0, [pc, #332]	; (8001308 <HAL_UART_MspInit+0x238>)
 80011bc:	f000 fc04 	bl	80019c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2026      	movs	r0, #38	; 0x26
 80011c6:	f000 fb36 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ca:	2026      	movs	r0, #38	; 0x26
 80011cc:	f000 fb4f 	bl	800186e <HAL_NVIC_EnableIRQ>
}
 80011d0:	e091      	b.n	80012f6 <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART3)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a4e      	ldr	r2, [pc, #312]	; (8001310 <HAL_UART_MspInit+0x240>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d153      	bne.n	8001284 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	4b48      	ldr	r3, [pc, #288]	; (8001304 <HAL_UART_MspInit+0x234>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a47      	ldr	r2, [pc, #284]	; (8001304 <HAL_UART_MspInit+0x234>)
 80011e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b45      	ldr	r3, [pc, #276]	; (8001304 <HAL_UART_MspInit+0x234>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	4b41      	ldr	r3, [pc, #260]	; (8001304 <HAL_UART_MspInit+0x234>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a40      	ldr	r2, [pc, #256]	; (8001304 <HAL_UART_MspInit+0x234>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <HAL_UART_MspInit+0x234>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	4b3a      	ldr	r3, [pc, #232]	; (8001304 <HAL_UART_MspInit+0x234>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4a39      	ldr	r2, [pc, #228]	; (8001304 <HAL_UART_MspInit+0x234>)
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	6313      	str	r3, [r2, #48]	; 0x30
 8001224:	4b37      	ldr	r3, [pc, #220]	; (8001304 <HAL_UART_MspInit+0x234>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001230:	2320      	movs	r3, #32
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001240:	2307      	movs	r3, #7
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001248:	4619      	mov	r1, r3
 800124a:	4832      	ldr	r0, [pc, #200]	; (8001314 <HAL_UART_MspInit+0x244>)
 800124c:	f000 fbbc 	bl	80019c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001262:	2307      	movs	r3, #7
 8001264:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126a:	4619      	mov	r1, r3
 800126c:	482a      	ldr	r0, [pc, #168]	; (8001318 <HAL_UART_MspInit+0x248>)
 800126e:	f000 fbab 	bl	80019c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2027      	movs	r0, #39	; 0x27
 8001278:	f000 fadd 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800127c:	2027      	movs	r0, #39	; 0x27
 800127e:	f000 faf6 	bl	800186e <HAL_NVIC_EnableIRQ>
}
 8001282:	e038      	b.n	80012f6 <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART6)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a24      	ldr	r2, [pc, #144]	; (800131c <HAL_UART_MspInit+0x24c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d133      	bne.n	80012f6 <HAL_UART_MspInit+0x226>
    __HAL_RCC_USART6_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_UART_MspInit+0x234>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_UART_MspInit+0x234>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_UART_MspInit+0x234>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_UART_MspInit+0x234>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a14      	ldr	r2, [pc, #80]	; (8001304 <HAL_UART_MspInit+0x234>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_UART_MspInit+0x234>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c6:	23c0      	movs	r3, #192	; 0xc0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012d6:	2308      	movs	r3, #8
 80012d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <HAL_UART_MspInit+0x244>)
 80012e2:	f000 fb71 	bl	80019c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2047      	movs	r0, #71	; 0x47
 80012ec:	f000 faa3 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80012f0:	2047      	movs	r0, #71	; 0x47
 80012f2:	f000 fabc 	bl	800186e <HAL_NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3740      	adds	r7, #64	; 0x40
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40011000 	.word	0x40011000
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40004400 	.word	0x40004400
 8001310:	40004800 	.word	0x40004800
 8001314:	40020800 	.word	0x40020800
 8001318:	40020400 	.word	0x40020400
 800131c:	40011400 	.word	0x40011400

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001324:	f002 fa4c 	bl	80037c0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <NMI_Handler+0x8>

0800132a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <MemManage_Handler+0x4>

08001336 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <UsageFault_Handler+0x4>

08001342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001370:	f000 f942 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <USART1_IRQHandler+0x10>)
 800137e:	f002 ff9d 	bl	80042bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200007a0 	.word	0x200007a0

0800138c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <USART2_IRQHandler+0x10>)
 8001392:	f002 ff93 	bl	80042bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000828 	.word	0x20000828

080013a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <USART3_IRQHandler+0x10>)
 80013a6:	f002 ff89 	bl	80042bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200006b4 	.word	0x200006b4

080013b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <OTG_FS_IRQHandler+0x10>)
 80013ba:	f000 ff80 	bl	80022be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20001d40 	.word	0x20001d40

080013c8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <USART6_IRQHandler+0x10>)
 80013ce:	f002 ff75 	bl	80042bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200007e4 	.word	0x200007e4

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f007 fbc2 	bl	8008b94 <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20040000 	.word	0x20040000
 800143c:	00000400 	.word	0x00000400
 8001440:	20000430 	.word	0x20000430
 8001444:	20002158 	.word	0x20002158

08001448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <USART_FUNC>:
extern unsigned char peripheralID;

UART_HandleTypeDef* selected_usart;

void USART_FUNC(unsigned char peripheralID, unsigned char PROCESS, unsigned char COMMAND)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	460b      	mov	r3, r1
 8001478:	71bb      	strb	r3, [r7, #6]
 800147a:	4613      	mov	r3, r2
 800147c:	717b      	strb	r3, [r7, #5]
	if(peripheralID == 0x01)
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d107      	bne.n	8001494 <USART_FUNC+0x28>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)"0", strlen("0"), HAL_MAX_DELAY);
 8001484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001488:	2201      	movs	r2, #1
 800148a:	4917      	ldr	r1, [pc, #92]	; (80014e8 <USART_FUNC+0x7c>)
 800148c:	4817      	ldr	r0, [pc, #92]	; (80014ec <USART_FUNC+0x80>)
 800148e:	f002 fe52 	bl	8004136 <HAL_UART_Transmit>

	else
	{
		CDC_Transmit_FS((uint8_t *)"Error: Invalid USART selection.\n", strlen("Error: Invalid USART selection.\n"));
	}
}
 8001492:	e024      	b.n	80014de <USART_FUNC+0x72>
	else if(peripheralID == 0x02)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d107      	bne.n	80014aa <USART_FUNC+0x3e>
		HAL_UART_Transmit(&huart2, (uint8_t *)&COMMAND, sizeof(COMMAND), HAL_MAX_DELAY);
 800149a:	1d79      	adds	r1, r7, #5
 800149c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a0:	2201      	movs	r2, #1
 80014a2:	4813      	ldr	r0, [pc, #76]	; (80014f0 <USART_FUNC+0x84>)
 80014a4:	f002 fe47 	bl	8004136 <HAL_UART_Transmit>
}
 80014a8:	e019      	b.n	80014de <USART_FUNC+0x72>
	else if(peripheralID == 0x03)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d107      	bne.n	80014c0 <USART_FUNC+0x54>
		HAL_UART_Transmit(&huart3, (uint8_t *)&COMMAND, sizeof(COMMAND), HAL_MAX_DELAY);
 80014b0:	1d79      	adds	r1, r7, #5
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b6:	2201      	movs	r2, #1
 80014b8:	480e      	ldr	r0, [pc, #56]	; (80014f4 <USART_FUNC+0x88>)
 80014ba:	f002 fe3c 	bl	8004136 <HAL_UART_Transmit>
}
 80014be:	e00e      	b.n	80014de <USART_FUNC+0x72>
	else if(peripheralID == 0x06)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d107      	bne.n	80014d6 <USART_FUNC+0x6a>
		HAL_UART_Transmit(&huart6, (uint8_t *)&COMMAND, sizeof(COMMAND), HAL_MAX_DELAY);
 80014c6:	1d79      	adds	r1, r7, #5
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014cc:	2201      	movs	r2, #1
 80014ce:	480a      	ldr	r0, [pc, #40]	; (80014f8 <USART_FUNC+0x8c>)
 80014d0:	f002 fe31 	bl	8004136 <HAL_UART_Transmit>
}
 80014d4:	e003      	b.n	80014de <USART_FUNC+0x72>
		CDC_Transmit_FS((uint8_t *)"Error: Invalid USART selection.\n", strlen("Error: Invalid USART selection.\n"));
 80014d6:	2120      	movs	r1, #32
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <USART_FUNC+0x90>)
 80014da:	f006 fe97 	bl	800820c <CDC_Transmit_FS>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	08009548 	.word	0x08009548
 80014ec:	200007a0 	.word	0x200007a0
 80014f0:	20000828 	.word	0x20000828
 80014f4:	200006b4 	.word	0x200006b4
 80014f8:	200007e4 	.word	0x200007e4
 80014fc:	0800954c 	.word	0x0800954c

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001506:	490e      	ldr	r1, [pc, #56]	; (8001540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800151c:	4c0b      	ldr	r4, [pc, #44]	; (800154c <LoopFillZerobss+0x26>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800152a:	f7ff ff8d 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152e:	f007 fb37 	bl	8008ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff f98b 	bl	800084c <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001538:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001544:	08009614 	.word	0x08009614
  ldr r2, =_sbss
 8001548:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800154c:	20002158 	.word	0x20002158

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_Init+0x40>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_Init+0x40>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x40>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f94f 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fca4 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023c00 	.word	0x40023c00

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f967 	bl	800188a <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d4:	f000 f92f 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000010 	.word	0x20000010
 80015f4:	2000000c 	.word	0x2000000c

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000010 	.word	0x20000010
 800161c:	2000086c 	.word	0x2000086c

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2000086c 	.word	0x2000086c

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000010 	.word	0x20000010

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff29 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff3e 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff31 	bl	80016e4 <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff feb6 	bl	8001620 <HAL_GetTick>
 80018b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d008      	beq.n	80018d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e052      	b.n	800197a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0216 	bic.w	r2, r2, #22
 80018e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <HAL_DMA_Abort+0x62>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001900:	2b00      	cmp	r3, #0
 8001902:	d007      	beq.n	8001914 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0208 	bic.w	r2, r2, #8
 8001912:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001924:	e013      	b.n	800194e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001926:	f7ff fe7b 	bl	8001620 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b05      	cmp	r3, #5
 8001932:	d90c      	bls.n	800194e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2220      	movs	r2, #32
 8001938:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2203      	movs	r2, #3
 800193e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e015      	b.n	800197a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e4      	bne.n	8001926 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001960:	223f      	movs	r2, #63	; 0x3f
 8001962:	409a      	lsls	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d004      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e00c      	b.n	80019ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2205      	movs	r2, #5
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0201 	bic.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e165      	b.n	8001cb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e4:	2201      	movs	r2, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 8154 	bne.w	8001caa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d005      	beq.n	8001a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d017      	beq.n	8001ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80ae 	beq.w	8001caa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_GPIO_Init+0x300>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a5c      	ldr	r2, [pc, #368]	; (8001cc8 <HAL_GPIO_Init+0x300>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b5a      	ldr	r3, [pc, #360]	; (8001cc8 <HAL_GPIO_Init+0x300>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6a:	4a58      	ldr	r2, [pc, #352]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4f      	ldr	r2, [pc, #316]	; (8001cd0 <HAL_GPIO_Init+0x308>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d025      	beq.n	8001be2 <HAL_GPIO_Init+0x21a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4e      	ldr	r2, [pc, #312]	; (8001cd4 <HAL_GPIO_Init+0x30c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01f      	beq.n	8001bde <HAL_GPIO_Init+0x216>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4d      	ldr	r2, [pc, #308]	; (8001cd8 <HAL_GPIO_Init+0x310>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0x212>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4c      	ldr	r2, [pc, #304]	; (8001cdc <HAL_GPIO_Init+0x314>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x20e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_GPIO_Init+0x318>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x20a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_GPIO_Init+0x31c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x206>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <HAL_GPIO_Init+0x320>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x202>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e00c      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bca:	2307      	movs	r3, #7
 8001bcc:	e00a      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bce:	2305      	movs	r3, #5
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001be2:	2300      	movs	r3, #0
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf4:	4935      	ldr	r1, [pc, #212]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c02:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c26:	4a31      	ldr	r2, [pc, #196]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c50:	4a26      	ldr	r2, [pc, #152]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca4:	4a11      	ldr	r2, [pc, #68]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	f67f ae96 	bls.w	80019e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40021400 	.word	0x40021400
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e001      	b.n	8001d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d3c:	e003      	b.n	8001d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	041a      	lsls	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	619a      	str	r2, [r3, #24]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d64:	887a      	ldrh	r2, [r7, #2]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	041a      	lsls	r2, r3, #16
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	400b      	ands	r3, r1
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e12b      	b.n	8001ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff f8b8 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2224      	movs	r2, #36	; 0x24
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dec:	f001 fcc0 	bl	8003770 <HAL_RCC_GetPCLK1Freq>
 8001df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a81      	ldr	r2, [pc, #516]	; (8001ffc <HAL_I2C_Init+0x274>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d807      	bhi.n	8001e0c <HAL_I2C_Init+0x84>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4a80      	ldr	r2, [pc, #512]	; (8002000 <HAL_I2C_Init+0x278>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	bf94      	ite	ls
 8001e04:	2301      	movls	r3, #1
 8001e06:	2300      	movhi	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e006      	b.n	8001e1a <HAL_I2C_Init+0x92>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a7d      	ldr	r2, [pc, #500]	; (8002004 <HAL_I2C_Init+0x27c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	bf94      	ite	ls
 8001e14:	2301      	movls	r3, #1
 8001e16:	2300      	movhi	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0e7      	b.n	8001ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4a78      	ldr	r2, [pc, #480]	; (8002008 <HAL_I2C_Init+0x280>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0c9b      	lsrs	r3, r3, #18
 8001e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4a6a      	ldr	r2, [pc, #424]	; (8001ffc <HAL_I2C_Init+0x274>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d802      	bhi.n	8001e5c <HAL_I2C_Init+0xd4>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	e009      	b.n	8001e70 <HAL_I2C_Init+0xe8>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	4a69      	ldr	r2, [pc, #420]	; (800200c <HAL_I2C_Init+0x284>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	3301      	adds	r3, #1
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	495c      	ldr	r1, [pc, #368]	; (8001ffc <HAL_I2C_Init+0x274>)
 8001e8c:	428b      	cmp	r3, r1
 8001e8e:	d819      	bhi.n	8001ec4 <HAL_I2C_Init+0x13c>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e59      	subs	r1, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9e:	1c59      	adds	r1, r3, #1
 8001ea0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_I2C_Init+0x138>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1e59      	subs	r1, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebe:	e051      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	e04f      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d111      	bne.n	8001ef0 <HAL_I2C_Init+0x168>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e012      	b.n	8001f16 <HAL_I2C_Init+0x18e>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e58      	subs	r0, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	0099      	lsls	r1, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Init+0x196>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e022      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10e      	bne.n	8001f44 <HAL_I2C_Init+0x1bc>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e58      	subs	r0, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	440b      	add	r3, r1
 8001f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f42:	e00f      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e58      	subs	r0, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	0099      	lsls	r1, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	6809      	ldr	r1, [r1, #0]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6911      	ldr	r1, [r2, #16]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68d2      	ldr	r2, [r2, #12]
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	000186a0 	.word	0x000186a0
 8002000:	001e847f 	.word	0x001e847f
 8002004:	003d08ff 	.word	0x003d08ff
 8002008:	431bde83 	.word	0x431bde83
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002012:	b08f      	sub	sp, #60	; 0x3c
 8002014:	af0a      	add	r7, sp, #40	; 0x28
 8002016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e116      	b.n	8002250 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d106      	bne.n	8002042 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f006 fa3f 	bl	80084c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2203      	movs	r2, #3
 8002046:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f003 f8f8 	bl	8005256 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	687e      	ldr	r6, [r7, #4]
 800206e:	466d      	mov	r5, sp
 8002070:	f106 0410 	add.w	r4, r6, #16
 8002074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002080:	e885 0003 	stmia.w	r5, {r0, r1}
 8002084:	1d33      	adds	r3, r6, #4
 8002086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002088:	6838      	ldr	r0, [r7, #0]
 800208a:	f002 ffcf 	bl	800502c <USB_CoreInit>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0d7      	b.n	8002250 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 f8e6 	bl	8005278 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e04a      	b.n	8002148 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	333d      	adds	r3, #61	; 0x3d
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	333c      	adds	r3, #60	; 0x3c
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	b298      	uxth	r0, r3
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3342      	adds	r3, #66	; 0x42
 80020ee:	4602      	mov	r2, r0
 80020f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	333f      	adds	r3, #63	; 0x3f
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3344      	adds	r3, #68	; 0x44
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3348      	adds	r3, #72	; 0x48
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3350      	adds	r3, #80	; 0x50
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	3301      	adds	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	d3af      	bcc.n	80020b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e044      	b.n	80021e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	3301      	adds	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3b5      	bcc.n	8002158 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	687e      	ldr	r6, [r7, #4]
 80021f4:	466d      	mov	r5, sp
 80021f6:	f106 0410 	add.w	r4, r6, #16
 80021fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002202:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002206:	e885 0003 	stmia.w	r5, {r0, r1}
 800220a:	1d33      	adds	r3, r6, #4
 800220c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800220e:	6838      	ldr	r0, [r7, #0]
 8002210:	f003 f87e 	bl	8005310 <USB_DevInit>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2202      	movs	r2, #2
 800221e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e014      	b.n	8002250 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f001 f892 	bl	8003368 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f004 f8ed 	bl	8006428 <USB_DevDisconnect>

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002258 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_PCD_Start+0x1c>
 8002270:	2302      	movs	r3, #2
 8002272:	e020      	b.n	80022b6 <HAL_PCD_Start+0x5e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	2b01      	cmp	r3, #1
 8002282:	d109      	bne.n	8002298 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002288:	2b01      	cmp	r3, #1
 800228a:	d005      	beq.n	8002298 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f002 ffc9 	bl	8005234 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 f89d 	bl	80063e6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022be:	b590      	push	{r4, r7, lr}
 80022c0:	b08d      	sub	sp, #52	; 0x34
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 f95b 	bl	8006590 <USB_GetMode>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 83ca 	bne.w	8002a76 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 f8bf 	bl	800646a <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 83c0 	beq.w	8002a74 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 f8b6 	bl	800646a <USB_ReadInterrupts>
 80022fe:	4603      	mov	r3, r0
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b02      	cmp	r3, #2
 8002306:	d107      	bne.n	8002318 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f002 0202 	and.w	r2, r2, #2
 8002316:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f004 f8a4 	bl	800646a <USB_ReadInterrupts>
 8002322:	4603      	mov	r3, r0
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b10      	cmp	r3, #16
 800232a:	d161      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0210 	bic.w	r2, r2, #16
 800233a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f003 020f 	and.w	r2, r3, #15
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	3304      	adds	r3, #4
 800235a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	0c5b      	lsrs	r3, r3, #17
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	2b02      	cmp	r3, #2
 8002366:	d124      	bne.n	80023b2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d035      	beq.n	80023e0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800237e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	6a38      	ldr	r0, [r7, #32]
 8002388:	f003 fedb 	bl	8006142 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002398:	441a      	add	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023aa:	441a      	add	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	619a      	str	r2, [r3, #24]
 80023b0:	e016      	b.n	80023e0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	0c5b      	lsrs	r3, r3, #17
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d110      	bne.n	80023e0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023c4:	2208      	movs	r2, #8
 80023c6:	4619      	mov	r1, r3
 80023c8:	6a38      	ldr	r0, [r7, #32]
 80023ca:	f003 feba 	bl	8006142 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023da:	441a      	add	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0210 	orr.w	r2, r2, #16
 80023ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 f838 	bl	800646a <USB_ReadInterrupts>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002400:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002404:	d16e      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f004 f83e 	bl	8006490 <USB_ReadDevAllOutEpInterrupt>
 8002414:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002416:	e062      	b.n	80024de <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d057      	beq.n	80024d2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f004 f863 	bl	80064f8 <USB_ReadDevOutEPInterrupt>
 8002432:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00c      	beq.n	8002458 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244a:	461a      	mov	r2, r3
 800244c:	2301      	movs	r3, #1
 800244e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fdde 	bl	8003014 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00c      	beq.n	800247c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246e:	461a      	mov	r2, r3
 8002470:	2308      	movs	r3, #8
 8002472:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fed8 	bl	800322c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002492:	461a      	mov	r2, r3
 8002494:	2310      	movs	r3, #16
 8002496:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ae:	461a      	mov	r2, r3
 80024b0:	2320      	movs	r3, #32
 80024b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ca:	461a      	mov	r2, r3
 80024cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	3301      	adds	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d199      	bne.n	8002418 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 ffbe 	bl	800646a <USB_ReadInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024f8:	f040 80c0 	bne.w	800267c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f003 ffdf 	bl	80064c4 <USB_ReadDevAllInEpInterrupt>
 8002506:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800250c:	e0b2      	b.n	8002674 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a7 	beq.w	8002668 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f004 f805 	bl	8006534 <USB_ReadDevInEPInterrupt>
 800252a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d057      	beq.n	80025e6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	2201      	movs	r2, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	69f9      	ldr	r1, [r7, #28]
 8002552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002556:	4013      	ands	r3, r2
 8002558:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002566:	461a      	mov	r2, r3
 8002568:	2301      	movs	r3, #1
 800256a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d132      	bne.n	80025da <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3348      	adds	r3, #72	; 0x48
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4403      	add	r3, r0
 8002594:	3344      	adds	r3, #68	; 0x44
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4419      	add	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4403      	add	r3, r0
 80025a8:	3348      	adds	r3, #72	; 0x48
 80025aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d113      	bne.n	80025da <HAL_PCD_IRQHandler+0x31c>
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3350      	adds	r3, #80	; 0x50
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d108      	bne.n	80025da <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025d2:	461a      	mov	r2, r3
 80025d4:	2101      	movs	r1, #1
 80025d6:	f004 f80d 	bl	80065f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4619      	mov	r1, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f005 fffc 	bl	80085de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025fc:	461a      	mov	r2, r3
 80025fe:	2308      	movs	r3, #8
 8002600:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002618:	461a      	mov	r2, r3
 800261a:	2310      	movs	r3, #16
 800261c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002634:	461a      	mov	r2, r3
 8002636:	2340      	movs	r3, #64	; 0x40
 8002638:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002650:	461a      	mov	r2, r3
 8002652:	2302      	movs	r3, #2
 8002654:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fc48 	bl	8002ef8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	3301      	adds	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	2b00      	cmp	r3, #0
 8002678:	f47f af49 	bne.w	800250e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fef2 	bl	800646a <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800268c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002690:	d122      	bne.n	80026d8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d108      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026b8:	2100      	movs	r1, #0
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f006 f9d8 	bl	8008a70 <HAL_PCDEx_LPM_Callback>
 80026c0:	e002      	b.n	80026c8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f005 fff8 	bl	80086b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 fec4 	bl	800646a <USB_ReadInterrupts>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ec:	d112      	bne.n	8002714 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d102      	bne.n	8002704 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f005 ffb4 	bl	800866c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002712:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fea6 	bl	800646a <USB_ReadInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002728:	d121      	bne.n	800276e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002738:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	f003 020f 	and.w	r2, r3, #15
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800275e:	2101      	movs	r1, #1
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f006 f985 	bl	8008a70 <HAL_PCDEx_LPM_Callback>
 8002766:	e002      	b.n	800276e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f005 ff7f 	bl	800866c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f003 fe79 	bl	800646a <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800277e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002782:	f040 80c7 	bne.w	8002914 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2110      	movs	r1, #16
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 ff13 	bl	80055cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027aa:	e056      	b.n	800285a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b8:	461a      	mov	r2, r3
 80027ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d0:	0151      	lsls	r1, r2, #5
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	440a      	add	r2, r1
 80027d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027de:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f0:	0151      	lsls	r1, r2, #5
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	440a      	add	r2, r1
 80027f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280c:	461a      	mov	r2, r3
 800280e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002812:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002824:	0151      	lsls	r1, r2, #5
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	440a      	add	r2, r1
 800282a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800282e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002832:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002844:	0151      	lsls	r1, r2, #5
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	440a      	add	r2, r1
 800284a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800284e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002852:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	3301      	adds	r3, #1
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002860:	429a      	cmp	r2, r3
 8002862:	d3a3      	bcc.n	80027ac <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002872:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002876:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	2b00      	cmp	r3, #0
 800287e:	d016      	beq.n	80028ae <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002890:	f043 030b 	orr.w	r3, r3, #11
 8002894:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a6:	f043 030b 	orr.w	r3, r3, #11
 80028aa:	6453      	str	r3, [r2, #68]	; 0x44
 80028ac:	e015      	b.n	80028da <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d4:	f043 030b 	orr.w	r3, r3, #11
 80028d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028fe:	461a      	mov	r2, r3
 8002900:	f003 fe78 	bl	80065f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f003 fda6 	bl	800646a <USB_ReadInterrupts>
 800291e:	4603      	mov	r3, r0
 8002920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002928:	d124      	bne.n	8002974 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fe3c 	bl	80065ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f002 fea4 	bl	8005686 <USB_GetDevSpeed>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681c      	ldr	r4, [r3, #0]
 800294a:	f000 ff05 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 800294e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	4620      	mov	r0, r4
 800295a:	f002 fbc9 	bl	80050f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f005 fe65 	bl	800862e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002972:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fd76 	bl	800646a <USB_ReadInterrupts>
 800297e:	4603      	mov	r3, r0
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d10a      	bne.n	800299e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f005 fe42 	bl	8008612 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f002 0208 	and.w	r2, r2, #8
 800299c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fd61 	bl	800646a <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b2:	d10f      	bne.n	80029d4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f005 fe9a 	bl	80086f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fd46 	bl	800646a <USB_ReadInterrupts>
 80029de:	4603      	mov	r3, r0
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029e8:	d10f      	bne.n	8002a0a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f005 fe6d 	bl	80086d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fd2b 	bl	800646a <USB_ReadInterrupts>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d10a      	bne.n	8002a36 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f005 fe7b 	bl	800871c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f003 fd15 	bl	800646a <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d115      	bne.n	8002a76 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f005 fe6b 	bl	8008738 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	e000      	b.n	8002a76 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002a74:	bf00      	nop
    }
  }
}
 8002a76:	3734      	adds	r7, #52	; 0x34
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}

08002a7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_PCD_SetAddress+0x1a>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e013      	b.n	8002abe <HAL_PCD_SetAddress+0x42>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f003 fc73 	bl	800639a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	4608      	mov	r0, r1
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	70fb      	strb	r3, [r7, #3]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	803b      	strh	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	da0f      	bge.n	8002b0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 020f 	and.w	r2, r3, #15
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	3338      	adds	r3, #56	; 0x38
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	3304      	adds	r3, #4
 8002b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	705a      	strb	r2, [r3, #1]
 8002b0a:	e00f      	b.n	8002b2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	f003 020f 	and.w	r2, r3, #15
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	3304      	adds	r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b38:	883a      	ldrh	r2, [r7, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	78ba      	ldrb	r2, [r7, #2]
 8002b42:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	785b      	ldrb	r3, [r3, #1]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b56:	78bb      	ldrb	r3, [r7, #2]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d102      	bne.n	8002b62 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_PCD_EP_Open+0xaa>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e00e      	b.n	8002b8e <HAL_PCD_EP_Open+0xc8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68f9      	ldr	r1, [r7, #12]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 fda6 	bl	80056d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	da0f      	bge.n	8002bca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	3338      	adds	r3, #56	; 0x38
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	705a      	strb	r2, [r3, #1]
 8002bc8:	e00f      	b.n	8002bea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	f003 020f 	and.w	r2, r3, #15
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_PCD_EP_Close+0x6e>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e00e      	b.n	8002c22 <HAL_PCD_EP_Close+0x8c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f002 fde4 	bl	80057e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	460b      	mov	r3, r1
 8002c38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	f003 020f 	and.w	r2, r3, #15
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	3304      	adds	r3, #4
 8002c52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d102      	bne.n	8002c86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c86:	7afb      	ldrb	r3, [r7, #11]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	6979      	ldr	r1, [r7, #20]
 8002c9e:	f003 f8bf 	bl	8005e20 <USB_EP0StartXfer>
 8002ca2:	e008      	b.n	8002cb6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6979      	ldr	r1, [r7, #20]
 8002cb2:	f002 fe71 	bl	8005998 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	f003 020f 	and.w	r2, r3, #15
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d00:	7afb      	ldrb	r3, [r7, #11]
 8002d02:	f003 020f 	and.w	r2, r3, #15
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	3338      	adds	r3, #56	; 0x38
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	3304      	adds	r3, #4
 8002d16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2200      	movs	r2, #0
 8002d28:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d102      	bne.n	8002d4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6979      	ldr	r1, [r7, #20]
 8002d62:	f003 f85d 	bl	8005e20 <USB_EP0StartXfer>
 8002d66:	e008      	b.n	8002d7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	6979      	ldr	r1, [r7, #20]
 8002d76:	f002 fe0f 	bl	8005998 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 020f 	and.w	r2, r3, #15
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d901      	bls.n	8002da2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e050      	b.n	8002e44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002da2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	da0f      	bge.n	8002dca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	3338      	adds	r3, #56	; 0x38
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	705a      	strb	r2, [r3, #1]
 8002dc8:	e00d      	b.n	8002de6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3304      	adds	r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_PCD_EP_SetStall+0x82>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e01e      	b.n	8002e44 <HAL_PCD_EP_SetStall+0xc0>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 f9ec 	bl	80061f2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	b2d9      	uxtb	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e34:	461a      	mov	r2, r3
 8002e36:	f003 fbdd 	bl	80065f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 020f 	and.w	r2, r3, #15
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d901      	bls.n	8002e6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e042      	b.n	8002ef0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da0f      	bge.n	8002e92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 020f 	and.w	r2, r3, #15
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	3338      	adds	r3, #56	; 0x38
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	705a      	strb	r2, [r3, #1]
 8002e90:	e00f      	b.n	8002eb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 020f 	and.w	r2, r3, #15
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_PCD_EP_ClrStall+0x86>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e00e      	b.n	8002ef0 <HAL_PCD_EP_ClrStall+0xa4>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68f9      	ldr	r1, [r7, #12]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 f9f4 	bl	80062ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	3338      	adds	r3, #56	; 0x38
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d901      	bls.n	8002f30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e06c      	b.n	800300a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d902      	bls.n	8002f4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3303      	adds	r3, #3
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f54:	e02b      	b.n	8002fae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d902      	bls.n	8002f72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3303      	adds	r3, #3
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	68d9      	ldr	r1, [r3, #12]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4603      	mov	r3, r0
 8002f90:	6978      	ldr	r0, [r7, #20]
 8002f92:	f003 f898 	bl	80060c6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	441a      	add	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	441a      	add	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d809      	bhi.n	8002fd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d203      	bcs.n	8002fd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1be      	bne.n	8002f56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d811      	bhi.n	8003008 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	2201      	movs	r2, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	6939      	ldr	r1, [r7, #16]
 8003000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003004:	4013      	ands	r3, r2
 8003006:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	333c      	adds	r3, #60	; 0x3c
 800302c:	3304      	adds	r3, #4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b01      	cmp	r3, #1
 8003048:	f040 80a0 	bne.w	800318c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d015      	beq.n	8003082 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4a72      	ldr	r2, [pc, #456]	; (8003224 <PCD_EP_OutXfrComplete_int+0x210>)
 800305a:	4293      	cmp	r3, r2
 800305c:	f240 80dd 	bls.w	800321a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80d7 	beq.w	800321a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003078:	461a      	mov	r2, r3
 800307a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307e:	6093      	str	r3, [r2, #8]
 8003080:	e0cb      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003098:	461a      	mov	r2, r3
 800309a:	2320      	movs	r3, #32
 800309c:	6093      	str	r3, [r2, #8]
 800309e:	e0bc      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80b7 	bne.w	800321a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a5d      	ldr	r2, [pc, #372]	; (8003224 <PCD_EP_OutXfrComplete_int+0x210>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d90f      	bls.n	80030d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ca:	461a      	mov	r2, r3
 80030cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d0:	6093      	str	r3, [r2, #8]
 80030d2:	e0a2      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	0159      	lsls	r1, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	440b      	add	r3, r1
 80030f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4403      	add	r3, r0
 800310a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800310e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4403      	add	r3, r0
 8003132:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4419      	add	r1, r3
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4403      	add	r3, r0
 8003148:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800314c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d114      	bne.n	800317e <PCD_EP_OutXfrComplete_int+0x16a>
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d108      	bne.n	800317e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003176:	461a      	mov	r2, r3
 8003178:	2101      	movs	r1, #1
 800317a:	f003 fa3b 	bl	80065f4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f005 fa0f 	bl	80085a8 <HAL_PCD_DataOutStageCallback>
 800318a:	e046      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a26      	ldr	r2, [pc, #152]	; (8003228 <PCD_EP_OutXfrComplete_int+0x214>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d124      	bne.n	80031de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031aa:	461a      	mov	r2, r3
 80031ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b0:	6093      	str	r3, [r2, #8]
 80031b2:	e032      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ca:	461a      	mov	r2, r3
 80031cc:	2320      	movs	r3, #32
 80031ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f005 f9e6 	bl	80085a8 <HAL_PCD_DataOutStageCallback>
 80031dc:	e01d      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d114      	bne.n	800320e <PCD_EP_OutXfrComplete_int+0x1fa>
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d108      	bne.n	800320e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003206:	461a      	mov	r2, r3
 8003208:	2100      	movs	r1, #0
 800320a:	f003 f9f3 	bl	80065f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f005 f9c7 	bl	80085a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	4f54300a 	.word	0x4f54300a
 8003228:	4f54310a 	.word	0x4f54310a

0800322c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	333c      	adds	r3, #60	; 0x3c
 8003244:	3304      	adds	r3, #4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d90e      	bls.n	8003280 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003268:	2b00      	cmp	r3, #0
 800326a:	d009      	beq.n	8003280 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003278:	461a      	mov	r2, r3
 800327a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f005 f97f 	bl	8008584 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d90c      	bls.n	80032a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d108      	bne.n	80032a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032a0:	461a      	mov	r2, r3
 80032a2:	2101      	movs	r1, #1
 80032a4:	f003 f9a6 	bl	80065f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	4f54300a 	.word	0x4f54300a

080032b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	70fb      	strb	r3, [r7, #3]
 80032c4:	4613      	mov	r3, r2
 80032c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d107      	bne.n	80032e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032d6:	883b      	ldrh	r3, [r7, #0]
 80032d8:	0419      	lsls	r1, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
 80032e4:	e028      	b.n	8003338 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4413      	add	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	e00d      	b.n	8003316 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3340      	adds	r3, #64	; 0x40
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	3301      	adds	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	3b01      	subs	r3, #1
 800331c:	429a      	cmp	r2, r3
 800331e:	d3ec      	bcc.n	80032fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003320:	883b      	ldrh	r3, [r7, #0]
 8003322:	0418      	lsls	r0, r3, #16
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	3b01      	subs	r3, #1
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	4302      	orrs	r2, r0
 8003330:	3340      	adds	r3, #64	; 0x40
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339a:	f043 0303 	orr.w	r3, r3, #3
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0cc      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c4:	4b68      	ldr	r3, [pc, #416]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d90c      	bls.n	80033ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d2:	4b65      	ldr	r3, [pc, #404]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b8      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003404:	4b59      	ldr	r3, [pc, #356]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a58      	ldr	r2, [pc, #352]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800340e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4a52      	ldr	r2, [pc, #328]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b50      	ldr	r3, [pc, #320]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	494d      	ldr	r1, [pc, #308]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d044      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d119      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e07f      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d003      	beq.n	800346e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346a:	2b03      	cmp	r3, #3
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346e:	4b3f      	ldr	r3, [pc, #252]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e06f      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e067      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348e:	4b37      	ldr	r3, [pc, #220]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4934      	ldr	r1, [pc, #208]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	4313      	orrs	r3, r2
 800349e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a0:	f7fe f8be 	bl	8001620 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fe f8ba 	bl	8001620 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e04f      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 020c 	and.w	r2, r3, #12
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d1eb      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034d0:	4b25      	ldr	r3, [pc, #148]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d20c      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e032      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4916      	ldr	r1, [pc, #88]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	490e      	ldr	r1, [pc, #56]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003536:	f000 f82d 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 800353a:	4602      	mov	r2, r0
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	490a      	ldr	r1, [pc, #40]	; (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	5ccb      	ldrb	r3, [r1, r3]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	4a09      	ldr	r2, [pc, #36]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe f81e 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023c00 	.word	0x40023c00
 800356c:	40023800 	.word	0x40023800
 8003570:	080095b8 	.word	0x080095b8
 8003574:	20000008 	.word	0x20000008
 8003578:	2000000c 	.word	0x2000000c

0800357c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_RCC_EnableCSS+0x14>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	4247004c 	.word	0x4247004c

08003594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003594:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	2300      	movs	r3, #0
 80035a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ac:	4b67      	ldr	r3, [pc, #412]	; (800374c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d00d      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x40>
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	f200 80bd 	bhi.w	8003738 <HAL_RCC_GetSysClockFreq+0x1a4>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x34>
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x3a>
 80035c6:	e0b7      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c8:	4b61      	ldr	r3, [pc, #388]	; (8003750 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035ca:	60bb      	str	r3, [r7, #8]
       break;
 80035cc:	e0b7      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ce:	4b61      	ldr	r3, [pc, #388]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035d0:	60bb      	str	r3, [r7, #8]
      break;
 80035d2:	e0b4      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d4:	4b5d      	ldr	r3, [pc, #372]	; (800374c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035de:	4b5b      	ldr	r3, [pc, #364]	; (800374c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d04d      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ea:	4b58      	ldr	r3, [pc, #352]	; (800374c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	461a      	mov	r2, r3
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	ea02 0800 	and.w	r8, r2, r0
 8003602:	ea03 0901 	and.w	r9, r3, r1
 8003606:	4640      	mov	r0, r8
 8003608:	4649      	mov	r1, r9
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	014b      	lsls	r3, r1, #5
 8003614:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003618:	0142      	lsls	r2, r0, #5
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	ebb0 0008 	subs.w	r0, r0, r8
 8003622:	eb61 0109 	sbc.w	r1, r1, r9
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	018b      	lsls	r3, r1, #6
 8003630:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003634:	0182      	lsls	r2, r0, #6
 8003636:	1a12      	subs	r2, r2, r0
 8003638:	eb63 0301 	sbc.w	r3, r3, r1
 800363c:	f04f 0000 	mov.w	r0, #0
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	00d9      	lsls	r1, r3, #3
 8003646:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800364a:	00d0      	lsls	r0, r2, #3
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	eb12 0208 	adds.w	r2, r2, r8
 8003654:	eb43 0309 	adc.w	r3, r3, r9
 8003658:	f04f 0000 	mov.w	r0, #0
 800365c:	f04f 0100 	mov.w	r1, #0
 8003660:	0259      	lsls	r1, r3, #9
 8003662:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003666:	0250      	lsls	r0, r2, #9
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	461a      	mov	r2, r3
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	f7fc fe22 	bl	80002c0 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4613      	mov	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e04a      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003686:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	461a      	mov	r2, r3
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003696:	f04f 0100 	mov.w	r1, #0
 800369a:	ea02 0400 	and.w	r4, r2, r0
 800369e:	ea03 0501 	and.w	r5, r3, r1
 80036a2:	4620      	mov	r0, r4
 80036a4:	4629      	mov	r1, r5
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	014b      	lsls	r3, r1, #5
 80036b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036b4:	0142      	lsls	r2, r0, #5
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	1b00      	subs	r0, r0, r4
 80036bc:	eb61 0105 	sbc.w	r1, r1, r5
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	018b      	lsls	r3, r1, #6
 80036ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036ce:	0182      	lsls	r2, r0, #6
 80036d0:	1a12      	subs	r2, r2, r0
 80036d2:	eb63 0301 	sbc.w	r3, r3, r1
 80036d6:	f04f 0000 	mov.w	r0, #0
 80036da:	f04f 0100 	mov.w	r1, #0
 80036de:	00d9      	lsls	r1, r3, #3
 80036e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036e4:	00d0      	lsls	r0, r2, #3
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	1912      	adds	r2, r2, r4
 80036ec:	eb45 0303 	adc.w	r3, r5, r3
 80036f0:	f04f 0000 	mov.w	r0, #0
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	0299      	lsls	r1, r3, #10
 80036fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036fe:	0290      	lsls	r0, r2, #10
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	461a      	mov	r2, r3
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	f7fc fdd6 	bl	80002c0 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4613      	mov	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	3301      	adds	r3, #1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	60bb      	str	r3, [r7, #8]
      break;
 8003736:	e002      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800373a:	60bb      	str	r3, [r7, #8]
      break;
 800373c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373e:	68bb      	ldr	r3, [r7, #8]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800
 8003750:	00f42400 	.word	0x00f42400
 8003754:	007a1200 	.word	0x007a1200

08003758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <HAL_RCC_GetHCLKFreq+0x14>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000008 	.word	0x20000008

08003770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003774:	f7ff fff0 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	0a9b      	lsrs	r3, r3, #10
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4903      	ldr	r1, [pc, #12]	; (8003794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40023800 	.word	0x40023800
 8003794:	080095c8 	.word	0x080095c8

08003798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800379c:	f7ff ffdc 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0b5b      	lsrs	r3, r3, #13
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	080095c8 	.word	0x080095c8

080037c0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d104      	bne.n	80037da <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80037d0:	f000 f80a 	bl	80037e8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80037d4:	4b03      	ldr	r3, [pc, #12]	; (80037e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	701a      	strb	r2, [r3, #0]
  }
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	4002380e 	.word	0x4002380e

080037e8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d010      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003818:	4b87      	ldr	r3, [pc, #540]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800381a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	4984      	ldr	r1, [pc, #528]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8003836:	2301      	movs	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d010      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003846:	4b7c      	ldr	r3, [pc, #496]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800384c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	4978      	ldr	r1, [pc, #480]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8003864:	2301      	movs	r3, #1
 8003866:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8083 	beq.w	800397c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	4a6e      	ldr	r2, [pc, #440]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
 8003886:	4b6c      	ldr	r3, [pc, #432]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003892:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a69      	ldr	r2, [pc, #420]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800389e:	f7fd febf 	bl	8001620 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fd febb 	bl	8001620 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e162      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038b8:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038c4:	4b5c      	ldr	r3, [pc, #368]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038cc:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d02f      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d028      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038e2:	4b55      	ldr	r3, [pc, #340]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ea:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ec:	4b54      	ldr	r3, [pc, #336]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038f2:	4b53      	ldr	r3, [pc, #332]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80038f8:	4a4f      	ldr	r2, [pc, #316]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038fe:	4b4e      	ldr	r3, [pc, #312]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b01      	cmp	r3, #1
 8003908:	d114      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800390a:	f7fd fe89 	bl	8001620 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	e00a      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7fd fe85 	bl	8001620 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e12a      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ee      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003940:	d10d      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003942:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003956:	4938      	ldr	r1, [pc, #224]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003958:	4313      	orrs	r3, r2
 800395a:	608b      	str	r3, [r1, #8]
 800395c:	e005      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800395e:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	4a35      	ldr	r2, [pc, #212]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003964:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003968:	6093      	str	r3, [r2, #8]
 800396a:	4b33      	ldr	r3, [pc, #204]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800396c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003976:	4930      	ldr	r1, [pc, #192]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003978:	4313      	orrs	r3, r2
 800397a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d004      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800398e:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003990:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	4922      	ldr	r1, [pc, #136]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d011      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	491a      	ldr	r1, [pc, #104]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039de:	d101      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80039e0:	2301      	movs	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	490e      	ldr	r1, [pc, #56]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d004      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b80      	cmp	r3, #128	; 0x80
 8003a12:	f040 8091 	bne.w	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a1c:	f7fd fe00 	bl	8001620 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a22:	e013      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a24:	f7fd fdfc 	bl	8001620 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d90c      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e0a3      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	42470e40 	.word	0x42470e40
 8003a44:	424711e0 	.word	0x424711e0
 8003a48:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a4c:	4b4e      	ldr	r3, [pc, #312]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8003a58:	4a4c      	ldr	r2, [pc, #304]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d023      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d019      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a9c:	d00e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d019      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d115      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aba:	d110      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	492c      	ldr	r1, [pc, #176]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d010      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	019b      	lsls	r3, r3, #6
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	071b      	lsls	r3, r3, #28
 8003b04:	4920      	ldr	r1, [pc, #128]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b0c:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b12:	f7fd fd85 	bl	8001620 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b1a:	f7fd fd81 	bl	8001620 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e028      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b2c:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	490d      	ldr	r1, [pc, #52]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b6c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	424710d8 	.word	0x424710d8
 8003b90:	42470068 	.word	0x42470068

08003b94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e270      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bb2:	4ba3      	ldr	r3, [pc, #652]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b9d      	ldr	r3, [pc, #628]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b99      	ldr	r3, [pc, #612]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05b      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d157      	bne.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e24b      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x74>
 8003bfa:	4b91      	ldr	r3, [pc, #580]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b8b      	ldr	r3, [pc, #556]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a8a      	ldr	r2, [pc, #552]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a87      	ldr	r2, [pc, #540]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	4b84      	ldr	r3, [pc, #528]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a83      	ldr	r2, [pc, #524]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b81      	ldr	r3, [pc, #516]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a80      	ldr	r2, [pc, #512]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fd fce8 	bl	8001620 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fd fce4 	bl	8001620 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e210      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd fcd4 	bl	8001620 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fcd0 	bl	8001620 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1fc      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	4b6c      	ldr	r3, [pc, #432]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003caa:	4b65      	ldr	r3, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1d0      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4952      	ldr	r1, [pc, #328]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fd fc89 	bl	8001620 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fd fc85 	bl	8001620 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1b1      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b46      	ldr	r3, [pc, #280]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4940      	ldr	r1, [pc, #256]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fc68 	bl	8001620 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fd fc64 	bl	8001620 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e190      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d030      	beq.n	8003de0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fc48 	bl	8001620 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fd fc44 	bl	8001620 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e170      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x200>
 8003db2:	e015      	b.n	8003de0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fd fc31 	bl	8001620 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd fc2d 	bl	8001620 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e159      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a0 	beq.w	8003f2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d121      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fd fbf3 	bl	8001620 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e011      	b.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	42470000 	.word	0x42470000
 8003e48:	42470e80 	.word	0x42470e80
 8003e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fd fbe6 	bl	8001620 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e112      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e62:	4b8b      	ldr	r3, [pc, #556]	; (8004090 <HAL_RCC_OscConfig+0x4fc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d106      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2f0>
 8003e76:	4b87      	ldr	r3, [pc, #540]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a86      	ldr	r2, [pc, #536]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e01c      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x312>
 8003e8c:	4b81      	ldr	r3, [pc, #516]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a80      	ldr	r2, [pc, #512]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	4b7e      	ldr	r3, [pc, #504]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a7d      	ldr	r2, [pc, #500]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003ea6:	4b7b      	ldr	r3, [pc, #492]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a7a      	ldr	r2, [pc, #488]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b78      	ldr	r3, [pc, #480]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a77      	ldr	r2, [pc, #476]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fd fbab 	bl	8001620 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fd fba7 	bl	8001620 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0d1      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	4b6b      	ldr	r3, [pc, #428]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ee      	beq.n	8003ece <HAL_RCC_OscConfig+0x33a>
 8003ef0:	e014      	b.n	8003f1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fd fb95 	bl	8001620 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd fb91 	bl	8001620 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0bb      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f10:	4b60      	ldr	r3, [pc, #384]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ee      	bne.n	8003efa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4b5c      	ldr	r3, [pc, #368]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a5b      	ldr	r2, [pc, #364]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80a7 	beq.w	8004086 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f38:	4b56      	ldr	r3, [pc, #344]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d060      	beq.n	8004006 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d145      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b52      	ldr	r3, [pc, #328]	; (8004098 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fd fb65 	bl	8001620 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd fb61 	bl	8001620 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e08d      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6c:	4b49      	ldr	r3, [pc, #292]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	019b      	lsls	r3, r3, #6
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	3b01      	subs	r3, #1
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	071b      	lsls	r3, r3, #28
 8003fa4:	493b      	ldr	r1, [pc, #236]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003faa:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_RCC_OscConfig+0x504>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fb36 	bl	8001620 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fd fb32 	bl	8001620 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e05e      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	4b32      	ldr	r3, [pc, #200]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x424>
 8003fd6:	e056      	b.n	8004086 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd8:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <HAL_RCC_OscConfig+0x504>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd fb1f 	bl	8001620 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fd fb1b 	bl	8001620 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e047      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff8:	4b26      	ldr	r3, [pc, #152]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x452>
 8004004:	e03f      	b.n	8004086 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e03a      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d030      	beq.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d129      	bne.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d122      	bne.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004042:	4013      	ands	r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004048:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800404a:	4293      	cmp	r3, r2
 800404c:	d119      	bne.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	3b01      	subs	r3, #1
 800405c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d10f      	bne.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d107      	bne.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40007000 	.word	0x40007000
 8004094:	40023800 	.word	0x40023800
 8004098:	42470060 	.word	0x42470060

0800409c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e03f      	b.n	800412e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd f804 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	; 0x24
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fddb 	bl	8004c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b08a      	sub	sp, #40	; 0x28
 800413a:	af02      	add	r7, sp, #8
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b20      	cmp	r3, #32
 8004154:	d17c      	bne.n	8004250 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_UART_Transmit+0x2c>
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e075      	b.n	8004252 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_UART_Transmit+0x3e>
 8004170:	2302      	movs	r3, #2
 8004172:	e06e      	b.n	8004252 <HAL_UART_Transmit+0x11c>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2221      	movs	r2, #33	; 0x21
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418a:	f7fd fa49 	bl	8001620 <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	88fa      	ldrh	r2, [r7, #6]
 8004194:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d108      	bne.n	80041b8 <HAL_UART_Transmit+0x82>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d104      	bne.n	80041b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	e003      	b.n	80041c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041c8:	e02a      	b.n	8004220 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fb1f 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e036      	b.n	8004252 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	3302      	adds	r3, #2
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	e007      	b.n	8004212 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	3301      	adds	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1cf      	bne.n	80041ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2200      	movs	r2, #0
 8004232:	2140      	movs	r1, #64	; 0x40
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 faef 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e006      	b.n	8004252 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	4613      	mov	r3, r2
 8004266:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b20      	cmp	r3, #32
 8004272:	d11d      	bne.n	80042b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_UART_Receive_IT+0x26>
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e016      	b.n	80042b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_UART_Receive_IT+0x38>
 800428e:	2302      	movs	r3, #2
 8004290:	e00f      	b.n	80042b2 <HAL_UART_Receive_IT+0x58>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fb24 	bl	80048f4 <UART_Start_Receive_IT>
 80042ac:	4603      	mov	r3, r0
 80042ae:	e000      	b.n	80042b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042b0:	2302      	movs	r3, #2
  }
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b0ba      	sub	sp, #232	; 0xe8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_UART_IRQHandler+0x66>
 800430e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fc03 	bl	8004b26 <UART_Receive_IT>
      return;
 8004320:	e256      	b.n	80047d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80de 	beq.w	80044e8 <HAL_UART_IRQHandler+0x22c>
 800432c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80d1 	beq.w	80044e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_UART_IRQHandler+0xae>
 8004352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_UART_IRQHandler+0xd2>
 8004376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f043 0202 	orr.w	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <HAL_UART_IRQHandler+0xf6>
 800439a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f043 0204 	orr.w	r2, r3, #4
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d011      	beq.n	80043e2 <HAL_UART_IRQHandler+0x126>
 80043be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0208 	orr.w	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 81ed 	beq.w	80047c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_UART_IRQHandler+0x14e>
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fb8e 	bl	8004b26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <HAL_UART_IRQHandler+0x17a>
 800442e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d04f      	beq.n	80044d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fa96 	bl	8004968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	d141      	bne.n	80044ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3314      	adds	r3, #20
 8004472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004476:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800447a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800448e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1d9      	bne.n	800444a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	2b00      	cmp	r3, #0
 800449c:	d013      	beq.n	80044c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	4a7d      	ldr	r2, [pc, #500]	; (8004698 <HAL_UART_IRQHandler+0x3dc>)
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fd fa69 	bl	8001982 <HAL_DMA_Abort_IT>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044c0:	4610      	mov	r0, r2
 80044c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	e00e      	b.n	80044e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f990 	bl	80047ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	e00a      	b.n	80044e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f98c 	bl	80047ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	e006      	b.n	80044e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f988 	bl	80047ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044e2:	e170      	b.n	80047c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	bf00      	nop
    return;
 80044e6:	e16e      	b.n	80047c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	f040 814a 	bne.w	8004786 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8143 	beq.w	8004786 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 813c 	beq.w	8004786 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	f040 80b4 	bne.w	800469c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004540:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8140 	beq.w	80047ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800454e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004552:	429a      	cmp	r2, r3
 8004554:	f080 8139 	bcs.w	80047ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800455e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	f000 8088 	beq.w	800467e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800458c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800459a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800459e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1d9      	bne.n	800456e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3314      	adds	r3, #20
 80045c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3314      	adds	r3, #20
 80045da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e1      	bne.n	80045ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3314      	adds	r3, #20
 80045fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800460c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3314      	adds	r3, #20
 8004616:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800461a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800461c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004620:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e3      	bne.n	80045f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	330c      	adds	r3, #12
 8004642:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800464c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464e:	f023 0310 	bic.w	r3, r3, #16
 8004652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004660:	65ba      	str	r2, [r7, #88]	; 0x58
 8004662:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004666:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800466e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e3      	bne.n	800463c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	4618      	mov	r0, r3
 800467a:	f7fd f912 	bl	80018a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004686:	b29b      	uxth	r3, r3
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	b29b      	uxth	r3, r3
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8b6 	bl	8004800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004694:	e099      	b.n	80047ca <HAL_UART_IRQHandler+0x50e>
 8004696:	bf00      	nop
 8004698:	08004a2f 	.word	0x08004a2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 808b 	beq.w	80047ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8086 	beq.w	80047ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046e6:	647a      	str	r2, [r7, #68]	; 0x44
 80046e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e3      	bne.n	80046c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	623b      	str	r3, [r7, #32]
   return(result);
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3314      	adds	r3, #20
 800471a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800471e:	633a      	str	r2, [r7, #48]	; 0x30
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e3      	bne.n	80046fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0310 	bic.w	r3, r3, #16
 8004756:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004764:	61fa      	str	r2, [r7, #28]
 8004766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	69b9      	ldr	r1, [r7, #24]
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	617b      	str	r3, [r7, #20]
   return(result);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e3      	bne.n	8004740 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800477c:	4619      	mov	r1, r3
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f83e 	bl	8004800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004784:	e023      	b.n	80047ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_UART_IRQHandler+0x4ea>
 8004792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f959 	bl	8004a56 <UART_Transmit_IT>
    return;
 80047a4:	e014      	b.n	80047d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00e      	beq.n	80047d0 <HAL_UART_IRQHandler+0x514>
 80047b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f999 	bl	8004af6 <UART_EndTransmit_IT>
    return;
 80047c4:	e004      	b.n	80047d0 <HAL_UART_IRQHandler+0x514>
    return;
 80047c6:	bf00      	nop
 80047c8:	e002      	b.n	80047d0 <HAL_UART_IRQHandler+0x514>
      return;
 80047ca:	bf00      	nop
 80047cc:	e000      	b.n	80047d0 <HAL_UART_IRQHandler+0x514>
      return;
 80047ce:	bf00      	nop
  }
}
 80047d0:	37e8      	adds	r7, #232	; 0xe8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop

080047d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b090      	sub	sp, #64	; 0x40
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004828:	e050      	b.n	80048cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004830:	d04c      	beq.n	80048cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <UART_WaitOnFlagUntilTimeout+0x30>
 8004838:	f7fc fef2 	bl	8001620 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004844:	429a      	cmp	r2, r3
 8004846:	d241      	bcs.n	80048cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004868:	637a      	str	r2, [r7, #52]	; 0x34
 800486a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800486e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	613b      	str	r3, [r7, #16]
   return(result);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	63bb      	str	r3, [r7, #56]	; 0x38
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3314      	adds	r3, #20
 800489a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800489c:	623a      	str	r2, [r7, #32]
 800489e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	69f9      	ldr	r1, [r7, #28]
 80048a2:	6a3a      	ldr	r2, [r7, #32]
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e5      	bne.n	800487c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e00f      	b.n	80048ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	429a      	cmp	r2, r3
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d09f      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3740      	adds	r7, #64	; 0x40
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	4613      	mov	r3, r2
 8004900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2222      	movs	r2, #34	; 0x22
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004938:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0220 	orr.w	r2, r2, #32
 8004958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004968:	b480      	push	{r7}
 800496a:	b095      	sub	sp, #84	; 0x54
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004990:	643a      	str	r2, [r7, #64]	; 0x40
 8004992:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e5      	bne.n	8004970 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3314      	adds	r3, #20
 80049c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e5      	bne.n	80049a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d119      	bne.n	8004a14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	330c      	adds	r3, #12
 80049e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f023 0310 	bic.w	r3, r3, #16
 80049f6:	647b      	str	r3, [r7, #68]	; 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a00:	61ba      	str	r2, [r7, #24]
 8004a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6979      	ldr	r1, [r7, #20]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e5      	bne.n	80049e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a22:	bf00      	nop
 8004a24:	3754      	adds	r7, #84	; 0x54
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff fecf 	bl	80047ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b21      	cmp	r3, #33	; 0x21
 8004a68:	d13e      	bne.n	8004ae8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	d114      	bne.n	8004a9e <UART_Transmit_IT+0x48>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d110      	bne.n	8004a9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	1c9a      	adds	r2, r3, #2
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	621a      	str	r2, [r3, #32]
 8004a9c:	e008      	b.n	8004ab0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	1c59      	adds	r1, r3, #1
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6211      	str	r1, [r2, #32]
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	4619      	mov	r1, r3
 8004abe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10f      	bne.n	8004ae4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e000      	b.n	8004aea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ae8:	2302      	movs	r3, #2
  }
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff fe5e 	bl	80047d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b08c      	sub	sp, #48	; 0x30
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b22      	cmp	r3, #34	; 0x22
 8004b38:	f040 80ab 	bne.w	8004c92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	d117      	bne.n	8004b76 <UART_Receive_IT+0x50>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d113      	bne.n	8004b76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	1c9a      	adds	r2, r3, #2
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28
 8004b74:	e026      	b.n	8004bc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b88:	d007      	beq.n	8004b9a <UART_Receive_IT+0x74>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <UART_Receive_IT+0x82>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	e008      	b.n	8004bba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d15a      	bne.n	8004c8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0220 	bic.w	r2, r2, #32
 8004be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d135      	bne.n	8004c84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f023 0310 	bic.w	r3, r3, #16
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3e:	623a      	str	r2, [r7, #32]
 8004c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	69f9      	ldr	r1, [r7, #28]
 8004c44:	6a3a      	ldr	r2, [r7, #32]
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e5      	bne.n	8004c1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d10a      	bne.n	8004c76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff fdbf 	bl	8004800 <HAL_UARTEx_RxEventCallback>
 8004c82:	e002      	b.n	8004c8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7fc f835 	bl	8000cf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e002      	b.n	8004c94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e000      	b.n	8004c94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
  }
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3730      	adds	r7, #48	; 0x30
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	b09f      	sub	sp, #124	; 0x7c
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb2:	68d9      	ldr	r1, [r3, #12]
 8004cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	ea40 0301 	orr.w	r3, r0, r1
 8004cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ce0:	f021 010c 	bic.w	r1, r1, #12
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cea:	430b      	orrs	r3, r1
 8004cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	6999      	ldr	r1, [r3, #24]
 8004cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	ea40 0301 	orr.w	r3, r0, r1
 8004d04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4bc5      	ldr	r3, [pc, #788]	; (8005020 <UART_SetConfig+0x384>)
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d004      	beq.n	8004d1a <UART_SetConfig+0x7e>
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4bc3      	ldr	r3, [pc, #780]	; (8005024 <UART_SetConfig+0x388>)
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d103      	bne.n	8004d22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d1a:	f7fe fd3d 	bl	8003798 <HAL_RCC_GetPCLK2Freq>
 8004d1e:	6778      	str	r0, [r7, #116]	; 0x74
 8004d20:	e002      	b.n	8004d28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d22:	f7fe fd25 	bl	8003770 <HAL_RCC_GetPCLK1Freq>
 8004d26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d30:	f040 80b6 	bne.w	8004ea0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d36:	461c      	mov	r4, r3
 8004d38:	f04f 0500 	mov.w	r5, #0
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	462b      	mov	r3, r5
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	6439      	str	r1, [r7, #64]	; 0x40
 8004d44:	415b      	adcs	r3, r3
 8004d46:	647b      	str	r3, [r7, #68]	; 0x44
 8004d48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d4c:	1912      	adds	r2, r2, r4
 8004d4e:	eb45 0303 	adc.w	r3, r5, r3
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f04f 0100 	mov.w	r1, #0
 8004d5a:	00d9      	lsls	r1, r3, #3
 8004d5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d60:	00d0      	lsls	r0, r2, #3
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	1911      	adds	r1, r2, r4
 8004d68:	6639      	str	r1, [r7, #96]	; 0x60
 8004d6a:	416b      	adcs	r3, r5
 8004d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004d88:	f7fb fa9a 	bl	80002c0 <__aeabi_uldivmod>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4ba5      	ldr	r3, [pc, #660]	; (8005028 <UART_SetConfig+0x38c>)
 8004d92:	fba3 2302 	umull	r2, r3, r3, r2
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	011e      	lsls	r6, r3, #4
 8004d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d9c:	461c      	mov	r4, r3
 8004d9e:	f04f 0500 	mov.w	r5, #0
 8004da2:	4622      	mov	r2, r4
 8004da4:	462b      	mov	r3, r5
 8004da6:	1891      	adds	r1, r2, r2
 8004da8:	6339      	str	r1, [r7, #48]	; 0x30
 8004daa:	415b      	adcs	r3, r3
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
 8004dae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004db2:	1912      	adds	r2, r2, r4
 8004db4:	eb45 0303 	adc.w	r3, r5, r3
 8004db8:	f04f 0000 	mov.w	r0, #0
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	00d9      	lsls	r1, r3, #3
 8004dc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dc6:	00d0      	lsls	r0, r2, #3
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	1911      	adds	r1, r2, r4
 8004dce:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dd0:	416b      	adcs	r3, r5
 8004dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	1891      	adds	r1, r2, r2
 8004de0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004de2:	415b      	adcs	r3, r3
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004dee:	f7fb fa67 	bl	80002c0 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4b8c      	ldr	r3, [pc, #560]	; (8005028 <UART_SetConfig+0x38c>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	2164      	movs	r1, #100	; 0x64
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	3332      	adds	r3, #50	; 0x32
 8004e0a:	4a87      	ldr	r2, [pc, #540]	; (8005028 <UART_SetConfig+0x38c>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e18:	441e      	add	r6, r3
 8004e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f04f 0100 	mov.w	r1, #0
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	1894      	adds	r4, r2, r2
 8004e28:	623c      	str	r4, [r7, #32]
 8004e2a:	415b      	adcs	r3, r3
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e32:	1812      	adds	r2, r2, r0
 8004e34:	eb41 0303 	adc.w	r3, r1, r3
 8004e38:	f04f 0400 	mov.w	r4, #0
 8004e3c:	f04f 0500 	mov.w	r5, #0
 8004e40:	00dd      	lsls	r5, r3, #3
 8004e42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e46:	00d4      	lsls	r4, r2, #3
 8004e48:	4622      	mov	r2, r4
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	1814      	adds	r4, r2, r0
 8004e4e:	653c      	str	r4, [r7, #80]	; 0x50
 8004e50:	414b      	adcs	r3, r1
 8004e52:	657b      	str	r3, [r7, #84]	; 0x54
 8004e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	61b9      	str	r1, [r7, #24]
 8004e62:	415b      	adcs	r3, r3
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e6e:	f7fb fa27 	bl	80002c0 <__aeabi_uldivmod>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4b6c      	ldr	r3, [pc, #432]	; (8005028 <UART_SetConfig+0x38c>)
 8004e78:	fba3 1302 	umull	r1, r3, r3, r2
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	2164      	movs	r1, #100	; 0x64
 8004e80:	fb01 f303 	mul.w	r3, r1, r3
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	3332      	adds	r3, #50	; 0x32
 8004e8a:	4a67      	ldr	r2, [pc, #412]	; (8005028 <UART_SetConfig+0x38c>)
 8004e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	f003 0207 	and.w	r2, r3, #7
 8004e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4432      	add	r2, r6
 8004e9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e9e:	e0b9      	b.n	8005014 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ea2:	461c      	mov	r4, r3
 8004ea4:	f04f 0500 	mov.w	r5, #0
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	462b      	mov	r3, r5
 8004eac:	1891      	adds	r1, r2, r2
 8004eae:	6139      	str	r1, [r7, #16]
 8004eb0:	415b      	adcs	r3, r3
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004eb8:	1912      	adds	r2, r2, r4
 8004eba:	eb45 0303 	adc.w	r3, r5, r3
 8004ebe:	f04f 0000 	mov.w	r0, #0
 8004ec2:	f04f 0100 	mov.w	r1, #0
 8004ec6:	00d9      	lsls	r1, r3, #3
 8004ec8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ecc:	00d0      	lsls	r0, r2, #3
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	eb12 0804 	adds.w	r8, r2, r4
 8004ed6:	eb43 0905 	adc.w	r9, r3, r5
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	008b      	lsls	r3, r1, #2
 8004eee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ef2:	0082      	lsls	r2, r0, #2
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	f7fb f9e2 	bl	80002c0 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4b49      	ldr	r3, [pc, #292]	; (8005028 <UART_SetConfig+0x38c>)
 8004f02:	fba3 2302 	umull	r2, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	011e      	lsls	r6, r3, #4
 8004f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f04f 0100 	mov.w	r1, #0
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	1894      	adds	r4, r2, r2
 8004f18:	60bc      	str	r4, [r7, #8]
 8004f1a:	415b      	adcs	r3, r3
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f22:	1812      	adds	r2, r2, r0
 8004f24:	eb41 0303 	adc.w	r3, r1, r3
 8004f28:	f04f 0400 	mov.w	r4, #0
 8004f2c:	f04f 0500 	mov.w	r5, #0
 8004f30:	00dd      	lsls	r5, r3, #3
 8004f32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f36:	00d4      	lsls	r4, r2, #3
 8004f38:	4622      	mov	r2, r4
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	1814      	adds	r4, r2, r0
 8004f3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f40:	414b      	adcs	r3, r1
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f04f 0100 	mov.w	r1, #0
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	008b      	lsls	r3, r1, #2
 8004f58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f5c:	0082      	lsls	r2, r0, #2
 8004f5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f62:	f7fb f9ad 	bl	80002c0 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	; (8005028 <UART_SetConfig+0x38c>)
 8004f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	2164      	movs	r1, #100	; 0x64
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	3332      	adds	r3, #50	; 0x32
 8004f7e:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <UART_SetConfig+0x38c>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f8a:	441e      	add	r6, r3
 8004f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	1894      	adds	r4, r2, r2
 8004f9a:	603c      	str	r4, [r7, #0]
 8004f9c:	415b      	adcs	r3, r3
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa4:	1812      	adds	r2, r2, r0
 8004fa6:	eb41 0303 	adc.w	r3, r1, r3
 8004faa:	f04f 0400 	mov.w	r4, #0
 8004fae:	f04f 0500 	mov.w	r5, #0
 8004fb2:	00dd      	lsls	r5, r3, #3
 8004fb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fb8:	00d4      	lsls	r4, r2, #3
 8004fba:	4622      	mov	r2, r4
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	eb12 0a00 	adds.w	sl, r2, r0
 8004fc2:	eb43 0b01 	adc.w	fp, r3, r1
 8004fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	008b      	lsls	r3, r1, #2
 8004fda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fde:	0082      	lsls	r2, r0, #2
 8004fe0:	4650      	mov	r0, sl
 8004fe2:	4659      	mov	r1, fp
 8004fe4:	f7fb f96c 	bl	80002c0 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <UART_SetConfig+0x38c>)
 8004fee:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	2164      	movs	r1, #100	; 0x64
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	3332      	adds	r3, #50	; 0x32
 8005000:	4a09      	ldr	r2, [pc, #36]	; (8005028 <UART_SetConfig+0x38c>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4432      	add	r2, r6
 8005012:	609a      	str	r2, [r3, #8]
}
 8005014:	bf00      	nop
 8005016:	377c      	adds	r7, #124	; 0x7c
 8005018:	46bd      	mov	sp, r7
 800501a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501e:	bf00      	nop
 8005020:	40011000 	.word	0x40011000
 8005024:	40011400 	.word	0x40011400
 8005028:	51eb851f 	.word	0x51eb851f

0800502c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800502c:	b084      	sub	sp, #16
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	f107 001c 	add.w	r0, r7, #28
 800503a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	2b01      	cmp	r3, #1
 8005042:	d122      	bne.n	800508a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800506c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506e:	2b01      	cmp	r3, #1
 8005070:	d105      	bne.n	800507e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f001 fb16 	bl	80066b0 <USB_CoreReset>
 8005084:	4603      	mov	r3, r0
 8005086:	73fb      	strb	r3, [r7, #15]
 8005088:	e01a      	b.n	80050c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f001 fb0a 	bl	80066b0 <USB_CoreReset>
 800509c:	4603      	mov	r3, r0
 800509e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
 80050b2:	e005      	b.n	80050c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d10b      	bne.n	80050de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f043 0206 	orr.w	r2, r3, #6
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f043 0220 	orr.w	r2, r3, #32
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050ea:	b004      	add	sp, #16
 80050ec:	4770      	bx	lr
	...

080050f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d165      	bne.n	80051d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4a41      	ldr	r2, [pc, #260]	; (800520c <USB_SetTurnaroundTime+0x11c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d906      	bls.n	800511a <USB_SetTurnaroundTime+0x2a>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4a40      	ldr	r2, [pc, #256]	; (8005210 <USB_SetTurnaroundTime+0x120>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d202      	bcs.n	800511a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005114:	230f      	movs	r3, #15
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e062      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4a3c      	ldr	r2, [pc, #240]	; (8005210 <USB_SetTurnaroundTime+0x120>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d306      	bcc.n	8005130 <USB_SetTurnaroundTime+0x40>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <USB_SetTurnaroundTime+0x124>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d202      	bcs.n	8005130 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800512a:	230e      	movs	r3, #14
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e057      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4a38      	ldr	r2, [pc, #224]	; (8005214 <USB_SetTurnaroundTime+0x124>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d306      	bcc.n	8005146 <USB_SetTurnaroundTime+0x56>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4a37      	ldr	r2, [pc, #220]	; (8005218 <USB_SetTurnaroundTime+0x128>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d202      	bcs.n	8005146 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005140:	230d      	movs	r3, #13
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	e04c      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4a33      	ldr	r2, [pc, #204]	; (8005218 <USB_SetTurnaroundTime+0x128>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d306      	bcc.n	800515c <USB_SetTurnaroundTime+0x6c>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4a32      	ldr	r2, [pc, #200]	; (800521c <USB_SetTurnaroundTime+0x12c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d802      	bhi.n	800515c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005156:	230c      	movs	r3, #12
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	e041      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4a2f      	ldr	r2, [pc, #188]	; (800521c <USB_SetTurnaroundTime+0x12c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d906      	bls.n	8005172 <USB_SetTurnaroundTime+0x82>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4a2e      	ldr	r2, [pc, #184]	; (8005220 <USB_SetTurnaroundTime+0x130>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d802      	bhi.n	8005172 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800516c:	230b      	movs	r3, #11
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	e036      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4a2a      	ldr	r2, [pc, #168]	; (8005220 <USB_SetTurnaroundTime+0x130>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d906      	bls.n	8005188 <USB_SetTurnaroundTime+0x98>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4a29      	ldr	r2, [pc, #164]	; (8005224 <USB_SetTurnaroundTime+0x134>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d802      	bhi.n	8005188 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005182:	230a      	movs	r3, #10
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e02b      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4a26      	ldr	r2, [pc, #152]	; (8005224 <USB_SetTurnaroundTime+0x134>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d906      	bls.n	800519e <USB_SetTurnaroundTime+0xae>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a25      	ldr	r2, [pc, #148]	; (8005228 <USB_SetTurnaroundTime+0x138>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d202      	bcs.n	800519e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005198:	2309      	movs	r3, #9
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	e020      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4a21      	ldr	r2, [pc, #132]	; (8005228 <USB_SetTurnaroundTime+0x138>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d306      	bcc.n	80051b4 <USB_SetTurnaroundTime+0xc4>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4a20      	ldr	r2, [pc, #128]	; (800522c <USB_SetTurnaroundTime+0x13c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d802      	bhi.n	80051b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80051ae:	2308      	movs	r3, #8
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	e015      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4a1d      	ldr	r2, [pc, #116]	; (800522c <USB_SetTurnaroundTime+0x13c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d906      	bls.n	80051ca <USB_SetTurnaroundTime+0xda>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4a1c      	ldr	r2, [pc, #112]	; (8005230 <USB_SetTurnaroundTime+0x140>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d202      	bcs.n	80051ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80051c4:	2307      	movs	r3, #7
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e00a      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80051ca:	2306      	movs	r3, #6
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e007      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d102      	bne.n	80051dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80051d6:	2309      	movs	r3, #9
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	e001      	b.n	80051e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80051dc:	2309      	movs	r3, #9
 80051de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	029b      	lsls	r3, r3, #10
 80051f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80051f8:	431a      	orrs	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	00d8acbf 	.word	0x00d8acbf
 8005210:	00e4e1c0 	.word	0x00e4e1c0
 8005214:	00f42400 	.word	0x00f42400
 8005218:	01067380 	.word	0x01067380
 800521c:	011a499f 	.word	0x011a499f
 8005220:	01312cff 	.word	0x01312cff
 8005224:	014ca43f 	.word	0x014ca43f
 8005228:	016e3600 	.word	0x016e3600
 800522c:	01a6ab1f 	.word	0x01a6ab1f
 8005230:	01e84800 	.word	0x01e84800

08005234 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f043 0201 	orr.w	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f023 0201 	bic.w	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d115      	bne.n	80052c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052a6:	2001      	movs	r0, #1
 80052a8:	f7fc f9c6 	bl	8001638 <HAL_Delay>
      ms++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 f96c 	bl	8006590 <USB_GetMode>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d01e      	beq.n	80052fc <USB_SetCurrentMode+0x84>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b31      	cmp	r3, #49	; 0x31
 80052c2:	d9f0      	bls.n	80052a6 <USB_SetCurrentMode+0x2e>
 80052c4:	e01a      	b.n	80052fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d115      	bne.n	80052f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052d8:	2001      	movs	r0, #1
 80052da:	f7fc f9ad 	bl	8001638 <HAL_Delay>
      ms++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f001 f953 	bl	8006590 <USB_GetMode>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <USB_SetCurrentMode+0x84>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b31      	cmp	r3, #49	; 0x31
 80052f4:	d9f0      	bls.n	80052d8 <USB_SetCurrentMode+0x60>
 80052f6:	e001      	b.n	80052fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e005      	b.n	8005308 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b32      	cmp	r3, #50	; 0x32
 8005300:	d101      	bne.n	8005306 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005310:	b084      	sub	sp, #16
 8005312:	b580      	push	{r7, lr}
 8005314:	b086      	sub	sp, #24
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800531e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800532a:	2300      	movs	r3, #0
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	e009      	b.n	8005344 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3340      	adds	r3, #64	; 0x40
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	2200      	movs	r2, #0
 800533c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3301      	adds	r3, #1
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b0e      	cmp	r3, #14
 8005348:	d9f2      	bls.n	8005330 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800534a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d11c      	bne.n	800538a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535e:	f043 0302 	orr.w	r3, r3, #2
 8005362:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e005      	b.n	8005396 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800539c:	461a      	mov	r2, r3
 800539e:	2300      	movs	r3, #0
 80053a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	4619      	mov	r1, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b0:	461a      	mov	r2, r3
 80053b2:	680b      	ldr	r3, [r1, #0]
 80053b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d10c      	bne.n	80053d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053c2:	2100      	movs	r1, #0
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f945 	bl	8005654 <USB_SetDevSpeed>
 80053ca:	e008      	b.n	80053de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053cc:	2101      	movs	r1, #1
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f940 	bl	8005654 <USB_SetDevSpeed>
 80053d4:	e003      	b.n	80053de <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053d6:	2103      	movs	r1, #3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f93b 	bl	8005654 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053de:	2110      	movs	r1, #16
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8f3 	bl	80055cc <USB_FlushTxFifo>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f90f 	bl	8005614 <USB_FlushRxFifo>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	461a      	mov	r2, r3
 8005408:	2300      	movs	r3, #0
 800540a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	461a      	mov	r2, r3
 8005414:	2300      	movs	r3, #0
 8005416:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	461a      	mov	r2, r3
 8005420:	2300      	movs	r3, #0
 8005422:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e043      	b.n	80054b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005440:	d118      	bne.n	8005474 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	461a      	mov	r2, r3
 8005456:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	e013      	b.n	8005486 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	461a      	mov	r2, r3
 800546c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e008      	b.n	8005486 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	461a      	mov	r2, r3
 8005482:	2300      	movs	r3, #0
 8005484:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	461a      	mov	r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	461a      	mov	r2, r3
 80054a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	3301      	adds	r3, #1
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d3b7      	bcc.n	800542a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e043      	b.n	8005548 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d6:	d118      	bne.n	800550a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ea:	461a      	mov	r2, r3
 80054ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e013      	b.n	800551c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005500:	461a      	mov	r2, r3
 8005502:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	e008      	b.n	800551c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	461a      	mov	r2, r3
 8005518:	2300      	movs	r3, #0
 800551a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	461a      	mov	r2, r3
 800552a:	2300      	movs	r3, #0
 800552c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	461a      	mov	r2, r3
 800553c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005540:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3301      	adds	r3, #1
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	429a      	cmp	r2, r3
 800554e:	d3b7      	bcc.n	80054c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800555e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005562:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005570:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	2b00      	cmp	r3, #0
 8005576:	d105      	bne.n	8005584 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f043 0210 	orr.w	r2, r3, #16
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699a      	ldr	r2, [r3, #24]
 8005588:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <USB_DevInit+0x2b8>)
 800558a:	4313      	orrs	r3, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f043 0208 	orr.w	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d107      	bne.n	80055b8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b0:	f043 0304 	orr.w	r3, r3, #4
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c4:	b004      	add	sp, #16
 80055c6:	4770      	bx	lr
 80055c8:	803c3800 	.word	0x803c3800

080055cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	019b      	lsls	r3, r3, #6
 80055de:	f043 0220 	orr.w	r2, r3, #32
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3301      	adds	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	4a08      	ldr	r2, [pc, #32]	; (8005610 <USB_FlushTxFifo+0x44>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e006      	b.n	8005604 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d0f1      	beq.n	80055e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	00030d40 	.word	0x00030d40

08005614 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2210      	movs	r2, #16
 8005624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3301      	adds	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	4a08      	ldr	r2, [pc, #32]	; (8005650 <USB_FlushRxFifo+0x3c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e006      	b.n	8005644 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2b10      	cmp	r3, #16
 8005640:	d0f1      	beq.n	8005626 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	00030d40 	.word	0x00030d40

08005654 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	68f9      	ldr	r1, [r7, #12]
 8005670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005674:	4313      	orrs	r3, r2
 8005676:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005686:	b480      	push	{r7}
 8005688:	b087      	sub	sp, #28
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0306 	and.w	r3, r3, #6
 800569e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]
 80056aa:	e00a      	b.n	80056c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d002      	beq.n	80056b8 <USB_GetDevSpeed+0x32>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d102      	bne.n	80056be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056b8:	2302      	movs	r3, #2
 80056ba:	75fb      	strb	r3, [r7, #23]
 80056bc:	e001      	b.n	80056c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056be:	230f      	movs	r3, #15
 80056c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d13a      	bne.n	8005762 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	b29b      	uxth	r3, r3
 8005704:	68f9      	ldr	r1, [r7, #12]
 8005706:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800570a:	4313      	orrs	r3, r2
 800570c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d155      	bne.n	80057d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	78db      	ldrb	r3, [r3, #3]
 800573e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005740:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	059b      	lsls	r3, r3, #22
 8005746:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005748:	4313      	orrs	r3, r2
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	e036      	b.n	80057d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	69da      	ldr	r2, [r3, #28]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	2101      	movs	r1, #1
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005780:	4313      	orrs	r3, r2
 8005782:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d11a      	bne.n	80057d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	78db      	ldrb	r3, [r3, #3]
 80057b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057b6:	430b      	orrs	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	785b      	ldrb	r3, [r3, #1]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d161      	bne.n	80058c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800580e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005812:	d11f      	bne.n	8005854 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	440a      	add	r2, r1
 800582a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005832:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005852:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	2101      	movs	r1, #1
 8005866:	fa01 f303 	lsl.w	r3, r1, r3
 800586a:	b29b      	uxth	r3, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005874:	4013      	ands	r3, r2
 8005876:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	2101      	movs	r1, #1
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	b29b      	uxth	r3, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005898:	4013      	ands	r3, r2
 800589a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	0159      	lsls	r1, r3, #5
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	440b      	add	r3, r1
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	4619      	mov	r1, r3
 80058b8:	4b35      	ldr	r3, [pc, #212]	; (8005990 <USB_DeactivateEndpoint+0x1b0>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]
 80058be:	e060      	b.n	8005982 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d6:	d11f      	bne.n	8005918 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005916:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	2101      	movs	r1, #1
 800592a:	fa01 f303 	lsl.w	r3, r1, r3
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	43db      	mvns	r3, r3
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005938:	4013      	ands	r3, r2
 800593a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	2101      	movs	r1, #1
 800594e:	fa01 f303 	lsl.w	r3, r1, r3
 8005952:	041b      	lsls	r3, r3, #16
 8005954:	43db      	mvns	r3, r3
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800595c:	4013      	ands	r3, r2
 800595e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	0159      	lsls	r1, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	440b      	add	r3, r1
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	4619      	mov	r1, r3
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <USB_DeactivateEndpoint+0x1b4>)
 800597e:	4013      	ands	r3, r2
 8005980:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	ec337800 	.word	0xec337800
 8005994:	eff37800 	.word	0xeff37800

08005998 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	f040 815c 	bne.w	8005c72 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d132      	bne.n	8005a28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a20:	0cdb      	lsrs	r3, r3, #19
 8005a22:	04db      	lsls	r3, r3, #19
 8005a24:	6113      	str	r3, [r2, #16]
 8005a26:	e074      	b.n	8005b12 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a42:	0cdb      	lsrs	r3, r3, #19
 8005a44:	04db      	lsls	r3, r3, #19
 8005a46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a78:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6959      	ldr	r1, [r3, #20]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	440b      	add	r3, r1
 8005a84:	1e59      	subs	r1, r3, #1
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a8e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a90:	4b9d      	ldr	r3, [pc, #628]	; (8005d08 <USB_EPStartXfer+0x370>)
 8005a92:	400b      	ands	r3, r1
 8005a94:	69b9      	ldr	r1, [r7, #24]
 8005a96:	0148      	lsls	r0, r1, #5
 8005a98:	69f9      	ldr	r1, [r7, #28]
 8005a9a:	4401      	add	r1, r0
 8005a9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aba:	69b9      	ldr	r1, [r7, #24]
 8005abc:	0148      	lsls	r0, r1, #5
 8005abe:	69f9      	ldr	r1, [r7, #28]
 8005ac0:	4401      	add	r1, r0
 8005ac2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	78db      	ldrb	r3, [r3, #3]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d11f      	bne.n	8005b12 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005af0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d14b      	bne.n	8005bb0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	78db      	ldrb	r3, [r3, #3]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d128      	bne.n	8005b8e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d110      	bne.n	8005b6e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	e00f      	b.n	8005b8e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e12f      	b.n	8005e10 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	78db      	ldrb	r3, [r3, #3]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d015      	beq.n	8005c04 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8117 	beq.w	8005e10 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf8:	69f9      	ldr	r1, [r7, #28]
 8005bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	634b      	str	r3, [r1, #52]	; 0x34
 8005c02:	e105      	b.n	8005e10 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d110      	bne.n	8005c36 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e00f      	b.n	8005c56 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	68d9      	ldr	r1, [r3, #12]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	b298      	uxth	r0, r3
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fa2b 	bl	80060c6 <USB_WritePacket>
 8005c70:	e0ce      	b.n	8005e10 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c8c:	0cdb      	lsrs	r3, r3, #19
 8005c8e:	04db      	lsls	r3, r3, #19
 8005c90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cb4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d126      	bne.n	8005d0c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd4:	69b9      	ldr	r1, [r7, #24]
 8005cd6:	0148      	lsls	r0, r1, #5
 8005cd8:	69f9      	ldr	r1, [r7, #28]
 8005cda:	4401      	add	r1, r0
 8005cdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d02:	6113      	str	r3, [r2, #16]
 8005d04:	e036      	b.n	8005d74 <USB_EPStartXfer+0x3dc>
 8005d06:	bf00      	nop
 8005d08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4413      	add	r3, r2
 8005d16:	1e5a      	subs	r2, r3, #1
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	8afb      	ldrh	r3, [r7, #22]
 8005d32:	04d9      	lsls	r1, r3, #19
 8005d34:	4b39      	ldr	r3, [pc, #228]	; (8005e1c <USB_EPStartXfer+0x484>)
 8005d36:	400b      	ands	r3, r1
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	0148      	lsls	r0, r1, #5
 8005d3c:	69f9      	ldr	r1, [r7, #28]
 8005d3e:	4401      	add	r1, r0
 8005d40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d44:	4313      	orrs	r3, r2
 8005d46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	8af9      	ldrh	r1, [r7, #22]
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	0148      	lsls	r0, r1, #5
 8005d68:	69f9      	ldr	r1, [r7, #28]
 8005d6a:	4401      	add	r1, r0
 8005d6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d70:	4313      	orrs	r3, r2
 8005d72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d10d      	bne.n	8005d96 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	68d9      	ldr	r1, [r3, #12]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	460a      	mov	r2, r1
 8005d94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	78db      	ldrb	r3, [r3, #3]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d128      	bne.n	8005df0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d110      	bne.n	8005dd0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e00f      	b.n	8005df0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	1ff80000 	.word	0x1ff80000

08005e20 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	f040 80cd 	bne.w	8005fdc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d132      	bne.n	8005eb0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea8:	0cdb      	lsrs	r3, r3, #19
 8005eaa:	04db      	lsls	r3, r3, #19
 8005eac:	6113      	str	r3, [r2, #16]
 8005eae:	e04e      	b.n	8005f4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eca:	0cdb      	lsrs	r3, r3, #19
 8005ecc:	04db      	lsls	r3, r3, #19
 8005ece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ef2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d903      	bls.n	8005f08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f3e:	6939      	ldr	r1, [r7, #16]
 8005f40:	0148      	lsls	r0, r1, #5
 8005f42:	6979      	ldr	r1, [r7, #20]
 8005f44:	4401      	add	r1, r0
 8005f46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d11e      	bne.n	8005f92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d009      	beq.n	8005f70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	461a      	mov	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	e092      	b.n	80060b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d07e      	beq.n	80060b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	2101      	movs	r1, #1
 8005fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd0:	6979      	ldr	r1, [r7, #20]
 8005fd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	634b      	str	r3, [r1, #52]	; 0x34
 8005fda:	e06d      	b.n	80060b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff6:	0cdb      	lsrs	r3, r3, #19
 8005ff8:	04db      	lsls	r3, r3, #19
 8005ffa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006016:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800601a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800601e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800604e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006066:	6939      	ldr	r1, [r7, #16]
 8006068:	0148      	lsls	r0, r1, #5
 800606a:	6979      	ldr	r1, [r7, #20]
 800606c:	4401      	add	r1, r0
 800606e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006072:	4313      	orrs	r3, r2
 8006074:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10d      	bne.n	8006098 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	68d9      	ldr	r1, [r3, #12]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	460a      	mov	r2, r1
 8006096:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b089      	sub	sp, #36	; 0x24
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	4611      	mov	r1, r2
 80060d2:	461a      	mov	r2, r3
 80060d4:	460b      	mov	r3, r1
 80060d6:	71fb      	strb	r3, [r7, #7]
 80060d8:	4613      	mov	r3, r2
 80060da:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80060e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d123      	bne.n	8006134 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060ec:	88bb      	ldrh	r3, [r7, #4]
 80060ee:	3303      	adds	r3, #3
 80060f0:	089b      	lsrs	r3, r3, #2
 80060f2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e018      	b.n	800612c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	031a      	lsls	r2, r3, #12
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	4413      	add	r3, r2
 8006102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006106:	461a      	mov	r2, r3
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	3301      	adds	r3, #1
 8006112:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	3301      	adds	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	3301      	adds	r3, #1
 800611e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	3301      	adds	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	3301      	adds	r3, #1
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	429a      	cmp	r2, r3
 8006132:	d3e2      	bcc.n	80060fa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3724      	adds	r7, #36	; 0x24
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006142:	b480      	push	{r7}
 8006144:	b08b      	sub	sp, #44	; 0x2c
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	4613      	mov	r3, r2
 800614e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	089b      	lsrs	r3, r3, #2
 800615c:	b29b      	uxth	r3, r3
 800615e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006168:	2300      	movs	r3, #0
 800616a:	623b      	str	r3, [r7, #32]
 800616c:	e014      	b.n	8006198 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	601a      	str	r2, [r3, #0]
    pDest++;
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	3301      	adds	r3, #1
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	3301      	adds	r3, #1
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	3301      	adds	r3, #1
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	3301      	adds	r3, #1
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	3301      	adds	r3, #1
 8006196:	623b      	str	r3, [r7, #32]
 8006198:	6a3a      	ldr	r2, [r7, #32]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	429a      	cmp	r2, r3
 800619e:	d3e6      	bcc.n	800616e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061a0:	8bfb      	ldrh	r3, [r7, #30]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01e      	beq.n	80061e4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b0:	461a      	mov	r2, r3
 80061b2:	f107 0310 	add.w	r3, r7, #16
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	fa22 f303 	lsr.w	r3, r2, r3
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	701a      	strb	r2, [r3, #0]
      i++;
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	3301      	adds	r3, #1
 80061d0:	623b      	str	r3, [r7, #32]
      pDest++;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	3301      	adds	r3, #1
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80061d8:	8bfb      	ldrh	r3, [r7, #30]
 80061da:	3b01      	subs	r3, #1
 80061dc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061de:	8bfb      	ldrh	r3, [r7, #30]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1ea      	bne.n	80061ba <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	372c      	adds	r7, #44	; 0x2c
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d12c      	bne.n	8006268 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	db12      	blt.n	8006246 <USB_EPSetStall+0x54>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00f      	beq.n	8006246 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006240:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006244:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	440a      	add	r2, r1
 800625c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e02b      	b.n	80062c0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	db12      	blt.n	80062a0 <USB_EPSetStall+0xae>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00f      	beq.n	80062a0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800629e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d128      	bne.n	800633c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006308:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	78db      	ldrb	r3, [r3, #3]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d003      	beq.n	800631a <USB_EPClearStall+0x4c>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	78db      	ldrb	r3, [r3, #3]
 8006316:	2b02      	cmp	r3, #2
 8006318:	d138      	bne.n	800638c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	e027      	b.n	800638c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	440a      	add	r2, r1
 8006352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800635a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	78db      	ldrb	r3, [r3, #3]
 8006360:	2b03      	cmp	r3, #3
 8006362:	d003      	beq.n	800636c <USB_EPClearStall+0x9e>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	78db      	ldrb	r3, [r3, #3]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d10f      	bne.n	800638c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063bc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80063ce:	68f9      	ldr	r1, [r7, #12]
 80063d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d4:	4313      	orrs	r3, r2
 80063d6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006400:	f023 0303 	bic.w	r3, r3, #3
 8006404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006414:	f023 0302 	bic.w	r3, r3, #2
 8006418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006456:	f043 0302 	orr.w	r3, r3, #2
 800645a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4013      	ands	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006482:	68fb      	ldr	r3, [r7, #12]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	4013      	ands	r3, r2
 80064b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	0c1b      	lsrs	r3, r3, #16
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	4013      	ands	r3, r2
 80064e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	b29b      	uxth	r3, r3
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	4013      	ands	r3, r2
 8006524:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006526:	68bb      	ldr	r3, [r7, #8]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
 8006564:	01db      	lsls	r3, r3, #7
 8006566:	b2db      	uxtb	r3, r3
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800656e:	78fb      	ldrb	r3, [r7, #3]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4013      	ands	r3, r2
 8006580:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006582:	68bb      	ldr	r3, [r7, #8]
}
 8006584:	4618      	mov	r0, r3
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f003 0301 	and.w	r3, r3, #1
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065ca:	f023 0307 	bic.w	r3, r3, #7
 80065ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
	...

080065f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	460b      	mov	r3, r1
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	333c      	adds	r3, #60	; 0x3c
 800660a:	3304      	adds	r3, #4
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	4a26      	ldr	r2, [pc, #152]	; (80066ac <USB_EP0_OutStart+0xb8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d90a      	bls.n	800662e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006628:	d101      	bne.n	800662e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e037      	b.n	800669e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	461a      	mov	r2, r3
 8006636:	2300      	movs	r3, #0
 8006638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800664c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665c:	f043 0318 	orr.w	r3, r3, #24
 8006660:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006670:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006674:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d10f      	bne.n	800669c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006696:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800669a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	4f54300a 	.word	0x4f54300a

080066b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3301      	adds	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	4a13      	ldr	r2, [pc, #76]	; (8006710 <USB_CoreReset+0x60>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e01a      	b.n	8006702 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	daf3      	bge.n	80066bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f043 0201 	orr.w	r2, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	4a09      	ldr	r2, [pc, #36]	; (8006710 <USB_CoreReset+0x60>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d901      	bls.n	80066f4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e006      	b.n	8006702 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d0f1      	beq.n	80066e4 <USB_CoreReset+0x34>

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	00030d40 	.word	0x00030d40

08006714 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006720:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006724:	f002 f9f2 	bl	8008b0c <USBD_static_malloc>
 8006728:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006738:	2302      	movs	r3, #2
 800673a:	e066      	b.n	800680a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7c1b      	ldrb	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d119      	bne.n	8006780 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800674c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006750:	2202      	movs	r2, #2
 8006752:	2181      	movs	r1, #129	; 0x81
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f002 f868 	bl	800882a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006764:	2202      	movs	r2, #2
 8006766:	2101      	movs	r1, #1
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 f85e 	bl	800882a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2210      	movs	r2, #16
 800677a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800677e:	e016      	b.n	80067ae <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006780:	2340      	movs	r3, #64	; 0x40
 8006782:	2202      	movs	r2, #2
 8006784:	2181      	movs	r1, #129	; 0x81
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f002 f84f 	bl	800882a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	2202      	movs	r2, #2
 8006796:	2101      	movs	r1, #1
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f002 f846 	bl	800882a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2210      	movs	r2, #16
 80067aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067ae:	2308      	movs	r3, #8
 80067b0:	2203      	movs	r2, #3
 80067b2:	2182      	movs	r1, #130	; 0x82
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f002 f838 	bl	800882a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	7c1b      	ldrb	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d109      	bne.n	80067f8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ee:	2101      	movs	r1, #1
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f002 f909 	bl	8008a08 <USBD_LL_PrepareReceive>
 80067f6:	e007      	b.n	8006808 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067fe:	2340      	movs	r3, #64	; 0x40
 8006800:	2101      	movs	r1, #1
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f002 f900 	bl	8008a08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800681e:	2181      	movs	r1, #129	; 0x81
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f002 f828 	bl	8008876 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800682c:	2101      	movs	r1, #1
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f002 f821 	bl	8008876 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800683c:	2182      	movs	r1, #130	; 0x82
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f002 f819 	bl	8008876 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00e      	beq.n	800687c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800686e:	4618      	mov	r0, r3
 8006870:	f002 f95a 	bl	8008b28 <USBD_static_free>
    pdev->pClassData = NULL;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006898:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e0af      	b.n	8006a10 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d03f      	beq.n	800693c <USBD_CDC_Setup+0xb4>
 80068bc:	2b20      	cmp	r3, #32
 80068be:	f040 809f 	bne.w	8006a00 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	88db      	ldrh	r3, [r3, #6]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d02e      	beq.n	8006928 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	b25b      	sxtb	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	da16      	bge.n	8006902 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80068e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	88d2      	ldrh	r2, [r2, #6]
 80068e6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	88db      	ldrh	r3, [r3, #6]
 80068ec:	2b07      	cmp	r3, #7
 80068ee:	bf28      	it	cs
 80068f0:	2307      	movcs	r3, #7
 80068f2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	89fa      	ldrh	r2, [r7, #14]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fb43 	bl	8007f86 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006900:	e085      	b.n	8006a0e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	785a      	ldrb	r2, [r3, #1]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	88db      	ldrh	r3, [r3, #6]
 8006910:	b2da      	uxtb	r2, r3
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006918:	6939      	ldr	r1, [r7, #16]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	88db      	ldrh	r3, [r3, #6]
 800691e:	461a      	mov	r2, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fb5c 	bl	8007fde <USBD_CtlPrepareRx>
      break;
 8006926:	e072      	b.n	8006a0e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	7850      	ldrb	r0, [r2, #1]
 8006934:	2200      	movs	r2, #0
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	4798      	blx	r3
      break;
 800693a:	e068      	b.n	8006a0e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b0b      	cmp	r3, #11
 8006942:	d852      	bhi.n	80069ea <USBD_CDC_Setup+0x162>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <USBD_CDC_Setup+0xc4>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	0800697d 	.word	0x0800697d
 8006950:	080069f9 	.word	0x080069f9
 8006954:	080069eb 	.word	0x080069eb
 8006958:	080069eb 	.word	0x080069eb
 800695c:	080069eb 	.word	0x080069eb
 8006960:	080069eb 	.word	0x080069eb
 8006964:	080069eb 	.word	0x080069eb
 8006968:	080069eb 	.word	0x080069eb
 800696c:	080069eb 	.word	0x080069eb
 8006970:	080069eb 	.word	0x080069eb
 8006974:	080069a7 	.word	0x080069a7
 8006978:	080069d1 	.word	0x080069d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b03      	cmp	r3, #3
 8006986:	d107      	bne.n	8006998 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006988:	f107 030a 	add.w	r3, r7, #10
 800698c:	2202      	movs	r2, #2
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 faf8 	bl	8007f86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006996:	e032      	b.n	80069fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fa82 	bl	8007ea4 <USBD_CtlError>
            ret = USBD_FAIL;
 80069a0:	2303      	movs	r3, #3
 80069a2:	75fb      	strb	r3, [r7, #23]
          break;
 80069a4:	e02b      	b.n	80069fe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d107      	bne.n	80069c2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069b2:	f107 030d 	add.w	r3, r7, #13
 80069b6:	2201      	movs	r2, #1
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fae3 	bl	8007f86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069c0:	e01d      	b.n	80069fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 fa6d 	bl	8007ea4 <USBD_CtlError>
            ret = USBD_FAIL;
 80069ca:	2303      	movs	r3, #3
 80069cc:	75fb      	strb	r3, [r7, #23]
          break;
 80069ce:	e016      	b.n	80069fe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d00f      	beq.n	80069fc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 fa60 	bl	8007ea4 <USBD_CtlError>
            ret = USBD_FAIL;
 80069e4:	2303      	movs	r3, #3
 80069e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069e8:	e008      	b.n	80069fc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 fa59 	bl	8007ea4 <USBD_CtlError>
          ret = USBD_FAIL;
 80069f2:	2303      	movs	r3, #3
 80069f4:	75fb      	strb	r3, [r7, #23]
          break;
 80069f6:	e002      	b.n	80069fe <USBD_CDC_Setup+0x176>
          break;
 80069f8:	bf00      	nop
 80069fa:	e008      	b.n	8006a0e <USBD_CDC_Setup+0x186>
          break;
 80069fc:	bf00      	nop
      }
      break;
 80069fe:	e006      	b.n	8006a0e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fa4e 	bl	8007ea4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e04f      	b.n	8006ada <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a42:	78fa      	ldrb	r2, [r7, #3]
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	3318      	adds	r3, #24
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d029      	beq.n	8006aac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a58:	78fa      	ldrb	r2, [r7, #3]
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	3318      	adds	r3, #24
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	78f9      	ldrb	r1, [r7, #3]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	1a5b      	subs	r3, r3, r1
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4403      	add	r3, r0
 8006a78:	3344      	adds	r3, #68	; 0x44
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a80:	fb03 f301 	mul.w	r3, r3, r1
 8006a84:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d110      	bne.n	8006aac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006a8a:	78fa      	ldrb	r2, [r7, #3]
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	3318      	adds	r3, #24
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a9e:	78f9      	ldrb	r1, [r7, #3]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 ff8e 	bl	80089c6 <USBD_LL_Transmit>
 8006aaa:	e015      	b.n	8006ad8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ad4:	78fa      	ldrb	r2, [r7, #3]
 8006ad6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006af4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e015      	b.n	8006b30 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 ff9e 	bl	8008a4a <USBD_LL_GetRxDataSize>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e01b      	b.n	8006b8a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d015      	beq.n	8006b88 <USBD_CDC_EP0_RxReady+0x50>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b62:	2bff      	cmp	r3, #255	; 0xff
 8006b64:	d010      	beq.n	8006b88 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006b74:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b7c:	b292      	uxth	r2, r2
 8006b7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	22ff      	movs	r2, #255	; 0xff
 8006b84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2243      	movs	r2, #67	; 0x43
 8006ba0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006ba2:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	2000009c 	.word	0x2000009c

08006bb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2243      	movs	r2, #67	; 0x43
 8006bc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006bc2:	4b03      	ldr	r3, [pc, #12]	; (8006bd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	20000058 	.word	0x20000058

08006bd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2243      	movs	r2, #67	; 0x43
 8006be0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006be2:	4b03      	ldr	r3, [pc, #12]	; (8006bf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	200000e0 	.word	0x200000e0

08006bf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	220a      	movs	r2, #10
 8006c00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c02:	4b03      	ldr	r3, [pc, #12]	; (8006c10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	20000014 	.word	0x20000014

08006c14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e004      	b.n	8006c32 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b087      	sub	sp, #28
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c50:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e008      	b.n	8006c6e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c8a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e004      	b.n	8006ca0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e01a      	b.n	8006d04 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d114      	bne.n	8006d02 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006cf6:	2181      	movs	r1, #129	; 0x81
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fe64 	bl	80089c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e016      	b.n	8006d58 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	7c1b      	ldrb	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 fe62 	bl	8008a08 <USBD_LL_PrepareReceive>
 8006d44:	e007      	b.n	8006d56 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d4c:	2340      	movs	r3, #64	; 0x40
 8006d4e:	2101      	movs	r1, #1
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 fe59 	bl	8008a08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e01f      	b.n	8006db8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	79fa      	ldrb	r2, [r7, #7]
 8006daa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f001 fcd1 	bl	8008754 <USBD_LL_Init>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e016      	b.n	8006e06 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00b      	beq.n	8006e04 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	f107 020e 	add.w	r2, r7, #14
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4798      	blx	r3
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fcec 	bl	80087f4 <USBD_LL_Start>
 8006e1c:	4603      	mov	r3, r0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	78fa      	ldrb	r2, [r7, #3]
 8006e60:	4611      	mov	r1, r2
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	4798      	blx	r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d007      	beq.n	8006e9a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	4611      	mov	r1, r2
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
  }

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 ffba 	bl	8007e30 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006eca:	461a      	mov	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d01a      	beq.n	8006f16 <USBD_LL_SetupStage+0x72>
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d822      	bhi.n	8006f2a <USBD_LL_SetupStage+0x86>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <USBD_LL_SetupStage+0x4a>
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d00a      	beq.n	8006f02 <USBD_LL_SetupStage+0x5e>
 8006eec:	e01d      	b.n	8006f2a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa62 	bl	80073c0 <USBD_StdDevReq>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
      break;
 8006f00:	e020      	b.n	8006f44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fac6 	bl	800749c <USBD_StdItfReq>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]
      break;
 8006f14:	e016      	b.n	8006f44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fb05 	bl	800752e <USBD_StdEPReq>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
      break;
 8006f28:	e00c      	b.n	8006f44 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fcbb 	bl	80088b4 <USBD_LL_StallEP>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73fb      	strb	r3, [r7, #15]
      break;
 8006f42:	bf00      	nop
  }

  return ret;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b086      	sub	sp, #24
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	460b      	mov	r3, r1
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f5c:	7afb      	ldrb	r3, [r7, #11]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d138      	bne.n	8006fd4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d14a      	bne.n	800700a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d913      	bls.n	8006fa8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	1ad2      	subs	r2, r2, r3
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	68da      	ldr	r2, [r3, #12]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	4293      	cmp	r3, r2
 8006f98:	bf28      	it	cs
 8006f9a:	4613      	movcs	r3, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f001 f839 	bl	8008018 <USBD_CtlContinueRx>
 8006fa6:	e030      	b.n	800700a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d10b      	bne.n	8006fcc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 f834 	bl	800803a <USBD_CtlSendStatus>
 8006fd2:	e01a      	b.n	800700a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d114      	bne.n	800700a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00e      	beq.n	800700a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	7afa      	ldrb	r2, [r7, #11]
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	4798      	blx	r3
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	e000      	b.n	800700c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	460b      	mov	r3, r1
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d16b      	bne.n	8007100 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3314      	adds	r3, #20
 800702c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007034:	2b02      	cmp	r3, #2
 8007036:	d156      	bne.n	80070e6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	429a      	cmp	r2, r3
 8007042:	d914      	bls.n	800706e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	1ad2      	subs	r2, r2, r3
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	461a      	mov	r2, r3
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 ffae 	bl	8007fbc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007060:	2300      	movs	r3, #0
 8007062:	2200      	movs	r2, #0
 8007064:	2100      	movs	r1, #0
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f001 fcce 	bl	8008a08 <USBD_LL_PrepareReceive>
 800706c:	e03b      	b.n	80070e6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	429a      	cmp	r2, r3
 8007078:	d11c      	bne.n	80070b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007082:	429a      	cmp	r2, r3
 8007084:	d316      	bcc.n	80070b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007090:	429a      	cmp	r2, r3
 8007092:	d20f      	bcs.n	80070b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007094:	2200      	movs	r2, #0
 8007096:	2100      	movs	r1, #0
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 ff8f 	bl	8007fbc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070a6:	2300      	movs	r3, #0
 80070a8:	2200      	movs	r2, #0
 80070aa:	2100      	movs	r1, #0
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f001 fcab 	bl	8008a08 <USBD_LL_PrepareReceive>
 80070b2:	e018      	b.n	80070e6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d10b      	bne.n	80070d8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070d8:	2180      	movs	r1, #128	; 0x80
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f001 fbea 	bl	80088b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 ffbd 	bl	8008060 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d122      	bne.n	8007136 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f7ff fe98 	bl	8006e26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070fe:	e01a      	b.n	8007136 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b03      	cmp	r3, #3
 800710a:	d114      	bne.n	8007136 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00e      	beq.n	8007136 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	7afa      	ldrb	r2, [r7, #11]
 8007122:	4611      	mov	r1, r2
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	4798      	blx	r3
 8007128:	4603      	mov	r3, r0
 800712a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007132:	7dfb      	ldrb	r3, [r7, #23]
 8007134:	e000      	b.n	8007138 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	e02f      	b.n	80071d4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00f      	beq.n	800719e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6852      	ldr	r2, [r2, #4]
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	4611      	mov	r1, r2
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800719e:	2340      	movs	r3, #64	; 0x40
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fb40 	bl	800882a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2240      	movs	r2, #64	; 0x40
 80071b6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071ba:	2340      	movs	r3, #64	; 0x40
 80071bc:	2200      	movs	r2, #0
 80071be:	2180      	movs	r1, #128	; 0x80
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 fb32 	bl	800882a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2240      	movs	r2, #64	; 0x40
 80071d0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	78fa      	ldrb	r2, [r7, #3]
 80071ec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720a:	b2da      	uxtb	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2204      	movs	r2, #4
 8007216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b04      	cmp	r3, #4
 800723a:	d106      	bne.n	800724a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007242:	b2da      	uxtb	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800726a:	2303      	movs	r3, #3
 800726c:	e012      	b.n	8007294 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b03      	cmp	r3, #3
 8007278:	d10b      	bne.n	8007292 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d005      	beq.n	8007292 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e014      	b.n	80072e0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d10d      	bne.n	80072de <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	4611      	mov	r1, r2
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072fe:	2303      	movs	r3, #3
 8007300:	e014      	b.n	800732c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b03      	cmp	r3, #3
 800730c:	d10d      	bne.n	800732a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	4611      	mov	r1, r2
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d009      	beq.n	8007378 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	6852      	ldr	r2, [r2, #4]
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	4611      	mov	r1, r2
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
  }

  return USBD_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007382:	b480      	push	{r7}
 8007384:	b087      	sub	sp, #28
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	3301      	adds	r3, #1
 8007398:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073a0:	8a3b      	ldrh	r3, [r7, #16]
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	b21a      	sxth	r2, r3
 80073a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	b21b      	sxth	r3, r3
 80073ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073b0:	89fb      	ldrh	r3, [r7, #14]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073d6:	2b40      	cmp	r3, #64	; 0x40
 80073d8:	d005      	beq.n	80073e6 <USBD_StdDevReq+0x26>
 80073da:	2b40      	cmp	r3, #64	; 0x40
 80073dc:	d853      	bhi.n	8007486 <USBD_StdDevReq+0xc6>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <USBD_StdDevReq+0x3a>
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d14f      	bne.n	8007486 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]
      break;
 80073f8:	e04a      	b.n	8007490 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b09      	cmp	r3, #9
 8007400:	d83b      	bhi.n	800747a <USBD_StdDevReq+0xba>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <USBD_StdDevReq+0x48>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	0800745d 	.word	0x0800745d
 800740c:	08007471 	.word	0x08007471
 8007410:	0800747b 	.word	0x0800747b
 8007414:	08007467 	.word	0x08007467
 8007418:	0800747b 	.word	0x0800747b
 800741c:	0800743b 	.word	0x0800743b
 8007420:	08007431 	.word	0x08007431
 8007424:	0800747b 	.word	0x0800747b
 8007428:	08007453 	.word	0x08007453
 800742c:	08007445 	.word	0x08007445
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f9de 	bl	80077f4 <USBD_GetDescriptor>
          break;
 8007438:	e024      	b.n	8007484 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fb6d 	bl	8007b1c <USBD_SetAddress>
          break;
 8007442:	e01f      	b.n	8007484 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fbac 	bl	8007ba4 <USBD_SetConfig>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]
          break;
 8007450:	e018      	b.n	8007484 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc4b 	bl	8007cf0 <USBD_GetConfig>
          break;
 800745a:	e013      	b.n	8007484 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fc7c 	bl	8007d5c <USBD_GetStatus>
          break;
 8007464:	e00e      	b.n	8007484 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fcab 	bl	8007dc4 <USBD_SetFeature>
          break;
 800746e:	e009      	b.n	8007484 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fcba 	bl	8007dec <USBD_ClrFeature>
          break;
 8007478:	e004      	b.n	8007484 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fd11 	bl	8007ea4 <USBD_CtlError>
          break;
 8007482:	bf00      	nop
      }
      break;
 8007484:	e004      	b.n	8007490 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fd0b 	bl	8007ea4 <USBD_CtlError>
      break;
 800748e:	bf00      	nop
  }

  return ret;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop

0800749c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074b2:	2b40      	cmp	r3, #64	; 0x40
 80074b4:	d005      	beq.n	80074c2 <USBD_StdItfReq+0x26>
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	d82f      	bhi.n	800751a <USBD_StdItfReq+0x7e>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <USBD_StdItfReq+0x26>
 80074be:	2b20      	cmp	r3, #32
 80074c0:	d12b      	bne.n	800751a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d81d      	bhi.n	800750c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	889b      	ldrh	r3, [r3, #4]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d813      	bhi.n	8007502 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	4798      	blx	r3
 80074e8:	4603      	mov	r3, r0
 80074ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	88db      	ldrh	r3, [r3, #6]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d110      	bne.n	8007516 <USBD_StdItfReq+0x7a>
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10d      	bne.n	8007516 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fd9d 	bl	800803a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007500:	e009      	b.n	8007516 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fccd 	bl	8007ea4 <USBD_CtlError>
          break;
 800750a:	e004      	b.n	8007516 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fcc8 	bl	8007ea4 <USBD_CtlError>
          break;
 8007514:	e000      	b.n	8007518 <USBD_StdItfReq+0x7c>
          break;
 8007516:	bf00      	nop
      }
      break;
 8007518:	e004      	b.n	8007524 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fcc1 	bl	8007ea4 <USBD_CtlError>
      break;
 8007522:	bf00      	nop
  }

  return ret;
 8007524:	7bfb      	ldrb	r3, [r7, #15]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	889b      	ldrh	r3, [r3, #4]
 8007540:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800754a:	2b40      	cmp	r3, #64	; 0x40
 800754c:	d007      	beq.n	800755e <USBD_StdEPReq+0x30>
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	f200 8145 	bhi.w	80077de <USBD_StdEPReq+0x2b0>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00c      	beq.n	8007572 <USBD_StdEPReq+0x44>
 8007558:	2b20      	cmp	r3, #32
 800755a:	f040 8140 	bne.w	80077de <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
      break;
 8007570:	e13a      	b.n	80077e8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	2b03      	cmp	r3, #3
 8007578:	d007      	beq.n	800758a <USBD_StdEPReq+0x5c>
 800757a:	2b03      	cmp	r3, #3
 800757c:	f300 8129 	bgt.w	80077d2 <USBD_StdEPReq+0x2a4>
 8007580:	2b00      	cmp	r3, #0
 8007582:	d07f      	beq.n	8007684 <USBD_StdEPReq+0x156>
 8007584:	2b01      	cmp	r3, #1
 8007586:	d03c      	beq.n	8007602 <USBD_StdEPReq+0xd4>
 8007588:	e123      	b.n	80077d2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d002      	beq.n	800759c <USBD_StdEPReq+0x6e>
 8007596:	2b03      	cmp	r3, #3
 8007598:	d016      	beq.n	80075c8 <USBD_StdEPReq+0x9a>
 800759a:	e02c      	b.n	80075f6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00d      	beq.n	80075be <USBD_StdEPReq+0x90>
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b80      	cmp	r3, #128	; 0x80
 80075a6:	d00a      	beq.n	80075be <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f981 	bl	80088b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075b2:	2180      	movs	r1, #128	; 0x80
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 f97d 	bl	80088b4 <USBD_LL_StallEP>
 80075ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075bc:	e020      	b.n	8007600 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fc6f 	bl	8007ea4 <USBD_CtlError>
              break;
 80075c6:	e01b      	b.n	8007600 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	885b      	ldrh	r3, [r3, #2]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10e      	bne.n	80075ee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00b      	beq.n	80075ee <USBD_StdEPReq+0xc0>
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	2b80      	cmp	r3, #128	; 0x80
 80075da:	d008      	beq.n	80075ee <USBD_StdEPReq+0xc0>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	88db      	ldrh	r3, [r3, #6]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 f963 	bl	80088b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fd23 	bl	800803a <USBD_CtlSendStatus>

              break;
 80075f4:	e004      	b.n	8007600 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fc53 	bl	8007ea4 <USBD_CtlError>
              break;
 80075fe:	bf00      	nop
          }
          break;
 8007600:	e0ec      	b.n	80077dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d002      	beq.n	8007614 <USBD_StdEPReq+0xe6>
 800760e:	2b03      	cmp	r3, #3
 8007610:	d016      	beq.n	8007640 <USBD_StdEPReq+0x112>
 8007612:	e030      	b.n	8007676 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00d      	beq.n	8007636 <USBD_StdEPReq+0x108>
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	2b80      	cmp	r3, #128	; 0x80
 800761e:	d00a      	beq.n	8007636 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 f945 	bl	80088b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800762a:	2180      	movs	r1, #128	; 0x80
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 f941 	bl	80088b4 <USBD_LL_StallEP>
 8007632:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007634:	e025      	b.n	8007682 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fc33 	bl	8007ea4 <USBD_CtlError>
              break;
 800763e:	e020      	b.n	8007682 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	885b      	ldrh	r3, [r3, #2]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d11b      	bne.n	8007680 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 f94b 	bl	80088f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fcec 	bl	800803a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007674:	e004      	b.n	8007680 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fc13 	bl	8007ea4 <USBD_CtlError>
              break;
 800767e:	e000      	b.n	8007682 <USBD_StdEPReq+0x154>
              break;
 8007680:	bf00      	nop
          }
          break;
 8007682:	e0ab      	b.n	80077dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d002      	beq.n	8007696 <USBD_StdEPReq+0x168>
 8007690:	2b03      	cmp	r3, #3
 8007692:	d032      	beq.n	80076fa <USBD_StdEPReq+0x1cc>
 8007694:	e097      	b.n	80077c6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <USBD_StdEPReq+0x17e>
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	2b80      	cmp	r3, #128	; 0x80
 80076a0:	d004      	beq.n	80076ac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fbfd 	bl	8007ea4 <USBD_CtlError>
                break;
 80076aa:	e091      	b.n	80077d0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	da0b      	bge.n	80076cc <USBD_StdEPReq+0x19e>
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	3310      	adds	r3, #16
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	4413      	add	r3, r2
 80076c8:	3304      	adds	r3, #4
 80076ca:	e00b      	b.n	80076e4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	4413      	add	r3, r2
 80076e2:	3304      	adds	r3, #4
 80076e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2202      	movs	r2, #2
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fc47 	bl	8007f86 <USBD_CtlSendData>
              break;
 80076f8:	e06a      	b.n	80077d0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da11      	bge.n	8007726 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	3324      	adds	r3, #36	; 0x24
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d117      	bne.n	800774c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fbc0 	bl	8007ea4 <USBD_CtlError>
                  break;
 8007724:	e054      	b.n	80077d0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	f003 020f 	and.w	r2, r3, #15
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d104      	bne.n	800774c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fbad 	bl	8007ea4 <USBD_CtlError>
                  break;
 800774a:	e041      	b.n	80077d0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800774c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007750:	2b00      	cmp	r3, #0
 8007752:	da0b      	bge.n	800776c <USBD_StdEPReq+0x23e>
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	3310      	adds	r3, #16
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	4413      	add	r3, r2
 8007768:	3304      	adds	r3, #4
 800776a:	e00b      	b.n	8007784 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	4413      	add	r3, r2
 8007782:	3304      	adds	r3, #4
 8007784:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <USBD_StdEPReq+0x264>
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	2b80      	cmp	r3, #128	; 0x80
 8007790:	d103      	bne.n	800779a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	e00e      	b.n	80077b8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 f8c6 	bl	8008930 <USBD_LL_IsStallEP>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2201      	movs	r2, #1
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	e002      	b.n	80077b8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2202      	movs	r2, #2
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fbe1 	bl	8007f86 <USBD_CtlSendData>
              break;
 80077c4:	e004      	b.n	80077d0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fb6b 	bl	8007ea4 <USBD_CtlError>
              break;
 80077ce:	bf00      	nop
          }
          break;
 80077d0:	e004      	b.n	80077dc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fb65 	bl	8007ea4 <USBD_CtlError>
          break;
 80077da:	bf00      	nop
      }
      break;
 80077dc:	e004      	b.n	80077e8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fb5f 	bl	8007ea4 <USBD_CtlError>
      break;
 80077e6:	bf00      	nop
  }

  return ret;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	885b      	ldrh	r3, [r3, #2]
 800780e:	0a1b      	lsrs	r3, r3, #8
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	2b0e      	cmp	r3, #14
 8007816:	f200 8152 	bhi.w	8007abe <USBD_GetDescriptor+0x2ca>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <USBD_GetDescriptor+0x2c>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007891 	.word	0x08007891
 8007824:	080078a9 	.word	0x080078a9
 8007828:	080078e9 	.word	0x080078e9
 800782c:	08007abf 	.word	0x08007abf
 8007830:	08007abf 	.word	0x08007abf
 8007834:	08007a5f 	.word	0x08007a5f
 8007838:	08007a8b 	.word	0x08007a8b
 800783c:	08007abf 	.word	0x08007abf
 8007840:	08007abf 	.word	0x08007abf
 8007844:	08007abf 	.word	0x08007abf
 8007848:	08007abf 	.word	0x08007abf
 800784c:	08007abf 	.word	0x08007abf
 8007850:	08007abf 	.word	0x08007abf
 8007854:	08007abf 	.word	0x08007abf
 8007858:	0800785d 	.word	0x0800785d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7c12      	ldrb	r2, [r2, #16]
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800787e:	e126      	b.n	8007ace <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fb0e 	bl	8007ea4 <USBD_CtlError>
        err++;
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	3301      	adds	r3, #1
 800788c:	72fb      	strb	r3, [r7, #11]
      break;
 800788e:	e11e      	b.n	8007ace <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	7c12      	ldrb	r2, [r2, #16]
 800789c:	f107 0108 	add.w	r1, r7, #8
 80078a0:	4610      	mov	r0, r2
 80078a2:	4798      	blx	r3
 80078a4:	60f8      	str	r0, [r7, #12]
      break;
 80078a6:	e112      	b.n	8007ace <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	7c1b      	ldrb	r3, [r3, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10d      	bne.n	80078cc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	f107 0208 	add.w	r2, r7, #8
 80078bc:	4610      	mov	r0, r2
 80078be:	4798      	blx	r3
 80078c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3301      	adds	r3, #1
 80078c6:	2202      	movs	r2, #2
 80078c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078ca:	e100      	b.n	8007ace <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	f107 0208 	add.w	r2, r7, #8
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
 80078dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3301      	adds	r3, #1
 80078e2:	2202      	movs	r2, #2
 80078e4:	701a      	strb	r2, [r3, #0]
      break;
 80078e6:	e0f2      	b.n	8007ace <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	885b      	ldrh	r3, [r3, #2]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b05      	cmp	r3, #5
 80078f0:	f200 80ac 	bhi.w	8007a4c <USBD_GetDescriptor+0x258>
 80078f4:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <USBD_GetDescriptor+0x108>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	08007915 	.word	0x08007915
 8007900:	08007949 	.word	0x08007949
 8007904:	0800797d 	.word	0x0800797d
 8007908:	080079b1 	.word	0x080079b1
 800790c:	080079e5 	.word	0x080079e5
 8007910:	08007a19 	.word	0x08007a19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	7c12      	ldrb	r2, [r2, #16]
 800792c:	f107 0108 	add.w	r1, r7, #8
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
 8007934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007936:	e091      	b.n	8007a5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fab2 	bl	8007ea4 <USBD_CtlError>
            err++;
 8007940:	7afb      	ldrb	r3, [r7, #11]
 8007942:	3301      	adds	r3, #1
 8007944:	72fb      	strb	r3, [r7, #11]
          break;
 8007946:	e089      	b.n	8007a5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	7c12      	ldrb	r2, [r2, #16]
 8007960:	f107 0108 	add.w	r1, r7, #8
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
 8007968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800796a:	e077      	b.n	8007a5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa98 	bl	8007ea4 <USBD_CtlError>
            err++;
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	3301      	adds	r3, #1
 8007978:	72fb      	strb	r3, [r7, #11]
          break;
 800797a:	e06f      	b.n	8007a5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	7c12      	ldrb	r2, [r2, #16]
 8007994:	f107 0108 	add.w	r1, r7, #8
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800799e:	e05d      	b.n	8007a5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa7e 	bl	8007ea4 <USBD_CtlError>
            err++;
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	3301      	adds	r3, #1
 80079ac:	72fb      	strb	r3, [r7, #11]
          break;
 80079ae:	e055      	b.n	8007a5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	7c12      	ldrb	r2, [r2, #16]
 80079c8:	f107 0108 	add.w	r1, r7, #8
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
 80079d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079d2:	e043      	b.n	8007a5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa64 	bl	8007ea4 <USBD_CtlError>
            err++;
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	3301      	adds	r3, #1
 80079e0:	72fb      	strb	r3, [r7, #11]
          break;
 80079e2:	e03b      	b.n	8007a5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	7c12      	ldrb	r2, [r2, #16]
 80079fc:	f107 0108 	add.w	r1, r7, #8
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a06:	e029      	b.n	8007a5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa4a 	bl	8007ea4 <USBD_CtlError>
            err++;
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	3301      	adds	r3, #1
 8007a14:	72fb      	strb	r3, [r7, #11]
          break;
 8007a16:	e021      	b.n	8007a5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	7c12      	ldrb	r2, [r2, #16]
 8007a30:	f107 0108 	add.w	r1, r7, #8
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a3a:	e00f      	b.n	8007a5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa30 	bl	8007ea4 <USBD_CtlError>
            err++;
 8007a44:	7afb      	ldrb	r3, [r7, #11]
 8007a46:	3301      	adds	r3, #1
 8007a48:	72fb      	strb	r3, [r7, #11]
          break;
 8007a4a:	e007      	b.n	8007a5c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa28 	bl	8007ea4 <USBD_CtlError>
          err++;
 8007a54:	7afb      	ldrb	r3, [r7, #11]
 8007a56:	3301      	adds	r3, #1
 8007a58:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a5a:	bf00      	nop
      }
      break;
 8007a5c:	e037      	b.n	8007ace <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	7c1b      	ldrb	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6e:	f107 0208 	add.w	r2, r7, #8
 8007a72:	4610      	mov	r0, r2
 8007a74:	4798      	blx	r3
 8007a76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a78:	e029      	b.n	8007ace <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fa11 	bl	8007ea4 <USBD_CtlError>
        err++;
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	3301      	adds	r3, #1
 8007a86:	72fb      	strb	r3, [r7, #11]
      break;
 8007a88:	e021      	b.n	8007ace <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7c1b      	ldrb	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10d      	bne.n	8007aae <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	f107 0208 	add.w	r2, r7, #8
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	4798      	blx	r3
 8007aa2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	2207      	movs	r2, #7
 8007aaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aac:	e00f      	b.n	8007ace <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f9f7 	bl	8007ea4 <USBD_CtlError>
        err++;
 8007ab6:	7afb      	ldrb	r3, [r7, #11]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	72fb      	strb	r3, [r7, #11]
      break;
 8007abc:	e007      	b.n	8007ace <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f9ef 	bl	8007ea4 <USBD_CtlError>
      err++;
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	72fb      	strb	r3, [r7, #11]
      break;
 8007acc:	bf00      	nop
  }

  if (err != 0U)
 8007ace:	7afb      	ldrb	r3, [r7, #11]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d11e      	bne.n	8007b12 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	88db      	ldrh	r3, [r3, #6]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d016      	beq.n	8007b0a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007adc:	893b      	ldrh	r3, [r7, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00e      	beq.n	8007b00 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	88da      	ldrh	r2, [r3, #6]
 8007ae6:	893b      	ldrh	r3, [r7, #8]
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	bf28      	it	cs
 8007aec:	4613      	movcs	r3, r2
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007af2:	893b      	ldrh	r3, [r7, #8]
 8007af4:	461a      	mov	r2, r3
 8007af6:	68f9      	ldr	r1, [r7, #12]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fa44 	bl	8007f86 <USBD_CtlSendData>
 8007afe:	e009      	b.n	8007b14 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f9ce 	bl	8007ea4 <USBD_CtlError>
 8007b08:	e004      	b.n	8007b14 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa95 	bl	800803a <USBD_CtlSendStatus>
 8007b10:	e000      	b.n	8007b14 <USBD_GetDescriptor+0x320>
    return;
 8007b12:	bf00      	nop
  }
}
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop

08007b1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	889b      	ldrh	r3, [r3, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d131      	bne.n	8007b92 <USBD_SetAddress+0x76>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	88db      	ldrh	r3, [r3, #6]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d12d      	bne.n	8007b92 <USBD_SetAddress+0x76>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	885b      	ldrh	r3, [r3, #2]
 8007b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8007b3c:	d829      	bhi.n	8007b92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	885b      	ldrh	r3, [r3, #2]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d104      	bne.n	8007b60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f9a3 	bl	8007ea4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5e:	e01d      	b.n	8007b9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	7bfa      	ldrb	r2, [r7, #15]
 8007b64:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 ff0b 	bl	8008988 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa61 	bl	800803a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b86:	e009      	b.n	8007b9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b90:	e004      	b.n	8007b9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f985 	bl	8007ea4 <USBD_CtlError>
  }
}
 8007b9a:	bf00      	nop
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	885b      	ldrh	r3, [r3, #2]
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	4b4c      	ldr	r3, [pc, #304]	; (8007cec <USBD_SetConfig+0x148>)
 8007bba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bbc:	4b4b      	ldr	r3, [pc, #300]	; (8007cec <USBD_SetConfig+0x148>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d905      	bls.n	8007bd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f96c 	bl	8007ea4 <USBD_CtlError>
    return USBD_FAIL;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e088      	b.n	8007ce2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d002      	beq.n	8007be2 <USBD_SetConfig+0x3e>
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d025      	beq.n	8007c2c <USBD_SetConfig+0x88>
 8007be0:	e071      	b.n	8007cc6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007be2:	4b42      	ldr	r3, [pc, #264]	; (8007cec <USBD_SetConfig+0x148>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d01c      	beq.n	8007c24 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007bea:	4b40      	ldr	r3, [pc, #256]	; (8007cec <USBD_SetConfig+0x148>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bf4:	4b3d      	ldr	r3, [pc, #244]	; (8007cec <USBD_SetConfig+0x148>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff f91e 	bl	8006e3c <USBD_SetClassConfig>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f949 	bl	8007ea4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c12:	e065      	b.n	8007ce0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fa10 	bl	800803a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2203      	movs	r2, #3
 8007c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c22:	e05d      	b.n	8007ce0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fa08 	bl	800803a <USBD_CtlSendStatus>
      break;
 8007c2a:	e059      	b.n	8007ce0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c2c:	4b2f      	ldr	r3, [pc, #188]	; (8007cec <USBD_SetConfig+0x148>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d112      	bne.n	8007c5a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c3c:	4b2b      	ldr	r3, [pc, #172]	; (8007cec <USBD_SetConfig+0x148>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c46:	4b29      	ldr	r3, [pc, #164]	; (8007cec <USBD_SetConfig+0x148>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff f911 	bl	8006e74 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f9f1 	bl	800803a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c58:	e042      	b.n	8007ce0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c5a:	4b24      	ldr	r3, [pc, #144]	; (8007cec <USBD_SetConfig+0x148>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d02a      	beq.n	8007cbe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff f8ff 	bl	8006e74 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c76:	4b1d      	ldr	r3, [pc, #116]	; (8007cec <USBD_SetConfig+0x148>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c80:	4b1a      	ldr	r3, [pc, #104]	; (8007cec <USBD_SetConfig+0x148>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7ff f8d8 	bl	8006e3c <USBD_SetClassConfig>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00f      	beq.n	8007cb6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f903 	bl	8007ea4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff f8e4 	bl	8006e74 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cb4:	e014      	b.n	8007ce0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f9bf 	bl	800803a <USBD_CtlSendStatus>
      break;
 8007cbc:	e010      	b.n	8007ce0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f9bb 	bl	800803a <USBD_CtlSendStatus>
      break;
 8007cc4:	e00c      	b.n	8007ce0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f8eb 	bl	8007ea4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cce:	4b07      	ldr	r3, [pc, #28]	; (8007cec <USBD_SetConfig+0x148>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff f8cd 	bl	8006e74 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cde:	bf00      	nop
  }

  return ret;
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000434 	.word	0x20000434

08007cf0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	88db      	ldrh	r3, [r3, #6]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d004      	beq.n	8007d0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f8cd 	bl	8007ea4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d0a:	e023      	b.n	8007d54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	dc02      	bgt.n	8007d1e <USBD_GetConfig+0x2e>
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dc03      	bgt.n	8007d24 <USBD_GetConfig+0x34>
 8007d1c:	e015      	b.n	8007d4a <USBD_GetConfig+0x5a>
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d00b      	beq.n	8007d3a <USBD_GetConfig+0x4a>
 8007d22:	e012      	b.n	8007d4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	2201      	movs	r2, #1
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f927 	bl	8007f86 <USBD_CtlSendData>
        break;
 8007d38:	e00c      	b.n	8007d54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	2201      	movs	r2, #1
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f91f 	bl	8007f86 <USBD_CtlSendData>
        break;
 8007d48:	e004      	b.n	8007d54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f8a9 	bl	8007ea4 <USBD_CtlError>
        break;
 8007d52:	bf00      	nop
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d81e      	bhi.n	8007db2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	88db      	ldrh	r3, [r3, #6]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d004      	beq.n	8007d86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f890 	bl	8007ea4 <USBD_CtlError>
        break;
 8007d84:	e01a      	b.n	8007dbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d005      	beq.n	8007da2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f043 0202 	orr.w	r2, r3, #2
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	330c      	adds	r3, #12
 8007da6:	2202      	movs	r2, #2
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f8eb 	bl	8007f86 <USBD_CtlSendData>
      break;
 8007db0:	e004      	b.n	8007dbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f875 	bl	8007ea4 <USBD_CtlError>
      break;
 8007dba:	bf00      	nop
  }
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	885b      	ldrh	r3, [r3, #2]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d106      	bne.n	8007de4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f92b 	bl	800803a <USBD_CtlSendStatus>
  }
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d80b      	bhi.n	8007e1c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	885b      	ldrh	r3, [r3, #2]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d10c      	bne.n	8007e26 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f910 	bl	800803a <USBD_CtlSendStatus>
      }
      break;
 8007e1a:	e004      	b.n	8007e26 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f840 	bl	8007ea4 <USBD_CtlError>
      break;
 8007e24:	e000      	b.n	8007e28 <USBD_ClrFeature+0x3c>
      break;
 8007e26:	bf00      	nop
  }
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	781a      	ldrb	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3301      	adds	r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff fa91 	bl	8007382 <SWAPBYTE>
 8007e60:	4603      	mov	r3, r0
 8007e62:	461a      	mov	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3301      	adds	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7ff fa84 	bl	8007382 <SWAPBYTE>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3301      	adds	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f7ff fa77 	bl	8007382 <SWAPBYTE>
 8007e94:	4603      	mov	r3, r0
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	80da      	strh	r2, [r3, #6]
}
 8007e9c:	bf00      	nop
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eae:	2180      	movs	r1, #128	; 0x80
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fcff 	bl	80088b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fcfb 	bl	80088b4 <USBD_LL_StallEP>
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d036      	beq.n	8007f4a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ee0:	6938      	ldr	r0, [r7, #16]
 8007ee2:	f000 f836 	bl	8007f52 <USBD_GetLen>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	3301      	adds	r3, #1
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	4413      	add	r3, r2
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	7812      	ldrb	r2, [r2, #0]
 8007efe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
 8007f02:	3301      	adds	r3, #1
 8007f04:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	3301      	adds	r3, #1
 8007f14:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f16:	e013      	b.n	8007f40 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	3301      	adds	r3, #1
 8007f28:	613b      	str	r3, [r7, #16]
    idx++;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f30:	7dfb      	ldrb	r3, [r7, #23]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4413      	add	r3, r2
 8007f36:	2200      	movs	r2, #0
 8007f38:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e7      	bne.n	8007f18 <USBD_GetString+0x52>
 8007f48:	e000      	b.n	8007f4c <USBD_GetString+0x86>
    return;
 8007f4a:	bf00      	nop
  }
}
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b085      	sub	sp, #20
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f62:	e005      	b.n	8007f70 <USBD_GetLen+0x1e>
  {
    len++;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	3301      	adds	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1f5      	bne.n	8007f64 <USBD_GetLen+0x12>
  }

  return len;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	2100      	movs	r1, #0
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 fd0a 	bl	80089c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	2100      	movs	r1, #0
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 fcf9 	bl	80089c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2203      	movs	r2, #3
 8007fee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	2100      	movs	r1, #0
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 fcfd 	bl	8008a08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	2100      	movs	r1, #0
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 fcec 	bl	8008a08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2204      	movs	r2, #4
 8008046:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800804a:	2300      	movs	r3, #0
 800804c:	2200      	movs	r2, #0
 800804e:	2100      	movs	r1, #0
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fcb8 	bl	80089c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2205      	movs	r2, #5
 800806c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008070:	2300      	movs	r3, #0
 8008072:	2200      	movs	r2, #0
 8008074:	2100      	movs	r1, #0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fcc6 	bl	8008a08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800808c:	2200      	movs	r2, #0
 800808e:	4912      	ldr	r1, [pc, #72]	; (80080d8 <MX_USB_DEVICE_Init+0x50>)
 8008090:	4812      	ldr	r0, [pc, #72]	; (80080dc <MX_USB_DEVICE_Init+0x54>)
 8008092:	f7fe fe65 	bl	8006d60 <USBD_Init>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800809c:	f7f8 ff14 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080a0:	490f      	ldr	r1, [pc, #60]	; (80080e0 <MX_USB_DEVICE_Init+0x58>)
 80080a2:	480e      	ldr	r0, [pc, #56]	; (80080dc <MX_USB_DEVICE_Init+0x54>)
 80080a4:	f7fe fe8c 	bl	8006dc0 <USBD_RegisterClass>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080ae:	f7f8 ff0b 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080b2:	490c      	ldr	r1, [pc, #48]	; (80080e4 <MX_USB_DEVICE_Init+0x5c>)
 80080b4:	4809      	ldr	r0, [pc, #36]	; (80080dc <MX_USB_DEVICE_Init+0x54>)
 80080b6:	f7fe fdad 	bl	8006c14 <USBD_CDC_RegisterInterface>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080c0:	f7f8 ff02 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080c4:	4805      	ldr	r0, [pc, #20]	; (80080dc <MX_USB_DEVICE_Init+0x54>)
 80080c6:	f7fe fea2 	bl	8006e0e <USBD_Start>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080d0:	f7f8 fefa 	bl	8000ec8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080d4:	bf00      	nop
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20000138 	.word	0x20000138
 80080dc:	20000870 	.word	0x20000870
 80080e0:	20000020 	.word	0x20000020
 80080e4:	20000124 	.word	0x20000124

080080e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080ec:	2200      	movs	r2, #0
 80080ee:	4905      	ldr	r1, [pc, #20]	; (8008104 <CDC_Init_FS+0x1c>)
 80080f0:	4805      	ldr	r0, [pc, #20]	; (8008108 <CDC_Init_FS+0x20>)
 80080f2:	f7fe fda4 	bl	8006c3e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080f6:	4905      	ldr	r1, [pc, #20]	; (800810c <CDC_Init_FS+0x24>)
 80080f8:	4803      	ldr	r0, [pc, #12]	; (8008108 <CDC_Init_FS+0x20>)
 80080fa:	f7fe fdbe 	bl	8006c7a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008100:	4618      	mov	r0, r3
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20001340 	.word	0x20001340
 8008108:	20000870 	.word	0x20000870
 800810c:	20000b40 	.word	0x20000b40

08008110 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008114:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008116:	4618      	mov	r0, r3
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	6039      	str	r1, [r7, #0]
 800812a:	71fb      	strb	r3, [r7, #7]
 800812c:	4613      	mov	r3, r2
 800812e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	2b23      	cmp	r3, #35	; 0x23
 8008134:	d84a      	bhi.n	80081cc <CDC_Control_FS+0xac>
 8008136:	a201      	add	r2, pc, #4	; (adr r2, 800813c <CDC_Control_FS+0x1c>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	080081cd 	.word	0x080081cd
 8008140:	080081cd 	.word	0x080081cd
 8008144:	080081cd 	.word	0x080081cd
 8008148:	080081cd 	.word	0x080081cd
 800814c:	080081cd 	.word	0x080081cd
 8008150:	080081cd 	.word	0x080081cd
 8008154:	080081cd 	.word	0x080081cd
 8008158:	080081cd 	.word	0x080081cd
 800815c:	080081cd 	.word	0x080081cd
 8008160:	080081cd 	.word	0x080081cd
 8008164:	080081cd 	.word	0x080081cd
 8008168:	080081cd 	.word	0x080081cd
 800816c:	080081cd 	.word	0x080081cd
 8008170:	080081cd 	.word	0x080081cd
 8008174:	080081cd 	.word	0x080081cd
 8008178:	080081cd 	.word	0x080081cd
 800817c:	080081cd 	.word	0x080081cd
 8008180:	080081cd 	.word	0x080081cd
 8008184:	080081cd 	.word	0x080081cd
 8008188:	080081cd 	.word	0x080081cd
 800818c:	080081cd 	.word	0x080081cd
 8008190:	080081cd 	.word	0x080081cd
 8008194:	080081cd 	.word	0x080081cd
 8008198:	080081cd 	.word	0x080081cd
 800819c:	080081cd 	.word	0x080081cd
 80081a0:	080081cd 	.word	0x080081cd
 80081a4:	080081cd 	.word	0x080081cd
 80081a8:	080081cd 	.word	0x080081cd
 80081ac:	080081cd 	.word	0x080081cd
 80081b0:	080081cd 	.word	0x080081cd
 80081b4:	080081cd 	.word	0x080081cd
 80081b8:	080081cd 	.word	0x080081cd
 80081bc:	080081cd 	.word	0x080081cd
 80081c0:	080081cd 	.word	0x080081cd
 80081c4:	080081cd 	.word	0x080081cd
 80081c8:	080081cd 	.word	0x080081cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081cc:	bf00      	nop
  }

  return (USBD_OK);
 80081ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4807      	ldr	r0, [pc, #28]	; (8008208 <CDC_Receive_FS+0x2c>)
 80081ea:	f7fe fd46 	bl	8006c7a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081ee:	4806      	ldr	r0, [pc, #24]	; (8008208 <CDC_Receive_FS+0x2c>)
 80081f0:	f7fe fd8c 	bl	8006d0c <USBD_CDC_ReceivePacket>

  data_received(Buf, Len);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7f8 fdc2 	bl	8000d80 <data_received>

  return (USBD_OK);
 80081fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000870 	.word	0x20000870

0800820c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */

	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800821c:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <CDC_Transmit_FS+0x48>)
 800821e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008222:	60bb      	str	r3, [r7, #8]

	if (hcdc->TxState != 0){
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <CDC_Transmit_FS+0x26>

	return USBD_BUSY;
 800822e:	2301      	movs	r3, #1
 8008230:	e00b      	b.n	800824a <CDC_Transmit_FS+0x3e>

	}

	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008232:	887b      	ldrh	r3, [r7, #2]
 8008234:	461a      	mov	r2, r3
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	4806      	ldr	r0, [pc, #24]	; (8008254 <CDC_Transmit_FS+0x48>)
 800823a:	f7fe fd00 	bl	8006c3e <USBD_CDC_SetTxBuffer>

	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800823e:	4805      	ldr	r0, [pc, #20]	; (8008254 <CDC_Transmit_FS+0x48>)
 8008240:	f7fe fd34 	bl	8006cac <USBD_CDC_TransmitPacket>
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000870 	.word	0x20000870

08008258 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800826a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800826e:	4618      	mov	r0, r3
 8008270:	371c      	adds	r7, #28
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
	...

0800827c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2212      	movs	r2, #18
 800828c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800828e:	4b03      	ldr	r3, [pc, #12]	; (800829c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	20000158 	.word	0x20000158

080082a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2204      	movs	r2, #4
 80082b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082b2:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	20000178 	.word	0x20000178

080082c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	6039      	str	r1, [r7, #0]
 80082ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d105      	bne.n	80082e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	4907      	ldr	r1, [pc, #28]	; (80082f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80082da:	4808      	ldr	r0, [pc, #32]	; (80082fc <USBD_FS_ProductStrDescriptor+0x38>)
 80082dc:	f7ff fdf3 	bl	8007ec6 <USBD_GetString>
 80082e0:	e004      	b.n	80082ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	4904      	ldr	r1, [pc, #16]	; (80082f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80082e6:	4805      	ldr	r0, [pc, #20]	; (80082fc <USBD_FS_ProductStrDescriptor+0x38>)
 80082e8:	f7ff fded 	bl	8007ec6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20001b40 	.word	0x20001b40
 80082fc:	08009570 	.word	0x08009570

08008300 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	4904      	ldr	r1, [pc, #16]	; (8008320 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008310:	4804      	ldr	r0, [pc, #16]	; (8008324 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008312:	f7ff fdd8 	bl	8007ec6 <USBD_GetString>
  return USBD_StrDesc;
 8008316:	4b02      	ldr	r3, [pc, #8]	; (8008320 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20001b40 	.word	0x20001b40
 8008324:	08009588 	.word	0x08009588

08008328 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	221a      	movs	r2, #26
 8008338:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800833a:	f000 f855 	bl	80083e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800833e:	4b02      	ldr	r3, [pc, #8]	; (8008348 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	2000017c 	.word	0x2000017c

0800834c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d105      	bne.n	800836a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	4907      	ldr	r1, [pc, #28]	; (8008380 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008362:	4808      	ldr	r0, [pc, #32]	; (8008384 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008364:	f7ff fdaf 	bl	8007ec6 <USBD_GetString>
 8008368:	e004      	b.n	8008374 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	4904      	ldr	r1, [pc, #16]	; (8008380 <USBD_FS_ConfigStrDescriptor+0x34>)
 800836e:	4805      	ldr	r0, [pc, #20]	; (8008384 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008370:	f7ff fda9 	bl	8007ec6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008374:	4b02      	ldr	r3, [pc, #8]	; (8008380 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20001b40 	.word	0x20001b40
 8008384:	0800959c 	.word	0x0800959c

08008388 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	6039      	str	r1, [r7, #0]
 8008392:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d105      	bne.n	80083a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	4907      	ldr	r1, [pc, #28]	; (80083bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800839e:	4808      	ldr	r0, [pc, #32]	; (80083c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083a0:	f7ff fd91 	bl	8007ec6 <USBD_GetString>
 80083a4:	e004      	b.n	80083b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	4904      	ldr	r1, [pc, #16]	; (80083bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083aa:	4805      	ldr	r0, [pc, #20]	; (80083c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083ac:	f7ff fd8b 	bl	8007ec6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083b0:	4b02      	ldr	r3, [pc, #8]	; (80083bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20001b40 	.word	0x20001b40
 80083c0:	080095a8 	.word	0x080095a8

080083c4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	220c      	movs	r2, #12
 80083d4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80083d6:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	2000016c 	.word	0x2000016c

080083e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083ee:	4b0f      	ldr	r3, [pc, #60]	; (800842c <Get_SerialNum+0x44>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083f4:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <Get_SerialNum+0x48>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083fa:	4b0e      	ldr	r3, [pc, #56]	; (8008434 <Get_SerialNum+0x4c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4413      	add	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800840e:	2208      	movs	r2, #8
 8008410:	4909      	ldr	r1, [pc, #36]	; (8008438 <Get_SerialNum+0x50>)
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 f814 	bl	8008440 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008418:	2204      	movs	r2, #4
 800841a:	4908      	ldr	r1, [pc, #32]	; (800843c <Get_SerialNum+0x54>)
 800841c:	68b8      	ldr	r0, [r7, #8]
 800841e:	f000 f80f 	bl	8008440 <IntToUnicode>
  }
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	1fff7a10 	.word	0x1fff7a10
 8008430:	1fff7a14 	.word	0x1fff7a14
 8008434:	1fff7a18 	.word	0x1fff7a18
 8008438:	2000017e 	.word	0x2000017e
 800843c:	2000018e 	.word	0x2000018e

08008440 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008452:	2300      	movs	r3, #0
 8008454:	75fb      	strb	r3, [r7, #23]
 8008456:	e027      	b.n	80084a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	0f1b      	lsrs	r3, r3, #28
 800845c:	2b09      	cmp	r3, #9
 800845e:	d80b      	bhi.n	8008478 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	0f1b      	lsrs	r3, r3, #28
 8008464:	b2da      	uxtb	r2, r3
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	4619      	mov	r1, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	440b      	add	r3, r1
 8008470:	3230      	adds	r2, #48	; 0x30
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e00a      	b.n	800848e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	0f1b      	lsrs	r3, r3, #28
 800847c:	b2da      	uxtb	r2, r3
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	4619      	mov	r1, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	440b      	add	r3, r1
 8008488:	3237      	adds	r2, #55	; 0x37
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	3301      	adds	r3, #1
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	3301      	adds	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]
 80084a8:	7dfa      	ldrb	r2, [r7, #23]
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d3d3      	bcc.n	8008458 <IntToUnicode+0x18>
  }
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
	...

080084c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c8:	f107 0314 	add.w	r3, r7, #20
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	605a      	str	r2, [r3, #4]
 80084d2:	609a      	str	r2, [r3, #8]
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084e0:	d147      	bne.n	8008572 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084e2:	2300      	movs	r3, #0
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	4b25      	ldr	r3, [pc, #148]	; (800857c <HAL_PCD_MspInit+0xbc>)
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	4a24      	ldr	r2, [pc, #144]	; (800857c <HAL_PCD_MspInit+0xbc>)
 80084ec:	f043 0301 	orr.w	r3, r3, #1
 80084f0:	6313      	str	r3, [r2, #48]	; 0x30
 80084f2:	4b22      	ldr	r3, [pc, #136]	; (800857c <HAL_PCD_MspInit+0xbc>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	613b      	str	r3, [r7, #16]
 80084fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80084fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008504:	2300      	movs	r3, #0
 8008506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008508:	2300      	movs	r3, #0
 800850a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800850c:	f107 0314 	add.w	r3, r7, #20
 8008510:	4619      	mov	r1, r3
 8008512:	481b      	ldr	r0, [pc, #108]	; (8008580 <HAL_PCD_MspInit+0xc0>)
 8008514:	f7f9 fa58 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008518:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800851c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800851e:	2302      	movs	r3, #2
 8008520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008522:	2300      	movs	r3, #0
 8008524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008526:	2303      	movs	r3, #3
 8008528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800852a:	230a      	movs	r3, #10
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800852e:	f107 0314 	add.w	r3, r7, #20
 8008532:	4619      	mov	r1, r3
 8008534:	4812      	ldr	r0, [pc, #72]	; (8008580 <HAL_PCD_MspInit+0xc0>)
 8008536:	f7f9 fa47 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800853a:	4b10      	ldr	r3, [pc, #64]	; (800857c <HAL_PCD_MspInit+0xbc>)
 800853c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853e:	4a0f      	ldr	r2, [pc, #60]	; (800857c <HAL_PCD_MspInit+0xbc>)
 8008540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008544:	6353      	str	r3, [r2, #52]	; 0x34
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	4b0c      	ldr	r3, [pc, #48]	; (800857c <HAL_PCD_MspInit+0xbc>)
 800854c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854e:	4a0b      	ldr	r2, [pc, #44]	; (800857c <HAL_PCD_MspInit+0xbc>)
 8008550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008554:	6453      	str	r3, [r2, #68]	; 0x44
 8008556:	4b09      	ldr	r3, [pc, #36]	; (800857c <HAL_PCD_MspInit+0xbc>)
 8008558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008562:	2200      	movs	r2, #0
 8008564:	2100      	movs	r1, #0
 8008566:	2043      	movs	r0, #67	; 0x43
 8008568:	f7f9 f965 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800856c:	2043      	movs	r0, #67	; 0x43
 800856e:	f7f9 f97e 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008572:	bf00      	nop
 8008574:	3728      	adds	r7, #40	; 0x28
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40023800 	.word	0x40023800
 8008580:	40020000 	.word	0x40020000

08008584 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008598:	4619      	mov	r1, r3
 800859a:	4610      	mov	r0, r2
 800859c:	f7fe fc82 	bl	8006ea4 <USBD_LL_SetupStage>
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	4619      	mov	r1, r3
 80085d2:	f7fe fcbc 	bl	8006f4e <USBD_LL_DataOutStage>
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	4613      	mov	r3, r2
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	1a9b      	subs	r3, r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	440b      	add	r3, r1
 80085fe:	3348      	adds	r3, #72	; 0x48
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	4619      	mov	r1, r3
 8008606:	f7fe fd05 	bl	8007014 <USBD_LL_DataInStage>
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008620:	4618      	mov	r0, r3
 8008622:	f7fe fe19 	bl	8007258 <USBD_LL_SOF>
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008636:	2301      	movs	r3, #1
 8008638:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	2b02      	cmp	r3, #2
 8008640:	d001      	beq.n	8008646 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008642:	f7f8 fc41 	bl	8000ec8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800864c:	7bfa      	ldrb	r2, [r7, #15]
 800864e:	4611      	mov	r1, r2
 8008650:	4618      	mov	r0, r3
 8008652:	f7fe fdc3 	bl	80071dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fd6f 	bl	8007140 <USBD_LL_Reset>
}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe fdbe 	bl	80071fc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6812      	ldr	r2, [r2, #0]
 800868e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008692:	f043 0301 	orr.w	r3, r3, #1
 8008696:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d005      	beq.n	80086ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086a0:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <HAL_PCD_SuspendCallback+0x48>)
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	4a03      	ldr	r2, [pc, #12]	; (80086b4 <HAL_PCD_SuspendCallback+0x48>)
 80086a6:	f043 0306 	orr.w	r3, r3, #6
 80086aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	e000ed00 	.word	0xe000ed00

080086b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe fdae 	bl	8007228 <USBD_LL_Resume>
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086e6:	78fa      	ldrb	r2, [r7, #3]
 80086e8:	4611      	mov	r1, r2
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe fdfc 	bl	80072e8 <USBD_LL_IsoOUTIncomplete>
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800870a:	78fa      	ldrb	r2, [r7, #3]
 800870c:	4611      	mov	r1, r2
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe fdc4 	bl	800729c <USBD_LL_IsoINIncomplete>
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fe02 	bl	8007334 <USBD_LL_DevConnected>
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fdff 	bl	800734a <USBD_LL_DevDisconnected>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d13f      	bne.n	80087e4 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008764:	4a22      	ldr	r2, [pc, #136]	; (80087f0 <USBD_LL_Init+0x9c>)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a20      	ldr	r2, [pc, #128]	; (80087f0 <USBD_LL_Init+0x9c>)
 8008770:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008774:	4b1e      	ldr	r3, [pc, #120]	; (80087f0 <USBD_LL_Init+0x9c>)
 8008776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800877a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800877c:	4b1c      	ldr	r3, [pc, #112]	; (80087f0 <USBD_LL_Init+0x9c>)
 800877e:	2206      	movs	r2, #6
 8008780:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008782:	4b1b      	ldr	r3, [pc, #108]	; (80087f0 <USBD_LL_Init+0x9c>)
 8008784:	2202      	movs	r2, #2
 8008786:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008788:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <USBD_LL_Init+0x9c>)
 800878a:	2200      	movs	r2, #0
 800878c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800878e:	4b18      	ldr	r3, [pc, #96]	; (80087f0 <USBD_LL_Init+0x9c>)
 8008790:	2202      	movs	r2, #2
 8008792:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008794:	4b16      	ldr	r3, [pc, #88]	; (80087f0 <USBD_LL_Init+0x9c>)
 8008796:	2200      	movs	r2, #0
 8008798:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800879a:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <USBD_LL_Init+0x9c>)
 800879c:	2200      	movs	r2, #0
 800879e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087a0:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <USBD_LL_Init+0x9c>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80087a6:	4b12      	ldr	r3, [pc, #72]	; (80087f0 <USBD_LL_Init+0x9c>)
 80087a8:	2201      	movs	r2, #1
 80087aa:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <USBD_LL_Init+0x9c>)
 80087ae:	2201      	movs	r2, #1
 80087b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087b2:	4b0f      	ldr	r3, [pc, #60]	; (80087f0 <USBD_LL_Init+0x9c>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087b8:	480d      	ldr	r0, [pc, #52]	; (80087f0 <USBD_LL_Init+0x9c>)
 80087ba:	f7f9 fc29 	bl	8002010 <HAL_PCD_Init>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 80087c4:	f7f8 fb80 	bl	8000ec8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087c8:	2180      	movs	r1, #128	; 0x80
 80087ca:	4809      	ldr	r0, [pc, #36]	; (80087f0 <USBD_LL_Init+0x9c>)
 80087cc:	f7fa fdbb 	bl	8003346 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087d0:	2240      	movs	r2, #64	; 0x40
 80087d2:	2100      	movs	r1, #0
 80087d4:	4806      	ldr	r0, [pc, #24]	; (80087f0 <USBD_LL_Init+0x9c>)
 80087d6:	f7fa fd6f 	bl	80032b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087da:	2280      	movs	r2, #128	; 0x80
 80087dc:	2101      	movs	r1, #1
 80087de:	4804      	ldr	r0, [pc, #16]	; (80087f0 <USBD_LL_Init+0x9c>)
 80087e0:	f7fa fd6a 	bl	80032b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20001d40 	.word	0x20001d40

080087f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800880a:	4618      	mov	r0, r3
 800880c:	f7f9 fd24 	bl	8002258 <HAL_PCD_Start>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 f990 	bl	8008b3c <USBD_Get_USB_Status>
 800881c:	4603      	mov	r3, r0
 800881e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008820:	7bbb      	ldrb	r3, [r7, #14]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	4608      	mov	r0, r1
 8008834:	4611      	mov	r1, r2
 8008836:	461a      	mov	r2, r3
 8008838:	4603      	mov	r3, r0
 800883a:	70fb      	strb	r3, [r7, #3]
 800883c:	460b      	mov	r3, r1
 800883e:	70bb      	strb	r3, [r7, #2]
 8008840:	4613      	mov	r3, r2
 8008842:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008852:	78bb      	ldrb	r3, [r7, #2]
 8008854:	883a      	ldrh	r2, [r7, #0]
 8008856:	78f9      	ldrb	r1, [r7, #3]
 8008858:	f7fa f935 	bl	8002ac6 <HAL_PCD_EP_Open>
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 f96a 	bl	8008b3c <USBD_Get_USB_Status>
 8008868:	4603      	mov	r3, r0
 800886a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800886c:	7bbb      	ldrb	r3, [r7, #14]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	4611      	mov	r1, r2
 8008894:	4618      	mov	r0, r3
 8008896:	f7fa f97e 	bl	8002b96 <HAL_PCD_EP_Close>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 f94b 	bl	8008b3c <USBD_Get_USB_Status>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fa fa56 	bl	8002d84 <HAL_PCD_EP_SetStall>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 f92c 	bl	8008b3c <USBD_Get_USB_Status>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f7fa fa9b 	bl	8002e4c <HAL_PCD_EP_ClrStall>
 8008916:	4603      	mov	r3, r0
 8008918:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f90d 	bl	8008b3c <USBD_Get_USB_Status>
 8008922:	4603      	mov	r3, r0
 8008924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008926:	7bbb      	ldrb	r3, [r7, #14]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008942:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008948:	2b00      	cmp	r3, #0
 800894a:	da0b      	bge.n	8008964 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800894c:	78fb      	ldrb	r3, [r7, #3]
 800894e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008952:	68f9      	ldr	r1, [r7, #12]
 8008954:	4613      	mov	r3, r2
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	1a9b      	subs	r3, r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	440b      	add	r3, r1
 800895e:	333e      	adds	r3, #62	; 0x3e
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	e00b      	b.n	800897c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800896a:	68f9      	ldr	r1, [r7, #12]
 800896c:	4613      	mov	r3, r2
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	1a9b      	subs	r3, r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800897a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089a2:	78fa      	ldrb	r2, [r7, #3]
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fa f868 	bl	8002a7c <HAL_PCD_SetAddress>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 f8c2 	bl	8008b3c <USBD_Get_USB_Status>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b086      	sub	sp, #24
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
 80089d2:	460b      	mov	r3, r1
 80089d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089e4:	7af9      	ldrb	r1, [r7, #11]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	f7fa f981 	bl	8002cf0 <HAL_PCD_EP_Transmit>
 80089ee:	4603      	mov	r3, r0
 80089f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f8a1 	bl	8008b3c <USBD_Get_USB_Status>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3718      	adds	r7, #24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	460b      	mov	r3, r1
 8008a16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a26:	7af9      	ldrb	r1, [r7, #11]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	f7fa f8fd 	bl	8002c2a <HAL_PCD_EP_Receive>
 8008a30:	4603      	mov	r3, r0
 8008a32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f880 	bl	8008b3c <USBD_Get_USB_Status>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a40:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a5c:	78fa      	ldrb	r2, [r7, #3]
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fa f92d 	bl	8002cc0 <HAL_PCD_EP_GetRxCount>
 8008a66:	4603      	mov	r3, r0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <HAL_PCDEx_LPM_Callback+0x18>
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d01f      	beq.n	8008ac6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008a86:	e03b      	b.n	8008b00 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008a90:	f7f7 fefe 	bl	8000890 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a94:	4b1c      	ldr	r3, [pc, #112]	; (8008b08 <HAL_PCDEx_LPM_Callback+0x98>)
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	4a1b      	ldr	r2, [pc, #108]	; (8008b08 <HAL_PCDEx_LPM_Callback+0x98>)
 8008a9a:	f023 0306 	bic.w	r3, r3, #6
 8008a9e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6812      	ldr	r2, [r2, #0]
 8008aae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ab2:	f023 0301 	bic.w	r3, r3, #1
 8008ab6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe fbb2 	bl	8007228 <USBD_LL_Resume>
    break;
 8008ac4:	e01c      	b.n	8008b00 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6812      	ldr	r2, [r2, #0]
 8008ad4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ad8:	f043 0301 	orr.w	r3, r3, #1
 8008adc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe fb89 	bl	80071fc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008af2:	4b05      	ldr	r3, [pc, #20]	; (8008b08 <HAL_PCDEx_LPM_Callback+0x98>)
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	4a04      	ldr	r2, [pc, #16]	; (8008b08 <HAL_PCDEx_LPM_Callback+0x98>)
 8008af8:	f043 0306 	orr.w	r3, r3, #6
 8008afc:	6113      	str	r3, [r2, #16]
    break;
 8008afe:	bf00      	nop
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	e000ed00 	.word	0xe000ed00

08008b0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b14:	4b03      	ldr	r3, [pc, #12]	; (8008b24 <USBD_static_malloc+0x18>)
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	20000438 	.word	0x20000438

08008b28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]

}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4603      	mov	r3, r0
 8008b44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b4a:	79fb      	ldrb	r3, [r7, #7]
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d817      	bhi.n	8008b80 <USBD_Get_USB_Status+0x44>
 8008b50:	a201      	add	r2, pc, #4	; (adr r2, 8008b58 <USBD_Get_USB_Status+0x1c>)
 8008b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b56:	bf00      	nop
 8008b58:	08008b69 	.word	0x08008b69
 8008b5c:	08008b6f 	.word	0x08008b6f
 8008b60:	08008b75 	.word	0x08008b75
 8008b64:	08008b7b 	.word	0x08008b7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6c:	e00b      	b.n	8008b86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	73fb      	strb	r3, [r7, #15]
    break;
 8008b72:	e008      	b.n	8008b86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b74:	2301      	movs	r3, #1
 8008b76:	73fb      	strb	r3, [r7, #15]
    break;
 8008b78:	e005      	b.n	8008b86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7e:	e002      	b.n	8008b86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b80:	2303      	movs	r3, #3
 8008b82:	73fb      	strb	r3, [r7, #15]
    break;
 8008b84:	bf00      	nop
  }
  return usb_status;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <__errno>:
 8008b94:	4b01      	ldr	r3, [pc, #4]	; (8008b9c <__errno+0x8>)
 8008b96:	6818      	ldr	r0, [r3, #0]
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	20000198 	.word	0x20000198

08008ba0 <__libc_init_array>:
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	4d0d      	ldr	r5, [pc, #52]	; (8008bd8 <__libc_init_array+0x38>)
 8008ba4:	4c0d      	ldr	r4, [pc, #52]	; (8008bdc <__libc_init_array+0x3c>)
 8008ba6:	1b64      	subs	r4, r4, r5
 8008ba8:	10a4      	asrs	r4, r4, #2
 8008baa:	2600      	movs	r6, #0
 8008bac:	42a6      	cmp	r6, r4
 8008bae:	d109      	bne.n	8008bc4 <__libc_init_array+0x24>
 8008bb0:	4d0b      	ldr	r5, [pc, #44]	; (8008be0 <__libc_init_array+0x40>)
 8008bb2:	4c0c      	ldr	r4, [pc, #48]	; (8008be4 <__libc_init_array+0x44>)
 8008bb4:	f000 fc4e 	bl	8009454 <_init>
 8008bb8:	1b64      	subs	r4, r4, r5
 8008bba:	10a4      	asrs	r4, r4, #2
 8008bbc:	2600      	movs	r6, #0
 8008bbe:	42a6      	cmp	r6, r4
 8008bc0:	d105      	bne.n	8008bce <__libc_init_array+0x2e>
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc8:	4798      	blx	r3
 8008bca:	3601      	adds	r6, #1
 8008bcc:	e7ee      	b.n	8008bac <__libc_init_array+0xc>
 8008bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd2:	4798      	blx	r3
 8008bd4:	3601      	adds	r6, #1
 8008bd6:	e7f2      	b.n	8008bbe <__libc_init_array+0x1e>
 8008bd8:	0800960c 	.word	0x0800960c
 8008bdc:	0800960c 	.word	0x0800960c
 8008be0:	0800960c 	.word	0x0800960c
 8008be4:	08009610 	.word	0x08009610

08008be8 <memcpy>:
 8008be8:	440a      	add	r2, r1
 8008bea:	4291      	cmp	r1, r2
 8008bec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008bf0:	d100      	bne.n	8008bf4 <memcpy+0xc>
 8008bf2:	4770      	bx	lr
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bfe:	4291      	cmp	r1, r2
 8008c00:	d1f9      	bne.n	8008bf6 <memcpy+0xe>
 8008c02:	bd10      	pop	{r4, pc}

08008c04 <memset>:
 8008c04:	4402      	add	r2, r0
 8008c06:	4603      	mov	r3, r0
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d100      	bne.n	8008c0e <memset+0xa>
 8008c0c:	4770      	bx	lr
 8008c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c12:	e7f9      	b.n	8008c08 <memset+0x4>

08008c14 <siprintf>:
 8008c14:	b40e      	push	{r1, r2, r3}
 8008c16:	b500      	push	{lr}
 8008c18:	b09c      	sub	sp, #112	; 0x70
 8008c1a:	ab1d      	add	r3, sp, #116	; 0x74
 8008c1c:	9002      	str	r0, [sp, #8]
 8008c1e:	9006      	str	r0, [sp, #24]
 8008c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c24:	4809      	ldr	r0, [pc, #36]	; (8008c4c <siprintf+0x38>)
 8008c26:	9107      	str	r1, [sp, #28]
 8008c28:	9104      	str	r1, [sp, #16]
 8008c2a:	4909      	ldr	r1, [pc, #36]	; (8008c50 <siprintf+0x3c>)
 8008c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c30:	9105      	str	r1, [sp, #20]
 8008c32:	6800      	ldr	r0, [r0, #0]
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	a902      	add	r1, sp, #8
 8008c38:	f000 f868 	bl	8008d0c <_svfiprintf_r>
 8008c3c:	9b02      	ldr	r3, [sp, #8]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	b01c      	add	sp, #112	; 0x70
 8008c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c48:	b003      	add	sp, #12
 8008c4a:	4770      	bx	lr
 8008c4c:	20000198 	.word	0x20000198
 8008c50:	ffff0208 	.word	0xffff0208

08008c54 <__ssputs_r>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	688e      	ldr	r6, [r1, #8]
 8008c5a:	429e      	cmp	r6, r3
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	4690      	mov	r8, r2
 8008c62:	461f      	mov	r7, r3
 8008c64:	d838      	bhi.n	8008cd8 <__ssputs_r+0x84>
 8008c66:	898a      	ldrh	r2, [r1, #12]
 8008c68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c6c:	d032      	beq.n	8008cd4 <__ssputs_r+0x80>
 8008c6e:	6825      	ldr	r5, [r4, #0]
 8008c70:	6909      	ldr	r1, [r1, #16]
 8008c72:	eba5 0901 	sub.w	r9, r5, r1
 8008c76:	6965      	ldr	r5, [r4, #20]
 8008c78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c80:	3301      	adds	r3, #1
 8008c82:	444b      	add	r3, r9
 8008c84:	106d      	asrs	r5, r5, #1
 8008c86:	429d      	cmp	r5, r3
 8008c88:	bf38      	it	cc
 8008c8a:	461d      	movcc	r5, r3
 8008c8c:	0553      	lsls	r3, r2, #21
 8008c8e:	d531      	bpl.n	8008cf4 <__ssputs_r+0xa0>
 8008c90:	4629      	mov	r1, r5
 8008c92:	f000 fb39 	bl	8009308 <_malloc_r>
 8008c96:	4606      	mov	r6, r0
 8008c98:	b950      	cbnz	r0, 8008cb0 <__ssputs_r+0x5c>
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	f8ca 3000 	str.w	r3, [sl]
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb0:	6921      	ldr	r1, [r4, #16]
 8008cb2:	464a      	mov	r2, r9
 8008cb4:	f7ff ff98 	bl	8008be8 <memcpy>
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc2:	81a3      	strh	r3, [r4, #12]
 8008cc4:	6126      	str	r6, [r4, #16]
 8008cc6:	6165      	str	r5, [r4, #20]
 8008cc8:	444e      	add	r6, r9
 8008cca:	eba5 0509 	sub.w	r5, r5, r9
 8008cce:	6026      	str	r6, [r4, #0]
 8008cd0:	60a5      	str	r5, [r4, #8]
 8008cd2:	463e      	mov	r6, r7
 8008cd4:	42be      	cmp	r6, r7
 8008cd6:	d900      	bls.n	8008cda <__ssputs_r+0x86>
 8008cd8:	463e      	mov	r6, r7
 8008cda:	4632      	mov	r2, r6
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	4641      	mov	r1, r8
 8008ce0:	f000 faa8 	bl	8009234 <memmove>
 8008ce4:	68a3      	ldr	r3, [r4, #8]
 8008ce6:	6822      	ldr	r2, [r4, #0]
 8008ce8:	1b9b      	subs	r3, r3, r6
 8008cea:	4432      	add	r2, r6
 8008cec:	60a3      	str	r3, [r4, #8]
 8008cee:	6022      	str	r2, [r4, #0]
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	e7db      	b.n	8008cac <__ssputs_r+0x58>
 8008cf4:	462a      	mov	r2, r5
 8008cf6:	f000 fb61 	bl	80093bc <_realloc_r>
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d1e1      	bne.n	8008cc4 <__ssputs_r+0x70>
 8008d00:	6921      	ldr	r1, [r4, #16]
 8008d02:	4650      	mov	r0, sl
 8008d04:	f000 fab0 	bl	8009268 <_free_r>
 8008d08:	e7c7      	b.n	8008c9a <__ssputs_r+0x46>
	...

08008d0c <_svfiprintf_r>:
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	4698      	mov	r8, r3
 8008d12:	898b      	ldrh	r3, [r1, #12]
 8008d14:	061b      	lsls	r3, r3, #24
 8008d16:	b09d      	sub	sp, #116	; 0x74
 8008d18:	4607      	mov	r7, r0
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	d50e      	bpl.n	8008d3e <_svfiprintf_r+0x32>
 8008d20:	690b      	ldr	r3, [r1, #16]
 8008d22:	b963      	cbnz	r3, 8008d3e <_svfiprintf_r+0x32>
 8008d24:	2140      	movs	r1, #64	; 0x40
 8008d26:	f000 faef 	bl	8009308 <_malloc_r>
 8008d2a:	6028      	str	r0, [r5, #0]
 8008d2c:	6128      	str	r0, [r5, #16]
 8008d2e:	b920      	cbnz	r0, 8008d3a <_svfiprintf_r+0x2e>
 8008d30:	230c      	movs	r3, #12
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d38:	e0d1      	b.n	8008ede <_svfiprintf_r+0x1d2>
 8008d3a:	2340      	movs	r3, #64	; 0x40
 8008d3c:	616b      	str	r3, [r5, #20]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9309      	str	r3, [sp, #36]	; 0x24
 8008d42:	2320      	movs	r3, #32
 8008d44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d4c:	2330      	movs	r3, #48	; 0x30
 8008d4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ef8 <_svfiprintf_r+0x1ec>
 8008d52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d56:	f04f 0901 	mov.w	r9, #1
 8008d5a:	4623      	mov	r3, r4
 8008d5c:	469a      	mov	sl, r3
 8008d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d62:	b10a      	cbz	r2, 8008d68 <_svfiprintf_r+0x5c>
 8008d64:	2a25      	cmp	r2, #37	; 0x25
 8008d66:	d1f9      	bne.n	8008d5c <_svfiprintf_r+0x50>
 8008d68:	ebba 0b04 	subs.w	fp, sl, r4
 8008d6c:	d00b      	beq.n	8008d86 <_svfiprintf_r+0x7a>
 8008d6e:	465b      	mov	r3, fp
 8008d70:	4622      	mov	r2, r4
 8008d72:	4629      	mov	r1, r5
 8008d74:	4638      	mov	r0, r7
 8008d76:	f7ff ff6d 	bl	8008c54 <__ssputs_r>
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	f000 80aa 	beq.w	8008ed4 <_svfiprintf_r+0x1c8>
 8008d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d82:	445a      	add	r2, fp
 8008d84:	9209      	str	r2, [sp, #36]	; 0x24
 8008d86:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 80a2 	beq.w	8008ed4 <_svfiprintf_r+0x1c8>
 8008d90:	2300      	movs	r3, #0
 8008d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d9a:	f10a 0a01 	add.w	sl, sl, #1
 8008d9e:	9304      	str	r3, [sp, #16]
 8008da0:	9307      	str	r3, [sp, #28]
 8008da2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008da6:	931a      	str	r3, [sp, #104]	; 0x68
 8008da8:	4654      	mov	r4, sl
 8008daa:	2205      	movs	r2, #5
 8008dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db0:	4851      	ldr	r0, [pc, #324]	; (8008ef8 <_svfiprintf_r+0x1ec>)
 8008db2:	f7f7 fa35 	bl	8000220 <memchr>
 8008db6:	9a04      	ldr	r2, [sp, #16]
 8008db8:	b9d8      	cbnz	r0, 8008df2 <_svfiprintf_r+0xe6>
 8008dba:	06d0      	lsls	r0, r2, #27
 8008dbc:	bf44      	itt	mi
 8008dbe:	2320      	movmi	r3, #32
 8008dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc4:	0711      	lsls	r1, r2, #28
 8008dc6:	bf44      	itt	mi
 8008dc8:	232b      	movmi	r3, #43	; 0x2b
 8008dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dce:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd4:	d015      	beq.n	8008e02 <_svfiprintf_r+0xf6>
 8008dd6:	9a07      	ldr	r2, [sp, #28]
 8008dd8:	4654      	mov	r4, sl
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f04f 0c0a 	mov.w	ip, #10
 8008de0:	4621      	mov	r1, r4
 8008de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de6:	3b30      	subs	r3, #48	; 0x30
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	d94e      	bls.n	8008e8a <_svfiprintf_r+0x17e>
 8008dec:	b1b0      	cbz	r0, 8008e1c <_svfiprintf_r+0x110>
 8008dee:	9207      	str	r2, [sp, #28]
 8008df0:	e014      	b.n	8008e1c <_svfiprintf_r+0x110>
 8008df2:	eba0 0308 	sub.w	r3, r0, r8
 8008df6:	fa09 f303 	lsl.w	r3, r9, r3
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	9304      	str	r3, [sp, #16]
 8008dfe:	46a2      	mov	sl, r4
 8008e00:	e7d2      	b.n	8008da8 <_svfiprintf_r+0x9c>
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	1d19      	adds	r1, r3, #4
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	9103      	str	r1, [sp, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	bfbb      	ittet	lt
 8008e0e:	425b      	neglt	r3, r3
 8008e10:	f042 0202 	orrlt.w	r2, r2, #2
 8008e14:	9307      	strge	r3, [sp, #28]
 8008e16:	9307      	strlt	r3, [sp, #28]
 8008e18:	bfb8      	it	lt
 8008e1a:	9204      	strlt	r2, [sp, #16]
 8008e1c:	7823      	ldrb	r3, [r4, #0]
 8008e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e20:	d10c      	bne.n	8008e3c <_svfiprintf_r+0x130>
 8008e22:	7863      	ldrb	r3, [r4, #1]
 8008e24:	2b2a      	cmp	r3, #42	; 0x2a
 8008e26:	d135      	bne.n	8008e94 <_svfiprintf_r+0x188>
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	1d1a      	adds	r2, r3, #4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	9203      	str	r2, [sp, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bfb8      	it	lt
 8008e34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e38:	3402      	adds	r4, #2
 8008e3a:	9305      	str	r3, [sp, #20]
 8008e3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f08 <_svfiprintf_r+0x1fc>
 8008e40:	7821      	ldrb	r1, [r4, #0]
 8008e42:	2203      	movs	r2, #3
 8008e44:	4650      	mov	r0, sl
 8008e46:	f7f7 f9eb 	bl	8000220 <memchr>
 8008e4a:	b140      	cbz	r0, 8008e5e <_svfiprintf_r+0x152>
 8008e4c:	2340      	movs	r3, #64	; 0x40
 8008e4e:	eba0 000a 	sub.w	r0, r0, sl
 8008e52:	fa03 f000 	lsl.w	r0, r3, r0
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	4303      	orrs	r3, r0
 8008e5a:	3401      	adds	r4, #1
 8008e5c:	9304      	str	r3, [sp, #16]
 8008e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e62:	4826      	ldr	r0, [pc, #152]	; (8008efc <_svfiprintf_r+0x1f0>)
 8008e64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e68:	2206      	movs	r2, #6
 8008e6a:	f7f7 f9d9 	bl	8000220 <memchr>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d038      	beq.n	8008ee4 <_svfiprintf_r+0x1d8>
 8008e72:	4b23      	ldr	r3, [pc, #140]	; (8008f00 <_svfiprintf_r+0x1f4>)
 8008e74:	bb1b      	cbnz	r3, 8008ebe <_svfiprintf_r+0x1b2>
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	3307      	adds	r3, #7
 8008e7a:	f023 0307 	bic.w	r3, r3, #7
 8008e7e:	3308      	adds	r3, #8
 8008e80:	9303      	str	r3, [sp, #12]
 8008e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e84:	4433      	add	r3, r6
 8008e86:	9309      	str	r3, [sp, #36]	; 0x24
 8008e88:	e767      	b.n	8008d5a <_svfiprintf_r+0x4e>
 8008e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e8e:	460c      	mov	r4, r1
 8008e90:	2001      	movs	r0, #1
 8008e92:	e7a5      	b.n	8008de0 <_svfiprintf_r+0xd4>
 8008e94:	2300      	movs	r3, #0
 8008e96:	3401      	adds	r4, #1
 8008e98:	9305      	str	r3, [sp, #20]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	f04f 0c0a 	mov.w	ip, #10
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea6:	3a30      	subs	r2, #48	; 0x30
 8008ea8:	2a09      	cmp	r2, #9
 8008eaa:	d903      	bls.n	8008eb4 <_svfiprintf_r+0x1a8>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0c5      	beq.n	8008e3c <_svfiprintf_r+0x130>
 8008eb0:	9105      	str	r1, [sp, #20]
 8008eb2:	e7c3      	b.n	8008e3c <_svfiprintf_r+0x130>
 8008eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb8:	4604      	mov	r4, r0
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e7f0      	b.n	8008ea0 <_svfiprintf_r+0x194>
 8008ebe:	ab03      	add	r3, sp, #12
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	462a      	mov	r2, r5
 8008ec4:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <_svfiprintf_r+0x1f8>)
 8008ec6:	a904      	add	r1, sp, #16
 8008ec8:	4638      	mov	r0, r7
 8008eca:	f3af 8000 	nop.w
 8008ece:	1c42      	adds	r2, r0, #1
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	d1d6      	bne.n	8008e82 <_svfiprintf_r+0x176>
 8008ed4:	89ab      	ldrh	r3, [r5, #12]
 8008ed6:	065b      	lsls	r3, r3, #25
 8008ed8:	f53f af2c 	bmi.w	8008d34 <_svfiprintf_r+0x28>
 8008edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ede:	b01d      	add	sp, #116	; 0x74
 8008ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee4:	ab03      	add	r3, sp, #12
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	462a      	mov	r2, r5
 8008eea:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <_svfiprintf_r+0x1f8>)
 8008eec:	a904      	add	r1, sp, #16
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f000 f87a 	bl	8008fe8 <_printf_i>
 8008ef4:	e7eb      	b.n	8008ece <_svfiprintf_r+0x1c2>
 8008ef6:	bf00      	nop
 8008ef8:	080095d0 	.word	0x080095d0
 8008efc:	080095da 	.word	0x080095da
 8008f00:	00000000 	.word	0x00000000
 8008f04:	08008c55 	.word	0x08008c55
 8008f08:	080095d6 	.word	0x080095d6

08008f0c <_printf_common>:
 8008f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f10:	4616      	mov	r6, r2
 8008f12:	4699      	mov	r9, r3
 8008f14:	688a      	ldr	r2, [r1, #8]
 8008f16:	690b      	ldr	r3, [r1, #16]
 8008f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	bfb8      	it	lt
 8008f20:	4613      	movlt	r3, r2
 8008f22:	6033      	str	r3, [r6, #0]
 8008f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f28:	4607      	mov	r7, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	b10a      	cbz	r2, 8008f32 <_printf_common+0x26>
 8008f2e:	3301      	adds	r3, #1
 8008f30:	6033      	str	r3, [r6, #0]
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	0699      	lsls	r1, r3, #26
 8008f36:	bf42      	ittt	mi
 8008f38:	6833      	ldrmi	r3, [r6, #0]
 8008f3a:	3302      	addmi	r3, #2
 8008f3c:	6033      	strmi	r3, [r6, #0]
 8008f3e:	6825      	ldr	r5, [r4, #0]
 8008f40:	f015 0506 	ands.w	r5, r5, #6
 8008f44:	d106      	bne.n	8008f54 <_printf_common+0x48>
 8008f46:	f104 0a19 	add.w	sl, r4, #25
 8008f4a:	68e3      	ldr	r3, [r4, #12]
 8008f4c:	6832      	ldr	r2, [r6, #0]
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	42ab      	cmp	r3, r5
 8008f52:	dc26      	bgt.n	8008fa2 <_printf_common+0x96>
 8008f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f58:	1e13      	subs	r3, r2, #0
 8008f5a:	6822      	ldr	r2, [r4, #0]
 8008f5c:	bf18      	it	ne
 8008f5e:	2301      	movne	r3, #1
 8008f60:	0692      	lsls	r2, r2, #26
 8008f62:	d42b      	bmi.n	8008fbc <_printf_common+0xb0>
 8008f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f68:	4649      	mov	r1, r9
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	47c0      	blx	r8
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d01e      	beq.n	8008fb0 <_printf_common+0xa4>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	68e5      	ldr	r5, [r4, #12]
 8008f76:	6832      	ldr	r2, [r6, #0]
 8008f78:	f003 0306 	and.w	r3, r3, #6
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	bf08      	it	eq
 8008f80:	1aad      	subeq	r5, r5, r2
 8008f82:	68a3      	ldr	r3, [r4, #8]
 8008f84:	6922      	ldr	r2, [r4, #16]
 8008f86:	bf0c      	ite	eq
 8008f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f8c:	2500      	movne	r5, #0
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	bfc4      	itt	gt
 8008f92:	1a9b      	subgt	r3, r3, r2
 8008f94:	18ed      	addgt	r5, r5, r3
 8008f96:	2600      	movs	r6, #0
 8008f98:	341a      	adds	r4, #26
 8008f9a:	42b5      	cmp	r5, r6
 8008f9c:	d11a      	bne.n	8008fd4 <_printf_common+0xc8>
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	e008      	b.n	8008fb4 <_printf_common+0xa8>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4652      	mov	r2, sl
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	4638      	mov	r0, r7
 8008faa:	47c0      	blx	r8
 8008fac:	3001      	adds	r0, #1
 8008fae:	d103      	bne.n	8008fb8 <_printf_common+0xac>
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb8:	3501      	adds	r5, #1
 8008fba:	e7c6      	b.n	8008f4a <_printf_common+0x3e>
 8008fbc:	18e1      	adds	r1, r4, r3
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	2030      	movs	r0, #48	; 0x30
 8008fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fc6:	4422      	add	r2, r4
 8008fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fd0:	3302      	adds	r3, #2
 8008fd2:	e7c7      	b.n	8008f64 <_printf_common+0x58>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	4649      	mov	r1, r9
 8008fda:	4638      	mov	r0, r7
 8008fdc:	47c0      	blx	r8
 8008fde:	3001      	adds	r0, #1
 8008fe0:	d0e6      	beq.n	8008fb0 <_printf_common+0xa4>
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	e7d9      	b.n	8008f9a <_printf_common+0x8e>
	...

08008fe8 <_printf_i>:
 8008fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fec:	460c      	mov	r4, r1
 8008fee:	4691      	mov	r9, r2
 8008ff0:	7e27      	ldrb	r7, [r4, #24]
 8008ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ff4:	2f78      	cmp	r7, #120	; 0x78
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	469a      	mov	sl, r3
 8008ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ffe:	d807      	bhi.n	8009010 <_printf_i+0x28>
 8009000:	2f62      	cmp	r7, #98	; 0x62
 8009002:	d80a      	bhi.n	800901a <_printf_i+0x32>
 8009004:	2f00      	cmp	r7, #0
 8009006:	f000 80d8 	beq.w	80091ba <_printf_i+0x1d2>
 800900a:	2f58      	cmp	r7, #88	; 0x58
 800900c:	f000 80a3 	beq.w	8009156 <_printf_i+0x16e>
 8009010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009018:	e03a      	b.n	8009090 <_printf_i+0xa8>
 800901a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800901e:	2b15      	cmp	r3, #21
 8009020:	d8f6      	bhi.n	8009010 <_printf_i+0x28>
 8009022:	a001      	add	r0, pc, #4	; (adr r0, 8009028 <_printf_i+0x40>)
 8009024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009028:	08009081 	.word	0x08009081
 800902c:	08009095 	.word	0x08009095
 8009030:	08009011 	.word	0x08009011
 8009034:	08009011 	.word	0x08009011
 8009038:	08009011 	.word	0x08009011
 800903c:	08009011 	.word	0x08009011
 8009040:	08009095 	.word	0x08009095
 8009044:	08009011 	.word	0x08009011
 8009048:	08009011 	.word	0x08009011
 800904c:	08009011 	.word	0x08009011
 8009050:	08009011 	.word	0x08009011
 8009054:	080091a1 	.word	0x080091a1
 8009058:	080090c5 	.word	0x080090c5
 800905c:	08009183 	.word	0x08009183
 8009060:	08009011 	.word	0x08009011
 8009064:	08009011 	.word	0x08009011
 8009068:	080091c3 	.word	0x080091c3
 800906c:	08009011 	.word	0x08009011
 8009070:	080090c5 	.word	0x080090c5
 8009074:	08009011 	.word	0x08009011
 8009078:	08009011 	.word	0x08009011
 800907c:	0800918b 	.word	0x0800918b
 8009080:	680b      	ldr	r3, [r1, #0]
 8009082:	1d1a      	adds	r2, r3, #4
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	600a      	str	r2, [r1, #0]
 8009088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800908c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009090:	2301      	movs	r3, #1
 8009092:	e0a3      	b.n	80091dc <_printf_i+0x1f4>
 8009094:	6825      	ldr	r5, [r4, #0]
 8009096:	6808      	ldr	r0, [r1, #0]
 8009098:	062e      	lsls	r6, r5, #24
 800909a:	f100 0304 	add.w	r3, r0, #4
 800909e:	d50a      	bpl.n	80090b6 <_printf_i+0xce>
 80090a0:	6805      	ldr	r5, [r0, #0]
 80090a2:	600b      	str	r3, [r1, #0]
 80090a4:	2d00      	cmp	r5, #0
 80090a6:	da03      	bge.n	80090b0 <_printf_i+0xc8>
 80090a8:	232d      	movs	r3, #45	; 0x2d
 80090aa:	426d      	negs	r5, r5
 80090ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090b0:	485e      	ldr	r0, [pc, #376]	; (800922c <_printf_i+0x244>)
 80090b2:	230a      	movs	r3, #10
 80090b4:	e019      	b.n	80090ea <_printf_i+0x102>
 80090b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090ba:	6805      	ldr	r5, [r0, #0]
 80090bc:	600b      	str	r3, [r1, #0]
 80090be:	bf18      	it	ne
 80090c0:	b22d      	sxthne	r5, r5
 80090c2:	e7ef      	b.n	80090a4 <_printf_i+0xbc>
 80090c4:	680b      	ldr	r3, [r1, #0]
 80090c6:	6825      	ldr	r5, [r4, #0]
 80090c8:	1d18      	adds	r0, r3, #4
 80090ca:	6008      	str	r0, [r1, #0]
 80090cc:	0628      	lsls	r0, r5, #24
 80090ce:	d501      	bpl.n	80090d4 <_printf_i+0xec>
 80090d0:	681d      	ldr	r5, [r3, #0]
 80090d2:	e002      	b.n	80090da <_printf_i+0xf2>
 80090d4:	0669      	lsls	r1, r5, #25
 80090d6:	d5fb      	bpl.n	80090d0 <_printf_i+0xe8>
 80090d8:	881d      	ldrh	r5, [r3, #0]
 80090da:	4854      	ldr	r0, [pc, #336]	; (800922c <_printf_i+0x244>)
 80090dc:	2f6f      	cmp	r7, #111	; 0x6f
 80090de:	bf0c      	ite	eq
 80090e0:	2308      	moveq	r3, #8
 80090e2:	230a      	movne	r3, #10
 80090e4:	2100      	movs	r1, #0
 80090e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090ea:	6866      	ldr	r6, [r4, #4]
 80090ec:	60a6      	str	r6, [r4, #8]
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	bfa2      	ittt	ge
 80090f2:	6821      	ldrge	r1, [r4, #0]
 80090f4:	f021 0104 	bicge.w	r1, r1, #4
 80090f8:	6021      	strge	r1, [r4, #0]
 80090fa:	b90d      	cbnz	r5, 8009100 <_printf_i+0x118>
 80090fc:	2e00      	cmp	r6, #0
 80090fe:	d04d      	beq.n	800919c <_printf_i+0x1b4>
 8009100:	4616      	mov	r6, r2
 8009102:	fbb5 f1f3 	udiv	r1, r5, r3
 8009106:	fb03 5711 	mls	r7, r3, r1, r5
 800910a:	5dc7      	ldrb	r7, [r0, r7]
 800910c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009110:	462f      	mov	r7, r5
 8009112:	42bb      	cmp	r3, r7
 8009114:	460d      	mov	r5, r1
 8009116:	d9f4      	bls.n	8009102 <_printf_i+0x11a>
 8009118:	2b08      	cmp	r3, #8
 800911a:	d10b      	bne.n	8009134 <_printf_i+0x14c>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	07df      	lsls	r7, r3, #31
 8009120:	d508      	bpl.n	8009134 <_printf_i+0x14c>
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	6861      	ldr	r1, [r4, #4]
 8009126:	4299      	cmp	r1, r3
 8009128:	bfde      	ittt	le
 800912a:	2330      	movle	r3, #48	; 0x30
 800912c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009130:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009134:	1b92      	subs	r2, r2, r6
 8009136:	6122      	str	r2, [r4, #16]
 8009138:	f8cd a000 	str.w	sl, [sp]
 800913c:	464b      	mov	r3, r9
 800913e:	aa03      	add	r2, sp, #12
 8009140:	4621      	mov	r1, r4
 8009142:	4640      	mov	r0, r8
 8009144:	f7ff fee2 	bl	8008f0c <_printf_common>
 8009148:	3001      	adds	r0, #1
 800914a:	d14c      	bne.n	80091e6 <_printf_i+0x1fe>
 800914c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009150:	b004      	add	sp, #16
 8009152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009156:	4835      	ldr	r0, [pc, #212]	; (800922c <_printf_i+0x244>)
 8009158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	680e      	ldr	r6, [r1, #0]
 8009160:	061f      	lsls	r7, r3, #24
 8009162:	f856 5b04 	ldr.w	r5, [r6], #4
 8009166:	600e      	str	r6, [r1, #0]
 8009168:	d514      	bpl.n	8009194 <_printf_i+0x1ac>
 800916a:	07d9      	lsls	r1, r3, #31
 800916c:	bf44      	itt	mi
 800916e:	f043 0320 	orrmi.w	r3, r3, #32
 8009172:	6023      	strmi	r3, [r4, #0]
 8009174:	b91d      	cbnz	r5, 800917e <_printf_i+0x196>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	f023 0320 	bic.w	r3, r3, #32
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	2310      	movs	r3, #16
 8009180:	e7b0      	b.n	80090e4 <_printf_i+0xfc>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	f043 0320 	orr.w	r3, r3, #32
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	2378      	movs	r3, #120	; 0x78
 800918c:	4828      	ldr	r0, [pc, #160]	; (8009230 <_printf_i+0x248>)
 800918e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009192:	e7e3      	b.n	800915c <_printf_i+0x174>
 8009194:	065e      	lsls	r6, r3, #25
 8009196:	bf48      	it	mi
 8009198:	b2ad      	uxthmi	r5, r5
 800919a:	e7e6      	b.n	800916a <_printf_i+0x182>
 800919c:	4616      	mov	r6, r2
 800919e:	e7bb      	b.n	8009118 <_printf_i+0x130>
 80091a0:	680b      	ldr	r3, [r1, #0]
 80091a2:	6826      	ldr	r6, [r4, #0]
 80091a4:	6960      	ldr	r0, [r4, #20]
 80091a6:	1d1d      	adds	r5, r3, #4
 80091a8:	600d      	str	r5, [r1, #0]
 80091aa:	0635      	lsls	r5, r6, #24
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	d501      	bpl.n	80091b4 <_printf_i+0x1cc>
 80091b0:	6018      	str	r0, [r3, #0]
 80091b2:	e002      	b.n	80091ba <_printf_i+0x1d2>
 80091b4:	0671      	lsls	r1, r6, #25
 80091b6:	d5fb      	bpl.n	80091b0 <_printf_i+0x1c8>
 80091b8:	8018      	strh	r0, [r3, #0]
 80091ba:	2300      	movs	r3, #0
 80091bc:	6123      	str	r3, [r4, #16]
 80091be:	4616      	mov	r6, r2
 80091c0:	e7ba      	b.n	8009138 <_printf_i+0x150>
 80091c2:	680b      	ldr	r3, [r1, #0]
 80091c4:	1d1a      	adds	r2, r3, #4
 80091c6:	600a      	str	r2, [r1, #0]
 80091c8:	681e      	ldr	r6, [r3, #0]
 80091ca:	6862      	ldr	r2, [r4, #4]
 80091cc:	2100      	movs	r1, #0
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7f7 f826 	bl	8000220 <memchr>
 80091d4:	b108      	cbz	r0, 80091da <_printf_i+0x1f2>
 80091d6:	1b80      	subs	r0, r0, r6
 80091d8:	6060      	str	r0, [r4, #4]
 80091da:	6863      	ldr	r3, [r4, #4]
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	2300      	movs	r3, #0
 80091e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091e4:	e7a8      	b.n	8009138 <_printf_i+0x150>
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	4632      	mov	r2, r6
 80091ea:	4649      	mov	r1, r9
 80091ec:	4640      	mov	r0, r8
 80091ee:	47d0      	blx	sl
 80091f0:	3001      	adds	r0, #1
 80091f2:	d0ab      	beq.n	800914c <_printf_i+0x164>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	079b      	lsls	r3, r3, #30
 80091f8:	d413      	bmi.n	8009222 <_printf_i+0x23a>
 80091fa:	68e0      	ldr	r0, [r4, #12]
 80091fc:	9b03      	ldr	r3, [sp, #12]
 80091fe:	4298      	cmp	r0, r3
 8009200:	bfb8      	it	lt
 8009202:	4618      	movlt	r0, r3
 8009204:	e7a4      	b.n	8009150 <_printf_i+0x168>
 8009206:	2301      	movs	r3, #1
 8009208:	4632      	mov	r2, r6
 800920a:	4649      	mov	r1, r9
 800920c:	4640      	mov	r0, r8
 800920e:	47d0      	blx	sl
 8009210:	3001      	adds	r0, #1
 8009212:	d09b      	beq.n	800914c <_printf_i+0x164>
 8009214:	3501      	adds	r5, #1
 8009216:	68e3      	ldr	r3, [r4, #12]
 8009218:	9903      	ldr	r1, [sp, #12]
 800921a:	1a5b      	subs	r3, r3, r1
 800921c:	42ab      	cmp	r3, r5
 800921e:	dcf2      	bgt.n	8009206 <_printf_i+0x21e>
 8009220:	e7eb      	b.n	80091fa <_printf_i+0x212>
 8009222:	2500      	movs	r5, #0
 8009224:	f104 0619 	add.w	r6, r4, #25
 8009228:	e7f5      	b.n	8009216 <_printf_i+0x22e>
 800922a:	bf00      	nop
 800922c:	080095e1 	.word	0x080095e1
 8009230:	080095f2 	.word	0x080095f2

08009234 <memmove>:
 8009234:	4288      	cmp	r0, r1
 8009236:	b510      	push	{r4, lr}
 8009238:	eb01 0402 	add.w	r4, r1, r2
 800923c:	d902      	bls.n	8009244 <memmove+0x10>
 800923e:	4284      	cmp	r4, r0
 8009240:	4623      	mov	r3, r4
 8009242:	d807      	bhi.n	8009254 <memmove+0x20>
 8009244:	1e43      	subs	r3, r0, #1
 8009246:	42a1      	cmp	r1, r4
 8009248:	d008      	beq.n	800925c <memmove+0x28>
 800924a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800924e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009252:	e7f8      	b.n	8009246 <memmove+0x12>
 8009254:	4402      	add	r2, r0
 8009256:	4601      	mov	r1, r0
 8009258:	428a      	cmp	r2, r1
 800925a:	d100      	bne.n	800925e <memmove+0x2a>
 800925c:	bd10      	pop	{r4, pc}
 800925e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009266:	e7f7      	b.n	8009258 <memmove+0x24>

08009268 <_free_r>:
 8009268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800926a:	2900      	cmp	r1, #0
 800926c:	d048      	beq.n	8009300 <_free_r+0x98>
 800926e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009272:	9001      	str	r0, [sp, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	f1a1 0404 	sub.w	r4, r1, #4
 800927a:	bfb8      	it	lt
 800927c:	18e4      	addlt	r4, r4, r3
 800927e:	f000 f8d3 	bl	8009428 <__malloc_lock>
 8009282:	4a20      	ldr	r2, [pc, #128]	; (8009304 <_free_r+0x9c>)
 8009284:	9801      	ldr	r0, [sp, #4]
 8009286:	6813      	ldr	r3, [r2, #0]
 8009288:	4615      	mov	r5, r2
 800928a:	b933      	cbnz	r3, 800929a <_free_r+0x32>
 800928c:	6063      	str	r3, [r4, #4]
 800928e:	6014      	str	r4, [r2, #0]
 8009290:	b003      	add	sp, #12
 8009292:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009296:	f000 b8cd 	b.w	8009434 <__malloc_unlock>
 800929a:	42a3      	cmp	r3, r4
 800929c:	d90b      	bls.n	80092b6 <_free_r+0x4e>
 800929e:	6821      	ldr	r1, [r4, #0]
 80092a0:	1862      	adds	r2, r4, r1
 80092a2:	4293      	cmp	r3, r2
 80092a4:	bf04      	itt	eq
 80092a6:	681a      	ldreq	r2, [r3, #0]
 80092a8:	685b      	ldreq	r3, [r3, #4]
 80092aa:	6063      	str	r3, [r4, #4]
 80092ac:	bf04      	itt	eq
 80092ae:	1852      	addeq	r2, r2, r1
 80092b0:	6022      	streq	r2, [r4, #0]
 80092b2:	602c      	str	r4, [r5, #0]
 80092b4:	e7ec      	b.n	8009290 <_free_r+0x28>
 80092b6:	461a      	mov	r2, r3
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	b10b      	cbz	r3, 80092c0 <_free_r+0x58>
 80092bc:	42a3      	cmp	r3, r4
 80092be:	d9fa      	bls.n	80092b6 <_free_r+0x4e>
 80092c0:	6811      	ldr	r1, [r2, #0]
 80092c2:	1855      	adds	r5, r2, r1
 80092c4:	42a5      	cmp	r5, r4
 80092c6:	d10b      	bne.n	80092e0 <_free_r+0x78>
 80092c8:	6824      	ldr	r4, [r4, #0]
 80092ca:	4421      	add	r1, r4
 80092cc:	1854      	adds	r4, r2, r1
 80092ce:	42a3      	cmp	r3, r4
 80092d0:	6011      	str	r1, [r2, #0]
 80092d2:	d1dd      	bne.n	8009290 <_free_r+0x28>
 80092d4:	681c      	ldr	r4, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	6053      	str	r3, [r2, #4]
 80092da:	4421      	add	r1, r4
 80092dc:	6011      	str	r1, [r2, #0]
 80092de:	e7d7      	b.n	8009290 <_free_r+0x28>
 80092e0:	d902      	bls.n	80092e8 <_free_r+0x80>
 80092e2:	230c      	movs	r3, #12
 80092e4:	6003      	str	r3, [r0, #0]
 80092e6:	e7d3      	b.n	8009290 <_free_r+0x28>
 80092e8:	6825      	ldr	r5, [r4, #0]
 80092ea:	1961      	adds	r1, r4, r5
 80092ec:	428b      	cmp	r3, r1
 80092ee:	bf04      	itt	eq
 80092f0:	6819      	ldreq	r1, [r3, #0]
 80092f2:	685b      	ldreq	r3, [r3, #4]
 80092f4:	6063      	str	r3, [r4, #4]
 80092f6:	bf04      	itt	eq
 80092f8:	1949      	addeq	r1, r1, r5
 80092fa:	6021      	streq	r1, [r4, #0]
 80092fc:	6054      	str	r4, [r2, #4]
 80092fe:	e7c7      	b.n	8009290 <_free_r+0x28>
 8009300:	b003      	add	sp, #12
 8009302:	bd30      	pop	{r4, r5, pc}
 8009304:	20000658 	.word	0x20000658

08009308 <_malloc_r>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	1ccd      	adds	r5, r1, #3
 800930c:	f025 0503 	bic.w	r5, r5, #3
 8009310:	3508      	adds	r5, #8
 8009312:	2d0c      	cmp	r5, #12
 8009314:	bf38      	it	cc
 8009316:	250c      	movcc	r5, #12
 8009318:	2d00      	cmp	r5, #0
 800931a:	4606      	mov	r6, r0
 800931c:	db01      	blt.n	8009322 <_malloc_r+0x1a>
 800931e:	42a9      	cmp	r1, r5
 8009320:	d903      	bls.n	800932a <_malloc_r+0x22>
 8009322:	230c      	movs	r3, #12
 8009324:	6033      	str	r3, [r6, #0]
 8009326:	2000      	movs	r0, #0
 8009328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800932a:	f000 f87d 	bl	8009428 <__malloc_lock>
 800932e:	4921      	ldr	r1, [pc, #132]	; (80093b4 <_malloc_r+0xac>)
 8009330:	680a      	ldr	r2, [r1, #0]
 8009332:	4614      	mov	r4, r2
 8009334:	b99c      	cbnz	r4, 800935e <_malloc_r+0x56>
 8009336:	4f20      	ldr	r7, [pc, #128]	; (80093b8 <_malloc_r+0xb0>)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	b923      	cbnz	r3, 8009346 <_malloc_r+0x3e>
 800933c:	4621      	mov	r1, r4
 800933e:	4630      	mov	r0, r6
 8009340:	f000 f862 	bl	8009408 <_sbrk_r>
 8009344:	6038      	str	r0, [r7, #0]
 8009346:	4629      	mov	r1, r5
 8009348:	4630      	mov	r0, r6
 800934a:	f000 f85d 	bl	8009408 <_sbrk_r>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	d123      	bne.n	800939a <_malloc_r+0x92>
 8009352:	230c      	movs	r3, #12
 8009354:	6033      	str	r3, [r6, #0]
 8009356:	4630      	mov	r0, r6
 8009358:	f000 f86c 	bl	8009434 <__malloc_unlock>
 800935c:	e7e3      	b.n	8009326 <_malloc_r+0x1e>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	1b5b      	subs	r3, r3, r5
 8009362:	d417      	bmi.n	8009394 <_malloc_r+0x8c>
 8009364:	2b0b      	cmp	r3, #11
 8009366:	d903      	bls.n	8009370 <_malloc_r+0x68>
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	441c      	add	r4, r3
 800936c:	6025      	str	r5, [r4, #0]
 800936e:	e004      	b.n	800937a <_malloc_r+0x72>
 8009370:	6863      	ldr	r3, [r4, #4]
 8009372:	42a2      	cmp	r2, r4
 8009374:	bf0c      	ite	eq
 8009376:	600b      	streq	r3, [r1, #0]
 8009378:	6053      	strne	r3, [r2, #4]
 800937a:	4630      	mov	r0, r6
 800937c:	f000 f85a 	bl	8009434 <__malloc_unlock>
 8009380:	f104 000b 	add.w	r0, r4, #11
 8009384:	1d23      	adds	r3, r4, #4
 8009386:	f020 0007 	bic.w	r0, r0, #7
 800938a:	1ac2      	subs	r2, r0, r3
 800938c:	d0cc      	beq.n	8009328 <_malloc_r+0x20>
 800938e:	1a1b      	subs	r3, r3, r0
 8009390:	50a3      	str	r3, [r4, r2]
 8009392:	e7c9      	b.n	8009328 <_malloc_r+0x20>
 8009394:	4622      	mov	r2, r4
 8009396:	6864      	ldr	r4, [r4, #4]
 8009398:	e7cc      	b.n	8009334 <_malloc_r+0x2c>
 800939a:	1cc4      	adds	r4, r0, #3
 800939c:	f024 0403 	bic.w	r4, r4, #3
 80093a0:	42a0      	cmp	r0, r4
 80093a2:	d0e3      	beq.n	800936c <_malloc_r+0x64>
 80093a4:	1a21      	subs	r1, r4, r0
 80093a6:	4630      	mov	r0, r6
 80093a8:	f000 f82e 	bl	8009408 <_sbrk_r>
 80093ac:	3001      	adds	r0, #1
 80093ae:	d1dd      	bne.n	800936c <_malloc_r+0x64>
 80093b0:	e7cf      	b.n	8009352 <_malloc_r+0x4a>
 80093b2:	bf00      	nop
 80093b4:	20000658 	.word	0x20000658
 80093b8:	2000065c 	.word	0x2000065c

080093bc <_realloc_r>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	4607      	mov	r7, r0
 80093c0:	4614      	mov	r4, r2
 80093c2:	460e      	mov	r6, r1
 80093c4:	b921      	cbnz	r1, 80093d0 <_realloc_r+0x14>
 80093c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093ca:	4611      	mov	r1, r2
 80093cc:	f7ff bf9c 	b.w	8009308 <_malloc_r>
 80093d0:	b922      	cbnz	r2, 80093dc <_realloc_r+0x20>
 80093d2:	f7ff ff49 	bl	8009268 <_free_r>
 80093d6:	4625      	mov	r5, r4
 80093d8:	4628      	mov	r0, r5
 80093da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093dc:	f000 f830 	bl	8009440 <_malloc_usable_size_r>
 80093e0:	42a0      	cmp	r0, r4
 80093e2:	d20f      	bcs.n	8009404 <_realloc_r+0x48>
 80093e4:	4621      	mov	r1, r4
 80093e6:	4638      	mov	r0, r7
 80093e8:	f7ff ff8e 	bl	8009308 <_malloc_r>
 80093ec:	4605      	mov	r5, r0
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d0f2      	beq.n	80093d8 <_realloc_r+0x1c>
 80093f2:	4631      	mov	r1, r6
 80093f4:	4622      	mov	r2, r4
 80093f6:	f7ff fbf7 	bl	8008be8 <memcpy>
 80093fa:	4631      	mov	r1, r6
 80093fc:	4638      	mov	r0, r7
 80093fe:	f7ff ff33 	bl	8009268 <_free_r>
 8009402:	e7e9      	b.n	80093d8 <_realloc_r+0x1c>
 8009404:	4635      	mov	r5, r6
 8009406:	e7e7      	b.n	80093d8 <_realloc_r+0x1c>

08009408 <_sbrk_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d06      	ldr	r5, [pc, #24]	; (8009424 <_sbrk_r+0x1c>)
 800940c:	2300      	movs	r3, #0
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	602b      	str	r3, [r5, #0]
 8009414:	f7f7 ffe2 	bl	80013dc <_sbrk>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_sbrk_r+0x1a>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_sbrk_r+0x1a>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20002148 	.word	0x20002148

08009428 <__malloc_lock>:
 8009428:	4801      	ldr	r0, [pc, #4]	; (8009430 <__malloc_lock+0x8>)
 800942a:	f000 b811 	b.w	8009450 <__retarget_lock_acquire_recursive>
 800942e:	bf00      	nop
 8009430:	20002150 	.word	0x20002150

08009434 <__malloc_unlock>:
 8009434:	4801      	ldr	r0, [pc, #4]	; (800943c <__malloc_unlock+0x8>)
 8009436:	f000 b80c 	b.w	8009452 <__retarget_lock_release_recursive>
 800943a:	bf00      	nop
 800943c:	20002150 	.word	0x20002150

08009440 <_malloc_usable_size_r>:
 8009440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009444:	1f18      	subs	r0, r3, #4
 8009446:	2b00      	cmp	r3, #0
 8009448:	bfbc      	itt	lt
 800944a:	580b      	ldrlt	r3, [r1, r0]
 800944c:	18c0      	addlt	r0, r0, r3
 800944e:	4770      	bx	lr

08009450 <__retarget_lock_acquire_recursive>:
 8009450:	4770      	bx	lr

08009452 <__retarget_lock_release_recursive>:
 8009452:	4770      	bx	lr

08009454 <_init>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	bf00      	nop
 8009458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945a:	bc08      	pop	{r3}
 800945c:	469e      	mov	lr, r3
 800945e:	4770      	bx	lr

08009460 <_fini>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr
